(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))i(r);new MutationObserver(r=>{for(const s of r)if(s.type==="childList")for(const a of s.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&i(a)}).observe(document,{childList:!0,subtree:!0});function e(r){const s={};return r.integrity&&(s.integrity=r.integrity),r.referrerPolicy&&(s.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?s.credentials="include":r.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(r){if(r.ep)return;r.ep=!0;const s=e(r);fetch(r.href,s)}})();const M1={Accent:{interpolate:!1,colors:[[.498,.7882,.498],[.7451,.6824,.8314],[.9922,.7529,.5255],[1,1,.6],[.2196,.4235,.6902],[.9412,.0078,.498],[.749,.3569,.0902],[.4,.4,.4]]},Blues:{interpolate:!0,colors:[[.9686,.9843,1],[.9656,.9823,.999],[.9625,.9804,.998],[.9594,.9784,.997],[.9563,.9764,.9961],[.9532,.9745,.9951],[.9502,.9725,.9941],[.9471,.9705,.9931],[.944,.9686,.9921],[.9409,.9666,.9911],[.9379,.9646,.9902],[.9348,.9627,.9892],[.9317,.9607,.9882],[.9286,.9587,.9872],[.9256,.9568,.9862],[.9225,.9548,.9852],[.9194,.9528,.9843],[.9163,.9508,.9833],[.9133,.9489,.9823],[.9102,.9469,.9813],[.9071,.9449,.9803],[.904,.943,.9793],[.901,.941,.9783],[.8979,.939,.9774],[.8948,.9371,.9764],[.8917,.9351,.9754],[.8887,.9331,.9744],[.8856,.9312,.9734],[.8825,.9292,.9724],[.8794,.9272,.9715],[.8764,.9253,.9705],[.8733,.9233,.9695],[.8702,.9213,.9685],[.8673,.9194,.9675],[.8643,.9174,.9665],[.8614,.9154,.9656],[.8584,.9134,.9646],[.8555,.9115,.9636],[.8525,.9095,.9626],[.8496,.9075,.9616],[.8466,.9056,.9606],[.8436,.9036,.9596],[.8407,.9016,.9587],[.8377,.8997,.9577],[.8348,.8977,.9567],[.8318,.8957,.9557],[.8289,.8938,.9547],[.8259,.8918,.9537],[.823,.8898,.9528],[.82,.8879,.9518],[.8171,.8859,.9508],[.8141,.8839,.9498],[.8112,.882,.9488],[.8082,.88,.9478],[.8053,.878,.9469],[.8023,.876,.9459],[.7994,.8741,.9449],[.7964,.8721,.9439],[.7934,.8701,.9429],[.7905,.8682,.9419],[.7875,.8662,.9409],[.7846,.8642,.94],[.7816,.8623,.939],[.7787,.8603,.938],[.7752,.8583,.9368],[.7703,.8562,.9351],[.7654,.8541,.9334],[.7605,.852,.9317],[.7556,.8499,.9299],[.7506,.8478,.9282],[.7457,.8458,.9265],[.7408,.8437,.9248],[.7359,.8416,.923],[.7309,.8395,.9213],[.726,.8374,.9196],[.7211,.8353,.9179],[.7162,.8332,.9162],[.7113,.8311,.9144],[.7063,.829,.9127],[.7014,.8269,.911],[.6965,.8248,.9093],[.6916,.8227,.9075],[.6867,.8207,.9058],[.6817,.8186,.9041],[.6768,.8165,.9024],[.6719,.8144,.9007],[.667,.8123,.8989],[.6621,.8102,.8972],[.6571,.8081,.8955],[.6522,.806,.8938],[.6473,.8039,.892],[.6424,.8018,.8903],[.6374,.7997,.8886],[.6325,.7976,.8869],[.6276,.7956,.8852],[.6227,.7935,.8834],[.6173,.7909,.8818],[.611,.7874,.8805],[.6047,.784,.8791],[.5984,.7805,.8778],[.5922,.7771,.8764],[.5859,.7736,.8751],[.5796,.7702,.8737],[.5733,.7668,.8724],[.5671,.7633,.871],[.5608,.7599,.8697],[.5545,.7564,.8683],[.5482,.753,.867],[.542,.7495,.8656],[.5357,.7461,.8643],[.5294,.7426,.8629],[.5231,.7392,.8615],[.5169,.7357,.8602],[.5106,.7323,.8588],[.5043,.7289,.8575],[.498,.7254,.8561],[.4918,.722,.8548],[.4855,.7185,.8534],[.4792,.7151,.8521],[.4729,.7116,.8507],[.4667,.7082,.8494],[.4604,.7047,.848],[.4541,.7013,.8467],[.4478,.6979,.8453],[.4416,.6944,.844],[.4353,.691,.8426],[.429,.6875,.8412],[.4227,.6841,.8399],[.4171,.6806,.8382],[.412,.6772,.8363],[.407,.6737,.8343],[.402,.6703,.8323],[.3969,.6669,.8304],[.3919,.6634,.8284],[.3868,.66,.8264],[.3818,.6565,.8245],[.3767,.6531,.8225],[.3717,.6496,.8205],[.3666,.6462,.8185],[.3616,.6427,.8166],[.3566,.6393,.8146],[.3515,.6358,.8126],[.3465,.6324,.8107],[.3414,.629,.8087],[.3364,.6255,.8067],[.3313,.6221,.8048],[.3263,.6186,.8028],[.3212,.6152,.8008],[.3162,.6117,.7989],[.3112,.6083,.7969],[.3061,.6048,.7949],[.3011,.6014,.793],[.296,.598,.791],[.291,.5945,.789],[.2859,.5911,.7871],[.2809,.5876,.7851],[.2758,.5842,.7831],[.2708,.5807,.7811],[.2658,.5773,.7792],[.2607,.5738,.7772],[.2563,.57,.7752],[.2522,.566,.7731],[.2482,.5619,.771],[.2441,.5578,.7689],[.24,.5538,.7668],[.236,.5497,.7647],[.2319,.5457,.7626],[.2279,.5416,.7605],[.2238,.5375,.7584],[.2197,.5335,.7563],[.2157,.5294,.7542],[.2116,.5254,.7522],[.2076,.5213,.7501],[.2035,.5172,.748],[.1994,.5132,.7459],[.1954,.5091,.7438],[.1913,.5051,.7417],[.1873,.501,.7396],[.1832,.4969,.7375],[.1791,.4929,.7354],[.1751,.4888,.7333],[.171,.4848,.7312],[.167,.4807,.7292],[.1629,.4766,.7271],[.1588,.4726,.725],[.1548,.4685,.7229],[.1507,.4645,.7208],[.1467,.4604,.7187],[.1426,.4563,.7166],[.1385,.4523,.7145],[.1345,.4482,.7124],[.1304,.4442,.7103],[.1271,.4402,.7075],[.124,.4362,.7044],[.121,.4323,.7013],[.1179,.4284,.6983],[.1148,.4244,.6952],[.1117,.4205,.6921],[.1087,.4166,.689],[.1056,.4126,.686],[.1025,.4087,.6829],[.0994,.4048,.6798],[.0963,.4008,.6767],[.0933,.3969,.6737],[.0902,.3929,.6706],[.0871,.389,.6675],[.084,.3851,.6644],[.081,.3811,.6614],[.0779,.3772,.6583],[.0748,.3733,.6552],[.0717,.3693,.6521],[.0687,.3654,.6491],[.0656,.3614,.646],[.0625,.3575,.6429],[.0594,.3536,.6398],[.0564,.3496,.6368],[.0533,.3457,.6337],[.0502,.3418,.6306],[.0471,.3378,.6275],[.0441,.3339,.6245],[.041,.33,.6214],[.0379,.326,.6183],[.0348,.3221,.6152],[.0318,.3181,.6121],[.0314,.3141,.6065],[.0314,.31,.6005],[.0314,.306,.5944],[.0314,.3019,.5884],[.0314,.2979,.5824],[.0314,.2938,.5763],[.0314,.2897,.5703],[.0314,.2857,.5643],[.0314,.2816,.5583],[.0314,.2776,.5522],[.0314,.2735,.5462],[.0314,.2694,.5402],[.0314,.2654,.5341],[.0314,.2613,.5281],[.0314,.2573,.5221],[.0314,.2532,.5161],[.0314,.2491,.51],[.0314,.2451,.504],[.0314,.241,.498],[.0314,.237,.4919],[.0314,.2329,.4859],[.0314,.2288,.4799],[.0314,.2248,.4739],[.0314,.2207,.4678],[.0314,.2167,.4618],[.0314,.2126,.4558],[.0314,.2085,.4498],[.0314,.2045,.4437],[.0314,.2004,.4377],[.0314,.1964,.4317],[.0314,.1923,.4256],[.0314,.1882,.4196]]},BrBG:{interpolate:!0,colors:[[.3294,.1882,.0196],[.338,.1933,.0204],[.3466,.1984,.0211],[.3552,.2035,.0219],[.3639,.2085,.0227],[.3725,.2136,.0235],[.3811,.2187,.0242],[.3897,.2238,.025],[.3983,.2288,.0258],[.4069,.2339,.0265],[.4155,.239,.0273],[.4241,.2441,.0281],[.4328,.2491,.0288],[.4414,.2542,.0296],[.45,.2593,.0304],[.4586,.2644,.0311],[.4672,.2694,.0319],[.4758,.2745,.0327],[.4844,.2796,.0334],[.493,.2847,.0342],[.5017,.2897,.035],[.5103,.2948,.0358],[.5189,.2999,.0365],[.5275,.305,.0373],[.5361,.31,.0381],[.5447,.3151,.0388],[.5529,.3213,.0419],[.5608,.3287,.0473],[.5686,.3361,.0527],[.5765,.3435,.0581],[.5843,.3509,.0634],[.5922,.3582,.0688],[.6,.3656,.0742],[.6078,.373,.0796],[.6157,.3804,.085],[.6235,.3878,.0903],[.6314,.3952,.0957],[.6392,.4025,.1011],[.6471,.4099,.1065],[.6549,.4173,.1119],[.6627,.4247,.1173],[.6706,.4321,.1226],[.6784,.4394,.128],[.6863,.4468,.1334],[.6941,.4542,.1388],[.702,.4616,.1442],[.7098,.469,.1496],[.7176,.4764,.1549],[.7255,.4837,.1603],[.7333,.4911,.1657],[.7412,.4985,.1711],[.749,.5059,.1765],[.7539,.5159,.1888],[.7589,.5259,.2011],[.7638,.5359,.2134],[.7687,.5459,.2257],[.7736,.5559,.238],[.7785,.5659,.2503],[.7835,.5759,.2626],[.7884,.5859,.2749],[.7933,.5958,.2872],[.7982,.6058,.2995],[.8032,.6158,.3118],[.8081,.6258,.3241],[.813,.6358,.3364],[.8179,.6458,.3487],[.8228,.6558,.361],[.8278,.6658,.3733],[.8327,.6758,.3856],[.8376,.6858,.3979],[.8425,.6958,.4102],[.8474,.7058,.4225],[.8524,.7158,.4348],[.8573,.7258,.4471],[.8622,.7358,.4594],[.8671,.7458,.4717],[.872,.7558,.484],[.8763,.7637,.4956],[.8798,.7696,.5063],[.8834,.7754,.5171],[.8869,.7812,.5279],[.8904,.7871,.5386],[.894,.7929,.5494],[.8975,.7988,.5602],[.901,.8046,.5709],[.9046,.8105,.5817],[.9081,.8163,.5925],[.9116,.8221,.6032],[.9152,.828,.614],[.9187,.8338,.6248],[.9223,.8397,.6355],[.9258,.8455,.6463],[.9293,.8514,.6571],[.9329,.8572,.6678],[.9364,.8631,.6786],[.9399,.8689,.6894],[.9435,.8747,.7001],[.947,.8806,.7109],[.9506,.8864,.7216],[.9541,.8923,.7324],[.9576,.8981,.7432],[.9612,.904,.7539],[.9647,.9098,.7647],[.9646,.9118,.7724],[.9644,.9138,.7801],[.9642,.9158,.7878],[.9641,.9178,.7955],[.9639,.9198,.8032],[.9638,.9218,.8108],[.9636,.9238,.8185],[.9635,.9258,.8262],[.9633,.9278,.8339],[.9632,.9298,.8416],[.963,.9318,.8493],[.9629,.9338,.857],[.9627,.9358,.8647],[.9626,.9378,.8724],[.9624,.9398,.88],[.9622,.9418,.8877],[.9621,.9438,.8954],[.9619,.9458,.9031],[.9618,.9478,.9108],[.9616,.9498,.9185],[.9615,.9518,.9262],[.9613,.9538,.9339],[.9612,.9558,.9416],[.961,.9578,.9493],[.9609,.9598,.9569],[.9572,.9599,.9596],[.9502,.9582,.9571],[.9431,.9566,.9546],[.936,.9549,.9522],[.929,.9532,.9497],[.9219,.9515,.9473],[.9148,.9498,.9448],[.9077,.9481,.9423],[.9007,.9464,.9399],[.8936,.9447,.9374],[.8865,.943,.9349],[.8794,.9413,.9325],[.8724,.9396,.93],[.8653,.9379,.9276],[.8582,.9363,.9251],[.8511,.9346,.9226],[.8441,.9329,.9202],[.837,.9312,.9177],[.8299,.9295,.9153],[.8228,.9278,.9128],[.8158,.9261,.9103],[.8087,.9244,.9079],[.8016,.9227,.9054],[.7945,.921,.903],[.7875,.9193,.9005],[.7804,.9176,.898],[.7695,.9132,.8925],[.7586,.9087,.887],[.7476,.9043,.8814],[.7367,.8998,.8759],[.7258,.8953,.8704],[.7149,.8909,.8648],[.704,.8864,.8593],[.693,.882,.8537],[.6821,.8775,.8482],[.6712,.873,.8427],[.6603,.8686,.8371],[.6494,.8641,.8316],[.6384,.8597,.8261],[.6275,.8552,.8205],[.6166,.8507,.815],[.6057,.8463,.8095],[.5948,.8418,.8039],[.5839,.8374,.7984],[.5729,.8329,.7928],[.562,.8285,.7873],[.5511,.824,.7818],[.5402,.8195,.7762],[.5293,.8151,.7707],[.5183,.8106,.7652],[.5074,.8062,.7596],[.4962,.7998,.753],[.4847,.7915,.7453],[.4731,.7832,.7376],[.4616,.7749,.73],[.4501,.7666,.7223],[.4385,.7582,.7146],[.427,.7499,.7069],[.4155,.7416,.6992],[.4039,.7333,.6915],[.3924,.725,.6838],[.3809,.7167,.6761],[.3693,.7084,.6684],[.3578,.7001,.6607],[.3463,.6918,.6531],[.3347,.6835,.6454],[.3232,.6752,.6377],[.3116,.6669,.63],[.3001,.6586,.6223],[.2886,.6503,.6146],[.277,.642,.6069],[.2655,.6337,.5992],[.254,.6254,.5915],[.2424,.6171,.5839],[.2309,.6088,.5762],[.2194,.6005,.5685],[.2078,.5922,.5608],[.1998,.5846,.5532],[.1918,.5771,.5457],[.1839,.5696,.5382],[.1759,.562,.5306],[.1679,.5545,.5231],[.1599,.5469,.5156],[.1519,.5394,.508],[.1439,.5319,.5005],[.1359,.5243,.493],[.1279,.5168,.4854],[.1199,.5093,.4779],[.1119,.5017,.4704],[.1039,.4942,.4628],[.0959,.4867,.4553],[.0879,.4791,.4478],[.0799,.4716,.4402],[.0719,.4641,.4327],[.0639,.4565,.4251],[.0559,.449,.4176],[.0479,.4414,.4101],[.0399,.4339,.4025],[.0319,.4264,.395],[.0239,.4188,.3875],[.0159,.4113,.3799],[.0079,.4038,.3724],[.0038,.3968,.3651],[.0037,.3903,.358],[.0035,.3839,.3509],[.0034,.3774,.3439],[.0032,.3709,.3368],[.0031,.3645,.3297],[.0029,.358,.3226],[.0028,.3516,.3156],[.0026,.3451,.3085],[.0025,.3386,.3014],[.0023,.3322,.2943],[.0022,.3257,.2873],[.002,.3193,.2802],[.0018,.3128,.2731],[.0017,.3063,.2661],[.0015,.2999,.259],[.0014,.2934,.2519],[.0012,.287,.2448],[.0011,.2805,.2378],[9e-4,.274,.2307],[8e-4,.2676,.2236],[6e-4,.2611,.2165],[5e-4,.2547,.2095],[3e-4,.2482,.2024],[2e-4,.2418,.1953],[0,.2353,.1882]]},BuGn:{interpolate:!0,colors:[[.9686,.9882,.9922],[.9664,.9874,.9917],[.9642,.9865,.9912],[.962,.9857,.9907],[.9598,.9848,.9902],[.9576,.9839,.9897],[.9553,.9831,.9892],[.9531,.9822,.9887],[.9509,.9813,.9882],[.9487,.9805,.9877],[.9465,.9796,.9872],[.9443,.9788,.9867],[.9421,.9779,.9863],[.9398,.977,.9858],[.9376,.9762,.9853],[.9354,.9753,.9848],[.9332,.9745,.9843],[.931,.9736,.9838],[.9288,.9727,.9833],[.9266,.9719,.9828],[.9243,.971,.9823],[.9221,.9701,.9818],[.9199,.9693,.9813],[.9177,.9684,.9808],[.9155,.9676,.9803],[.9133,.9667,.9799],[.911,.9658,.9794],[.9088,.965,.9789],[.9066,.9641,.9784],[.9044,.9633,.9779],[.9022,.9624,.9774],[.9,.9615,.9769],[.8977,.9606,.9762],[.8946,.9595,.9738],[.8915,.9584,.9715],[.8884,.9573,.9692],[.8854,.9562,.9668],[.8823,.9551,.9645],[.8792,.954,.9622],[.8761,.9529,.9598],[.873,.9518,.9575],[.87,.9507,.9551],[.8669,.9496,.9528],[.8638,.9485,.9505],[.8607,.9474,.9481],[.8577,.9463,.9458],[.8546,.9451,.9435],[.8515,.944,.9411],[.8484,.9429,.9388],[.8454,.9418,.9364],[.8423,.9407,.9341],[.8392,.9396,.9318],[.8361,.9385,.9294],[.8331,.9374,.9271],[.83,.9363,.9248],[.8269,.9352,.9224],[.8238,.9341,.9201],[.8208,.933,.9177],[.8177,.9319,.9154],[.8146,.9307,.9131],[.8115,.9296,.9107],[.8085,.9285,.9084],[.8054,.9274,.9061],[.8023,.9263,.9037],[.7984,.9249,.9011],[.7922,.9224,.8975],[.7859,.92,.8939],[.7796,.9175,.8904],[.7733,.915,.8868],[.7671,.9126,.8832],[.7608,.9101,.8797],[.7545,.9077,.8761],[.7482,.9052,.8725],[.742,.9027,.869],[.7357,.9003,.8654],[.7294,.8978,.8618],[.7231,.8953,.8583],[.7169,.8929,.8547],[.7106,.8904,.8511],[.7043,.888,.8476],[.698,.8855,.844],[.6918,.883,.8404],[.6855,.8806,.8368],[.6792,.8781,.8333],[.6729,.8757,.8297],[.6667,.8732,.8261],[.6604,.8707,.8226],[.6541,.8683,.819],[.6478,.8658,.8154],[.6416,.8634,.8119],[.6353,.8609,.8083],[.629,.8584,.8047],[.6227,.856,.8012],[.6165,.8535,.7976],[.6102,.8511,.794],[.6039,.8486,.7905],[.5976,.846,.7865],[.5914,.8433,.782],[.5851,.8406,.7774],[.5788,.8379,.7729],[.5725,.8352,.7683],[.5663,.8325,.7638],[.56,.8298,.7592],[.5537,.8271,.7547],[.5475,.8244,.7501],[.5412,.8217,.7456],[.5349,.819,.741],[.5286,.8163,.7365],[.5224,.8136,.7319],[.5161,.8109,.7274],[.5098,.8082,.7228],[.5035,.8054,.7182],[.4973,.8027,.7137],[.491,.8,.7091],[.4847,.7973,.7046],[.4784,.7946,.7],[.4722,.7919,.6955],[.4659,.7892,.6909],[.4596,.7865,.6864],[.4533,.7838,.6818],[.4471,.7811,.6773],[.4408,.7784,.6727],[.4345,.7757,.6682],[.4282,.773,.6636],[.422,.7703,.6591],[.4157,.7676,.6545],[.4094,.7648,.65],[.4031,.7621,.6454],[.3977,.7596,.6403],[.3932,.7571,.6346],[.3886,.7546,.629],[.3841,.7522,.6233],[.3795,.7497,.6177],[.375,.7473,.612],[.3704,.7448,.6064],[.3659,.7423,.6007],[.3613,.7399,.595],[.3568,.7374,.5894],[.3522,.7349,.5837],[.3477,.7325,.5781],[.3431,.73,.5724],[.3385,.7276,.5667],[.334,.7251,.5611],[.3294,.7226,.5554],[.3249,.7202,.5498],[.3203,.7177,.5441],[.3158,.7153,.5384],[.3112,.7128,.5328],[.3067,.7103,.5271],[.3021,.7079,.5215],[.2976,.7054,.5158],[.293,.703,.5101],[.2885,.7005,.5045],[.2839,.698,.4988],[.2794,.6956,.4932],[.2748,.6931,.4875],[.2703,.6907,.4818],[.2657,.6882,.4762],[.2612,.6857,.4705],[.2566,.6833,.4649],[.2526,.6797,.459],[.2489,.6754,.4529],[.2452,.671,.4469],[.2415,.6667,.4409],[.2378,.6624,.4349],[.2341,.6581,.4288],[.2304,.6538,.4228],[.2268,.6495,.4168],[.2231,.6452,.4107],[.2194,.6409,.4047],[.2157,.6366,.3987],[.212,.6323,.3927],[.2083,.628,.3866],[.2046,.6237,.3806],[.2009,.6194,.3746],[.1972,.6151,.3686],[.1935,.6108,.3625],[.1899,.6065,.3565],[.1862,.6022,.3505],[.1825,.5978,.3444],[.1788,.5935,.3384],[.1751,.5892,.3324],[.1714,.5849,.3264],[.1677,.5806,.3203],[.164,.5763,.3143],[.1603,.572,.3083],[.1566,.5677,.3022],[.1529,.5634,.2962],[.1493,.5591,.2902],[.1456,.5548,.2842],[.1419,.5505,.2781],[.1382,.5462,.2721],[.134,.5423,.2683],[.1297,.5386,.2652],[.1254,.5349,.2621],[.1211,.5313,.2591],[.1168,.5276,.256],[.1125,.5239,.2529],[.1082,.5202,.2498],[.1039,.5165,.2468],[.0996,.5128,.2437],[.0953,.5091,.2406],[.091,.5054,.2375],[.0867,.5017,.2344],[.0824,.498,.2314],[.078,.4943,.2283],[.0737,.4907,.2252],[.0694,.487,.2221],[.0651,.4833,.2191],[.0608,.4796,.216],[.0565,.4759,.2129],[.0522,.4722,.2098],[.0479,.4685,.2068],[.0436,.4648,.2037],[.0393,.4611,.2006],[.035,.4574,.1975],[.0307,.4537,.1945],[.0264,.4501,.1914],[.0221,.4464,.1883],[.0178,.4427,.1852],[.0135,.439,.1822],[.0092,.4353,.1791],[.0048,.4316,.176],[5e-4,.4279,.1729],[0,.423,.1707],[0,.418,.1686],[0,.4129,.1665],[0,.4079,.1644],[0,.4029,.1624],[0,.3978,.1603],[0,.3928,.1582],[0,.3877,.1561],[0,.3827,.154],[0,.3776,.1519],[0,.3726,.1498],[0,.3676,.1477],[0,.3625,.1456],[0,.3575,.1435],[0,.3524,.1414],[0,.3474,.1393],[0,.3423,.1373],[0,.3373,.1352],[0,.3322,.1331],[0,.3272,.131],[0,.3222,.1289],[0,.3171,.1268],[0,.3121,.1247],[0,.307,.1226],[0,.302,.1205],[0,.2969,.1184],[0,.2919,.1163],[0,.2868,.1142],[0,.2818,.1122],[0,.2768,.1101],[0,.2717,.108],[0,.2667,.1059]]},BuPu:{interpolate:!0,colors:[[.9686,.9882,.9922],[.9658,.9863,.991],[.963,.9843,.9899],[.9601,.9823,.9888],[.9573,.9804,.9877],[.9545,.9784,.9866],[.9516,.9764,.9855],[.9488,.9745,.9844],[.946,.9725,.9833],[.9432,.9705,.9822],[.9403,.9686,.9811],[.9375,.9666,.98],[.9347,.9646,.9789],[.9318,.9626,.9778],[.929,.9607,.9767],[.9262,.9587,.9755],[.9234,.9567,.9744],[.9205,.9548,.9733],[.9177,.9528,.9722],[.9149,.9508,.9711],[.912,.9489,.97],[.9092,.9469,.9689],[.9064,.9449,.9678],[.9035,.943,.9667],[.9007,.941,.9656],[.8979,.939,.9645],[.8951,.9371,.9634],[.8922,.9351,.9623],[.8894,.9331,.9612],[.8866,.9311,.96],[.8837,.9292,.9589],[.8809,.9272,.9578],[.8779,.9251,.9566],[.8739,.922,.9549],[.8698,.919,.9532],[.8657,.9159,.9515],[.8617,.9128,.9498],[.8576,.9097,.948],[.8536,.9067,.9463],[.8495,.9036,.9446],[.8454,.9005,.9429],[.8414,.8974,.9411],[.8373,.8943,.9394],[.8333,.8913,.9377],[.8292,.8882,.936],[.8251,.8851,.9343],[.8211,.882,.9325],[.817,.879,.9308],[.813,.8759,.9291],[.8089,.8728,.9274],[.8048,.8697,.9256],[.8008,.8667,.9239],[.7967,.8636,.9222],[.7927,.8605,.9205],[.7886,.8574,.9188],[.7845,.8544,.917],[.7805,.8513,.9153],[.7764,.8482,.9136],[.7724,.8451,.9119],[.7683,.8421,.9101],[.7642,.839,.9084],[.7602,.8359,.9067],[.7561,.8328,.905],[.7521,.8298,.9033],[.748,.8267,.9016],[.7439,.8239,.9001],[.7399,.8211,.8986],[.7358,.8183,.8972],[.7318,.8154,.8957],[.7277,.8126,.8942],[.7236,.8098,.8927],[.7196,.8069,.8913],[.7155,.8041,.8898],[.7115,.8013,.8883],[.7074,.7984,.8868],[.7033,.7956,.8854],[.6993,.7928,.8839],[.6952,.79,.8824],[.6912,.7871,.8809],[.6871,.7843,.8794],[.683,.7815,.878],[.679,.7786,.8765],[.6749,.7758,.875],[.6709,.773,.8735],[.6668,.7701,.8721],[.6627,.7673,.8706],[.6587,.7645,.8691],[.6546,.7617,.8676],[.6506,.7588,.8662],[.6465,.756,.8647],[.6424,.7532,.8632],[.6384,.7503,.8617],[.6343,.7475,.8603],[.6303,.7447,.8588],[.6262,.7419,.8573],[.6221,.739,.8558],[.6188,.7355,.854],[.6166,.7308,.8515],[.6143,.7262,.8491],[.6121,.7215,.8466],[.6099,.7168,.8441],[.6077,.7121,.8417],[.6055,.7075,.8392],[.6033,.7028,.8368],[.6011,.6981,.8343],[.5988,.6934,.8318],[.5966,.6888,.8294],[.5944,.6841,.8269],[.5922,.6794,.8245],[.59,.6747,.822],[.5878,.67,.8195],[.5856,.6654,.8171],[.5833,.6607,.8146],[.5811,.656,.8121],[.5789,.6513,.8097],[.5767,.6467,.8072],[.5745,.642,.8048],[.5723,.6373,.8023],[.5701,.6326,.7998],[.5678,.628,.7974],[.5656,.6233,.7949],[.5634,.6186,.7925],[.5612,.6139,.79],[.559,.6093,.7875],[.5568,.6046,.7851],[.5546,.5999,.7826],[.5523,.5952,.7802],[.5501,.5906,.7777],[.549,.5856,.7752],[.549,.5803,.7726],[.549,.575,.77],[.549,.5697,.7674],[.549,.5644,.7648],[.549,.5591,.7623],[.549,.5538,.7597],[.549,.5486,.7571],[.549,.5433,.7545],[.549,.538,.7519],[.549,.5327,.7493],[.549,.5274,.7468],[.549,.5221,.7442],[.549,.5168,.7416],[.549,.5115,.739],[.549,.5062,.7364],[.549,.5009,.7338],[.549,.4957,.7313],[.549,.4904,.7287],[.549,.4851,.7261],[.549,.4798,.7235],[.549,.4745,.7209],[.549,.4692,.7183],[.549,.4639,.7158],[.549,.4586,.7132],[.549,.4533,.7106],[.549,.448,.708],[.549,.4428,.7054],[.549,.4375,.7028],[.549,.4322,.7003],[.549,.4269,.6977],[.549,.4216,.6951],[.5487,.4164,.6926],[.5482,.4112,.6901],[.5477,.406,.6877],[.5472,.4009,.6852],[.5467,.3957,.6827],[.5463,.3905,.6803],[.5458,.3854,.6778],[.5453,.3802,.6754],[.5448,.375,.6729],[.5443,.3699,.6704],[.5438,.3647,.668],[.5433,.3595,.6655],[.5428,.3544,.6631],[.5423,.3492,.6606],[.5418,.344,.6581],[.5413,.3389,.6557],[.5408,.3337,.6532],[.5403,.3285,.6507],[.5399,.3234,.6483],[.5394,.3182,.6458],[.5389,.313,.6434],[.5384,.3079,.6409],[.5379,.3027,.6384],[.5374,.2975,.636],[.5369,.2924,.6335],[.5364,.2872,.6311],[.5359,.282,.6286],[.5354,.2769,.6261],[.5349,.2717,.6237],[.5344,.2665,.6212],[.5339,.2614,.6188],[.5335,.2562,.6163],[.5327,.2503,.6126],[.5318,.2441,.6086],[.531,.238,.6045],[.5301,.2318,.6005],[.5292,.2257,.5964],[.5284,.2195,.5923],[.5275,.2134,.5883],[.5267,.2072,.5842],[.5258,.2011,.5802],[.5249,.1949,.5761],[.5241,.1888,.572],[.5232,.1826,.568],[.5224,.1765,.5639],[.5215,.1703,.5599],[.5206,.1642,.5558],[.5198,.158,.5517],[.5189,.1519,.5477],[.518,.1457,.5436],[.5172,.1396,.5396],[.5163,.1334,.5355],[.5155,.1273,.5314],[.5146,.1211,.5274],[.5137,.115,.5233],[.5129,.1088,.5193],[.512,.1027,.5152],[.5112,.0965,.5111],[.5103,.0903,.5071],[.5094,.0842,.503],[.5086,.078,.499],[.5077,.0719,.4949],[.5069,.0657,.4908],[.506,.0596,.4868],[.5003,.0572,.481],[.4939,.0554,.475],[.4875,.0535,.4689],[.4811,.0517,.4629],[.4747,.0498,.4569],[.4683,.048,.4509],[.4619,.0461,.4448],[.4555,.0443,.4388],[.4491,.0424,.4328],[.4427,.0406,.4267],[.4363,.0388,.4207],[.4299,.0369,.4147],[.4235,.0351,.4087],[.4171,.0332,.4026],[.4107,.0314,.3966],[.4043,.0295,.3906],[.3979,.0277,.3845],[.3915,.0258,.3785],[.3851,.024,.3725],[.3787,.0221,.3665],[.3723,.0203,.3604],[.3659,.0185,.3544],[.3595,.0166,.3484],[.3531,.0148,.3423],[.3467,.0129,.3363],[.3403,.0111,.3303],[.3339,.0092,.3243],[.3276,.0074,.3182],[.3212,.0055,.3122],[.3148,.0037,.3062],[.3084,.0018,.3001],[.302,0,.2941]]},CMRmap:{interpolate:!0,colors:[[0,0,0],[.0047,.0047,.0157],[.0094,.0094,.0314],[.0141,.0141,.0471],[.0188,.0188,.0627],[.0235,.0235,.0784],[.0282,.0282,.0941],[.0329,.0329,.1098],[.0376,.0376,.1255],[.0424,.0424,.1412],[.0471,.0471,.1569],[.0518,.0518,.1725],[.0565,.0565,.1882],[.0612,.0612,.2039],[.0659,.0659,.2196],[.0706,.0706,.2353],[.0753,.0753,.251],[.08,.08,.2667],[.0847,.0847,.2824],[.0894,.0894,.298],[.0941,.0941,.3137],[.0988,.0988,.3294],[.1035,.1035,.3451],[.1082,.1082,.3608],[.1129,.1129,.3765],[.1176,.1176,.3922],[.1224,.1224,.4078],[.1271,.1271,.4235],[.1318,.1318,.4392],[.1365,.1365,.4549],[.1412,.1412,.4706],[.1459,.1459,.4863],[.1506,.15,.501],[.1553,.15,.5088],[.16,.15,.5167],[.1647,.15,.5245],[.1694,.15,.5324],[.1741,.15,.5402],[.1788,.15,.548],[.1835,.15,.5559],[.1882,.15,.5637],[.1929,.15,.5716],[.1976,.15,.5794],[.2024,.15,.5873],[.2071,.15,.5951],[.2118,.15,.6029],[.2165,.15,.6108],[.2212,.15,.6186],[.2259,.15,.6265],[.2306,.15,.6343],[.2353,.15,.6422],[.24,.15,.65],[.2447,.15,.6578],[.2494,.15,.6657],[.2541,.15,.6735],[.2588,.15,.6814],[.2635,.15,.6892],[.2682,.15,.6971],[.2729,.15,.7049],[.2776,.15,.7127],[.2824,.15,.7206],[.2871,.15,.7284],[.2918,.15,.7363],[.2965,.15,.7441],[.3024,.1504,.748],[.3118,.152,.7402],[.3212,.1535,.7324],[.3306,.1551,.7245],[.34,.1567,.7167],[.3494,.1582,.7088],[.3588,.1598,.701],[.3682,.1614,.6931],[.3776,.1629,.6853],[.3871,.1645,.6775],[.3965,.1661,.6696],[.4059,.1676,.6618],[.4153,.1692,.6539],[.4247,.1708,.6461],[.4341,.1724,.6382],[.4435,.1739,.6304],[.4529,.1755,.6225],[.4624,.1771,.6147],[.4718,.1786,.6069],[.4812,.1802,.599],[.4906,.1818,.5912],[.5,.1833,.5833],[.5094,.1849,.5755],[.5188,.1865,.5676],[.5282,.188,.5598],[.5376,.1896,.552],[.5471,.1912,.5441],[.5565,.1927,.5363],[.5659,.1943,.5284],[.5753,.1959,.5206],[.5847,.1975,.5127],[.5941,.199,.5049],[.6047,.2006,.4959],[.6173,.2022,.4849],[.6298,.2037,.4739],[.6424,.2053,.4629],[.6549,.2069,.452],[.6675,.2084,.441],[.68,.21,.43],[.6925,.2116,.419],[.7051,.2131,.408],[.7176,.2147,.3971],[.7302,.2163,.3861],[.7427,.2178,.3751],[.7553,.2194,.3641],[.7678,.221,.3531],[.7804,.2225,.3422],[.7929,.2241,.3312],[.8055,.2257,.3202],[.818,.2273,.3092],[.8306,.2288,.2982],[.8431,.2304,.2873],[.8557,.232,.2763],[.8682,.2335,.2653],[.8808,.2351,.2543],[.8933,.2367,.2433],[.9059,.2382,.2324],[.9184,.2398,.2214],[.931,.2414,.2104],[.9435,.2429,.1994],[.9561,.2445,.1884],[.9686,.2461,.1775],[.9812,.2476,.1665],[.9937,.2492,.1555],[.9984,.2539,.1476],[.9953,.2618,.1429],[.9922,.2696,.1382],[.989,.2775,.1335],[.9859,.2853,.1288],[.9827,.2931,.1241],[.9796,.301,.1194],[.9765,.3088,.1147],[.9733,.3167,.11],[.9702,.3245,.1053],[.9671,.3324,.1006],[.9639,.3402,.0959],[.9608,.348,.0912],[.9576,.3559,.0865],[.9545,.3637,.0818],[.9514,.3716,.0771],[.9482,.3794,.0724],[.9451,.3873,.0676],[.942,.3951,.0629],[.9388,.4029,.0582],[.9357,.4108,.0535],[.9325,.4186,.0488],[.9294,.4265,.0441],[.9263,.4343,.0394],[.9231,.4422,.0347],[.92,.45,.03],[.9169,.4578,.0253],[.9137,.4657,.0206],[.9106,.4735,.0159],[.9075,.4814,.0112],[.9043,.4892,.0065],[.9012,.4971,.0018],[.9,.5049,.002],[.9,.5127,.0051],[.9,.5206,.0082],[.9,.5284,.0114],[.9,.5363,.0145],[.9,.5441,.0176],[.9,.552,.0208],[.9,.5598,.0239],[.9,.5676,.0271],[.9,.5755,.0302],[.9,.5833,.0333],[.9,.5912,.0365],[.9,.599,.0396],[.9,.6069,.0427],[.9,.6147,.0459],[.9,.6225,.049],[.9,.6304,.0522],[.9,.6382,.0553],[.9,.6461,.0584],[.9,.6539,.0616],[.9,.6618,.0647],[.9,.6696,.0678],[.9,.6775,.071],[.9,.6853,.0741],[.9,.6931,.0773],[.9,.701,.0804],[.9,.7088,.0835],[.9,.7167,.0867],[.9,.7245,.0898],[.9,.7324,.0929],[.9,.7402,.0961],[.9,.748,.0992],[.9,.7535,.1094],[.9,.7582,.122],[.9,.7629,.1345],[.9,.7676,.1471],[.9,.7724,.1596],[.9,.7771,.1722],[.9,.7818,.1847],[.9,.7865,.1973],[.9,.7912,.2098],[.9,.7959,.2224],[.9,.8006,.2349],[.9,.8053,.2475],[.9,.81,.26],[.9,.8147,.2725],[.9,.8194,.2851],[.9,.8241,.2976],[.9,.8288,.3102],[.9,.8335,.3227],[.9,.8382,.3353],[.9,.8429,.3478],[.9,.8476,.3604],[.9,.8524,.3729],[.9,.8571,.3855],[.9,.8618,.398],[.9,.8665,.4106],[.9,.8712,.4231],[.9,.8759,.4357],[.9,.8806,.4482],[.9,.8853,.4608],[.9,.89,.4733],[.9,.8947,.4859],[.9,.8994,.4984],[.9027,.9027,.5137],[.9059,.9059,.5294],[.909,.909,.5451],[.9122,.9122,.5608],[.9153,.9153,.5765],[.9184,.9184,.5922],[.9216,.9216,.6078],[.9247,.9247,.6235],[.9278,.9278,.6392],[.931,.931,.6549],[.9341,.9341,.6706],[.9373,.9373,.6863],[.9404,.9404,.702],[.9435,.9435,.7176],[.9467,.9467,.7333],[.9498,.9498,.749],[.9529,.9529,.7647],[.9561,.9561,.7804],[.9592,.9592,.7961],[.9624,.9624,.8118],[.9655,.9655,.8275],[.9686,.9686,.8431],[.9718,.9718,.8588],[.9749,.9749,.8745],[.978,.978,.8902],[.9812,.9812,.9059],[.9843,.9843,.9216],[.9875,.9875,.9373],[.9906,.9906,.9529],[.9937,.9937,.9686],[.9969,.9969,.9843],[1,1,1]]},Dark2:{interpolate:!1,colors:[[.1059,.6196,.4667],[.851,.3725,.0078],[.4588,.4392,.702],[.9059,.1608,.5412],[.4,.651,.1176],[.902,.6706,.0078],[.651,.4627,.1137],[.4,.4,.4]]},GnBu:{interpolate:!0,colors:[[.9686,.9882,.9412],[.9658,.9871,.9386],[.963,.986,.936],[.9601,.9849,.9334],[.9573,.9838,.9308],[.9545,.9827,.9283],[.9516,.9816,.9257],[.9488,.9805,.9231],[.946,.9794,.9205],[.9432,.9783,.9179],[.9403,.9772,.9153],[.9375,.9761,.9128],[.9347,.9749,.9102],[.9318,.9738,.9076],[.929,.9727,.905],[.9262,.9716,.9024],[.9234,.9705,.8998],[.9205,.9694,.8973],[.9177,.9683,.8947],[.9149,.9672,.8921],[.912,.9661,.8895],[.9092,.965,.8869],[.9064,.9639,.8843],[.9035,.9628,.8818],[.9007,.9617,.8792],[.8979,.9606,.8766],[.8951,.9594,.874],[.8922,.9583,.8714],[.8894,.9572,.8688],[.8866,.9561,.8663],[.8837,.955,.8637],[.8809,.9539,.8611],[.8781,.9528,.8585],[.8757,.9518,.8558],[.8732,.9508,.8531],[.8707,.9499,.8504],[.8683,.9489,.8477],[.8658,.9479,.845],[.8634,.9469,.8422],[.8609,.9459,.8395],[.8584,.9449,.8368],[.856,.944,.8341],[.8535,.943,.8314],[.8511,.942,.8287],[.8486,.941,.826],[.8461,.94,.8233],[.8437,.939,.8206],[.8412,.9381,.8179],[.8388,.9371,.8152],[.8363,.9361,.8125],[.8338,.9351,.8098],[.8314,.9341,.8071],[.8289,.9331,.8044],[.8265,.9321,.8016],[.824,.9312,.7989],[.8215,.9302,.7962],[.8191,.9292,.7935],[.8166,.9282,.7908],[.8141,.9272,.7881],[.8117,.9262,.7854],[.8092,.9253,.7827],[.8068,.9243,.78],[.8043,.9233,.7773],[.8018,.9223,.7746],[.7989,.9211,.7721],[.7945,.9194,.7701],[.79,.9177,.7681],[.7856,.916,.7662],[.7812,.9142,.7642],[.7767,.9125,.7622],[.7723,.9108,.7602],[.7679,.9091,.7583],[.7635,.9074,.7563],[.759,.9056,.7543],[.7546,.9039,.7524],[.7502,.9022,.7504],[.7457,.9005,.7484],[.7413,.8987,.7465],[.7369,.897,.7445],[.7325,.8953,.7425],[.728,.8936,.7406],[.7236,.8919,.7386],[.7192,.8901,.7366],[.7147,.8884,.7347],[.7103,.8867,.7327],[.7059,.885,.7307],[.7015,.8832,.7288],[.697,.8815,.7268],[.6926,.8798,.7248],[.6882,.8781,.7228],[.6837,.8764,.7209],[.6793,.8746,.7189],[.6749,.8729,.7169],[.6704,.8712,.715],[.666,.8695,.713],[.6616,.8677,.711],[.6567,.8659,.7105],[.6512,.8638,.7123],[.6457,.8617,.7142],[.6401,.8596,.716],[.6346,.8575,.7179],[.6291,.8554,.7197],[.6235,.8533,.7216],[.618,.8512,.7234],[.6125,.8492,.7253],[.6069,.8471,.7271],[.6014,.845,.729],[.5958,.8429,.7308],[.5903,.8408,.7326],[.5848,.8387,.7345],[.5792,.8366,.7363],[.5737,.8345,.7382],[.5682,.8324,.74],[.5626,.8303,.7419],[.5571,.8282,.7437],[.5516,.8261,.7456],[.546,.8241,.7474],[.5405,.822,.7493],[.5349,.8199,.7511],[.5294,.8178,.7529],[.5239,.8157,.7548],[.5183,.8136,.7566],[.5128,.8115,.7585],[.5073,.8094,.7603],[.5017,.8073,.7622],[.4962,.8052,.764],[.4907,.8031,.7659],[.4851,.801,.7677],[.4796,.7985,.7696],[.474,.7954,.7714],[.4685,.7923,.7732],[.463,.7892,.7751],[.4574,.7862,.7769],[.4519,.7831,.7788],[.4464,.78,.7806],[.4408,.7769,.7825],[.4353,.7739,.7843],[.4298,.7708,.7862],[.4242,.7677,.788],[.4187,.7646,.7899],[.4131,.7616,.7917],[.4076,.7585,.7935],[.4021,.7554,.7954],[.3965,.7523,.7972],[.391,.7493,.7991],[.3855,.7462,.8009],[.3799,.7431,.8028],[.3744,.74,.8046],[.3689,.7369,.8065],[.3633,.7339,.8083],[.3578,.7308,.8101],[.3522,.7277,.812],[.3467,.7246,.8138],[.3412,.7216,.8157],[.3356,.7185,.8175],[.3301,.7154,.8194],[.3246,.7123,.8212],[.319,.7093,.8231],[.3135,.7062,.8249],[.308,.7031,.8268],[.3032,.699,.8258],[.2989,.6942,.8233],[.2946,.6894,.8207],[.2903,.6846,.8181],[.286,.6798,.8155],[.2817,.675,.8129],[.2774,.6702,.8103],[.273,.6654,.8078],[.2687,.6606,.8052],[.2644,.6558,.8026],[.2601,.651,.8],[.2558,.6462,.7974],[.2515,.6414,.7948],[.2472,.6366,.7922],[.2429,.6318,.7897],[.2386,.627,.7871],[.2343,.6222,.7845],[.23,.6174,.7819],[.2257,.6126,.7793],[.2214,.6078,.7767],[.2171,.603,.7742],[.2128,.5982,.7716],[.2085,.5934,.769],[.2042,.5886,.7664],[.1998,.5838,.7638],[.1955,.579,.7612],[.1912,.5742,.7587],[.1869,.5694,.7561],[.1826,.5646,.7535],[.1783,.5598,.7509],[.174,.555,.7483],[.1697,.5502,.7457],[.1654,.5457,.7434],[.1611,.5413,.7412],[.1568,.5368,.739],[.1525,.5324,.7368],[.1482,.528,.7346],[.1439,.5236,.7324],[.1396,.5191,.7301],[.1353,.5147,.7279],[.1309,.5103,.7257],[.1266,.5058,.7235],[.1223,.5014,.7213],[.118,.497,.7191],[.1137,.4925,.7169],[.1094,.4881,.7146],[.1051,.4837,.7124],[.1008,.4793,.7102],[.0965,.4748,.708],[.0922,.4704,.7058],[.0879,.466,.7036],[.0836,.4615,.7014],[.0793,.4571,.6991],[.075,.4527,.6969],[.0707,.4483,.6947],[.0664,.4438,.6925],[.0621,.4394,.6903],[.0577,.435,.6881],[.0534,.4305,.6859],[.0491,.4261,.6836],[.0448,.4217,.6814],[.0405,.4173,.6792],[.0362,.4128,.677],[.0319,.4084,.6748],[.0314,.4035,.6699],[.0314,.3986,.6646],[.0314,.3937,.6593],[.0314,.3888,.654],[.0314,.3839,.6487],[.0314,.3789,.6434],[.0314,.374,.6381],[.0314,.3691,.6328],[.0314,.3642,.6276],[.0314,.3592,.6223],[.0314,.3543,.617],[.0314,.3494,.6117],[.0314,.3445,.6064],[.0314,.3396,.6011],[.0314,.3346,.5958],[.0314,.3297,.5905],[.0314,.3248,.5852],[.0314,.3199,.5799],[.0314,.315,.5747],[.0314,.31,.5694],[.0314,.3051,.5641],[.0314,.3002,.5588],[.0314,.2953,.5535],[.0314,.2903,.5482],[.0314,.2854,.5429],[.0314,.2805,.5376],[.0314,.2756,.5323],[.0314,.2707,.527],[.0314,.2657,.5218],[.0314,.2608,.5165],[.0314,.2559,.5112],[.0314,.251,.5059]]},Greens:{interpolate:!0,colors:[[.9686,.9882,.9608],[.9664,.9874,.9582],[.9642,.9865,.9556],[.962,.9857,.953],[.9598,.9848,.9504],[.9576,.9839,.9479],[.9553,.9831,.9453],[.9531,.9822,.9427],[.9509,.9813,.9401],[.9487,.9805,.9375],[.9465,.9796,.9349],[.9443,.9788,.9324],[.9421,.9779,.9298],[.9398,.977,.9272],[.9376,.9762,.9246],[.9354,.9753,.922],[.9332,.9745,.9194],[.931,.9736,.9169],[.9288,.9727,.9143],[.9266,.9719,.9117],[.9243,.971,.9091],[.9221,.9701,.9065],[.9199,.9693,.9039],[.9177,.9684,.9014],[.9155,.9676,.8988],[.9133,.9667,.8962],[.911,.9658,.8936],[.9088,.965,.891],[.9066,.9641,.8884],[.9044,.9633,.8859],[.9022,.9624,.8833],[.9,.9615,.8807],[.8976,.9606,.8779],[.8939,.9591,.874],[.8902,.9576,.8701],[.8865,.9562,.8661],[.8828,.9547,.8622],[.8791,.9532,.8583],[.8754,.9517,.8543],[.8717,.9503,.8504],[.8681,.9488,.8464],[.8644,.9473,.8425],[.8607,.9458,.8386],[.857,.9444,.8346],[.8533,.9429,.8307],[.8496,.9414,.8268],[.8459,.9399,.8228],[.8422,.9385,.8189],[.8385,.937,.8149],[.8348,.9355,.811],[.8311,.934,.8071],[.8275,.9325,.8031],[.8238,.9311,.7992],[.8201,.9296,.7953],[.8164,.9281,.7913],[.8127,.9266,.7874],[.809,.9252,.7835],[.8053,.9237,.7795],[.8016,.9222,.7756],[.7979,.9207,.7716],[.7942,.9193,.7677],[.7905,.9178,.7638],[.7869,.9163,.7598],[.7832,.9148,.7559],[.7792,.9132,.7518],[.7745,.9113,.7473],[.7699,.9093,.7427],[.7652,.9073,.7381],[.7605,.9054,.7336],[.7558,.9034,.729],[.7512,.9014,.7245],[.7465,.8995,.7199],[.7418,.8975,.7154],[.7371,.8955,.7108],[.7325,.8935,.7063],[.7278,.8916,.7017],[.7231,.8896,.6972],[.7184,.8876,.6926],[.7138,.8857,.6881],[.7091,.8837,.6835],[.7044,.8817,.679],[.6997,.8798,.6744],[.6951,.8778,.6699],[.6904,.8758,.6653],[.6857,.8739,.6608],[.681,.8719,.6562],[.6764,.8699,.6517],[.6717,.868,.6471],[.667,.866,.6426],[.6623,.864,.638],[.6577,.8621,.6334],[.653,.8601,.6289],[.6483,.8581,.6243],[.6436,.8561,.6198],[.639,.8542,.6152],[.6343,.8522,.6107],[.6293,.85,.6061],[.6238,.8474,.6016],[.6182,.8448,.597],[.6127,.8423,.5925],[.6072,.8397,.5879],[.6016,.8371,.5834],[.5961,.8345,.5788],[.5905,.8319,.5743],[.585,.8293,.5697],[.5795,.8268,.5652],[.5739,.8242,.5606],[.5684,.8216,.5561],[.5629,.819,.5515],[.5573,.8164,.547],[.5518,.8138,.5424],[.5463,.8113,.5379],[.5407,.8087,.5333],[.5352,.8061,.5288],[.5296,.8035,.5242],[.5241,.8009,.5196],[.5186,.7983,.5151],[.513,.7958,.5105],[.5075,.7932,.506],[.502,.7906,.5014],[.4964,.788,.4969],[.4909,.7854,.4923],[.4854,.7828,.4878],[.4798,.7803,.4832],[.4743,.7777,.4787],[.4687,.7751,.4741],[.4632,.7725,.4696],[.4577,.7699,.465],[.4518,.7671,.4612],[.4455,.764,.4581],[.4392,.7609,.4551],[.4329,.7579,.452],[.4267,.7548,.4489],[.4204,.7517,.4458],[.4141,.7486,.4428],[.4078,.7456,.4397],[.4016,.7425,.4366],[.3953,.7394,.4335],[.389,.7363,.4304],[.3827,.7333,.4274],[.3765,.7302,.4243],[.3702,.7271,.4212],[.3639,.724,.4181],[.3576,.721,.4151],[.3514,.7179,.412],[.3451,.7148,.4089],[.3388,.7117,.4058],[.3325,.7087,.4028],[.3263,.7056,.3997],[.32,.7025,.3966],[.3137,.6994,.3935],[.3075,.6963,.3905],[.3012,.6933,.3874],[.2949,.6902,.3843],[.2886,.6871,.3812],[.2824,.684,.3782],[.2761,.681,.3751],[.2698,.6779,.372],[.2635,.6748,.3689],[.2573,.6717,.3659],[.2526,.6681,.3629],[.2489,.6642,.3599],[.2452,.6603,.357],[.2415,.6563,.354],[.2378,.6524,.351],[.2341,.6484,.3481],[.2304,.6445,.3451],[.2268,.6406,.3422],[.2231,.6366,.3392],[.2194,.6327,.3363],[.2157,.6288,.3333],[.212,.6248,.3304],[.2083,.6209,.3274],[.2046,.6169,.3245],[.2009,.613,.3215],[.1972,.6091,.3186],[.1935,.6051,.3156],[.1899,.6012,.3127],[.1862,.5973,.3097],[.1825,.5933,.3068],[.1788,.5894,.3038],[.1751,.5855,.3009],[.1714,.5815,.2979],[.1677,.5776,.2949],[.164,.5736,.292],[.1603,.5697,.289],[.1566,.5658,.2861],[.1529,.5618,.2831],[.1493,.5579,.2802],[.1456,.554,.2772],[.1419,.55,.2743],[.1382,.5461,.2713],[.134,.5423,.2683],[.1297,.5386,.2652],[.1254,.5349,.2621],[.1211,.5313,.2591],[.1168,.5276,.256],[.1125,.5239,.2529],[.1082,.5202,.2498],[.1039,.5165,.2468],[.0996,.5128,.2437],[.0953,.5091,.2406],[.091,.5054,.2375],[.0867,.5017,.2344],[.0824,.498,.2314],[.078,.4943,.2283],[.0737,.4907,.2252],[.0694,.487,.2221],[.0651,.4833,.2191],[.0608,.4796,.216],[.0565,.4759,.2129],[.0522,.4722,.2098],[.0479,.4685,.2068],[.0436,.4648,.2037],[.0393,.4611,.2006],[.035,.4574,.1975],[.0307,.4537,.1945],[.0264,.4501,.1914],[.0221,.4464,.1883],[.0178,.4427,.1852],[.0135,.439,.1822],[.0092,.4353,.1791],[.0048,.4316,.176],[5e-4,.4279,.1729],[0,.423,.1707],[0,.418,.1686],[0,.4129,.1665],[0,.4079,.1644],[0,.4029,.1624],[0,.3978,.1603],[0,.3928,.1582],[0,.3877,.1561],[0,.3827,.154],[0,.3776,.1519],[0,.3726,.1498],[0,.3676,.1477],[0,.3625,.1456],[0,.3575,.1435],[0,.3524,.1414],[0,.3474,.1393],[0,.3423,.1373],[0,.3373,.1352],[0,.3322,.1331],[0,.3272,.131],[0,.3222,.1289],[0,.3171,.1268],[0,.3121,.1247],[0,.307,.1226],[0,.302,.1205],[0,.2969,.1184],[0,.2919,.1163],[0,.2868,.1142],[0,.2818,.1122],[0,.2768,.1101],[0,.2717,.108],[0,.2667,.1059]]},Greys:{interpolate:!0,colors:[[1,1,1],[.9982,.9982,.9982],[.9963,.9963,.9963],[.9945,.9945,.9945],[.9926,.9926,.9926],[.9908,.9908,.9908],[.9889,.9889,.9889],[.9871,.9871,.9871],[.9852,.9852,.9852],[.9834,.9834,.9834],[.9815,.9815,.9815],[.9797,.9797,.9797],[.9779,.9779,.9779],[.976,.976,.976],[.9742,.9742,.9742],[.9723,.9723,.9723],[.9705,.9705,.9705],[.9686,.9686,.9686],[.9668,.9668,.9668],[.9649,.9649,.9649],[.9631,.9631,.9631],[.9612,.9612,.9612],[.9594,.9594,.9594],[.9576,.9576,.9576],[.9557,.9557,.9557],[.9539,.9539,.9539],[.952,.952,.952],[.9502,.9502,.9502],[.9483,.9483,.9483],[.9465,.9465,.9465],[.9446,.9446,.9446],[.9428,.9428,.9428],[.9408,.9408,.9408],[.938,.938,.938],[.9352,.9352,.9352],[.9323,.9323,.9323],[.9295,.9295,.9295],[.9267,.9267,.9267],[.9238,.9238,.9238],[.921,.921,.921],[.9182,.9182,.9182],[.9154,.9154,.9154],[.9125,.9125,.9125],[.9097,.9097,.9097],[.9069,.9069,.9069],[.904,.904,.904],[.9012,.9012,.9012],[.8984,.8984,.8984],[.8955,.8955,.8955],[.8927,.8927,.8927],[.8899,.8899,.8899],[.8871,.8871,.8871],[.8842,.8842,.8842],[.8814,.8814,.8814],[.8786,.8786,.8786],[.8757,.8757,.8757],[.8729,.8729,.8729],[.8701,.8701,.8701],[.8673,.8673,.8673],[.8644,.8644,.8644],[.8616,.8616,.8616],[.8588,.8588,.8588],[.8559,.8559,.8559],[.8531,.8531,.8531],[.8501,.8501,.8501],[.8467,.8467,.8467],[.8432,.8432,.8432],[.8398,.8398,.8398],[.8363,.8363,.8363],[.8329,.8329,.8329],[.8295,.8295,.8295],[.826,.826,.826],[.8226,.8226,.8226],[.8191,.8191,.8191],[.8157,.8157,.8157],[.8122,.8122,.8122],[.8088,.8088,.8088],[.8053,.8053,.8053],[.8019,.8019,.8019],[.7984,.7984,.7984],[.795,.795,.795],[.7916,.7916,.7916],[.7881,.7881,.7881],[.7847,.7847,.7847],[.7812,.7812,.7812],[.7778,.7778,.7778],[.7743,.7743,.7743],[.7709,.7709,.7709],[.7674,.7674,.7674],[.764,.764,.764],[.7606,.7606,.7606],[.7571,.7571,.7571],[.7537,.7537,.7537],[.7502,.7502,.7502],[.7468,.7468,.7468],[.7433,.7433,.7433],[.7394,.7394,.7394],[.7346,.7346,.7346],[.7298,.7298,.7298],[.725,.725,.725],[.7202,.7202,.7202],[.7154,.7154,.7154],[.7106,.7106,.7106],[.7058,.7058,.7058],[.701,.701,.701],[.6962,.6962,.6962],[.6914,.6914,.6914],[.6866,.6866,.6866],[.6818,.6818,.6818],[.677,.677,.677],[.6722,.6722,.6722],[.6674,.6674,.6674],[.6626,.6626,.6626],[.6578,.6578,.6578],[.653,.653,.653],[.6482,.6482,.6482],[.6434,.6434,.6434],[.6386,.6386,.6386],[.6338,.6338,.6338],[.629,.629,.629],[.6242,.6242,.6242],[.6194,.6194,.6194],[.6146,.6146,.6146],[.6098,.6098,.6098],[.605,.605,.605],[.6002,.6002,.6002],[.5954,.5954,.5954],[.5906,.5906,.5906],[.5861,.5861,.5861],[.5818,.5818,.5818],[.5775,.5775,.5775],[.5732,.5732,.5732],[.5689,.5689,.5689],[.5646,.5646,.5646],[.5602,.5602,.5602],[.5559,.5559,.5559],[.5516,.5516,.5516],[.5473,.5473,.5473],[.543,.543,.543],[.5387,.5387,.5387],[.5344,.5344,.5344],[.5301,.5301,.5301],[.5258,.5258,.5258],[.5215,.5215,.5215],[.5172,.5172,.5172],[.5129,.5129,.5129],[.5086,.5086,.5086],[.5043,.5043,.5043],[.5,.5,.5],[.4957,.4957,.4957],[.4913,.4913,.4913],[.487,.487,.487],[.4827,.4827,.4827],[.4784,.4784,.4784],[.4741,.4741,.4741],[.4698,.4698,.4698],[.4655,.4655,.4655],[.4612,.4612,.4612],[.4569,.4569,.4569],[.4526,.4526,.4526],[.4484,.4484,.4484],[.4444,.4444,.4444],[.4403,.4403,.4403],[.4363,.4363,.4363],[.4322,.4322,.4322],[.4281,.4281,.4281],[.4241,.4241,.4241],[.42,.42,.42],[.416,.416,.416],[.4119,.4119,.4119],[.4078,.4078,.4078],[.4038,.4038,.4038],[.3997,.3997,.3997],[.3957,.3957,.3957],[.3916,.3916,.3916],[.3875,.3875,.3875],[.3835,.3835,.3835],[.3794,.3794,.3794],[.3754,.3754,.3754],[.3713,.3713,.3713],[.3672,.3672,.3672],[.3632,.3632,.3632],[.3591,.3591,.3591],[.3551,.3551,.3551],[.351,.351,.351],[.3469,.3469,.3469],[.3429,.3429,.3429],[.3388,.3388,.3388],[.3348,.3348,.3348],[.3307,.3307,.3307],[.3266,.3266,.3266],[.3226,.3226,.3226],[.3174,.3174,.3174],[.3119,.3119,.3119],[.3063,.3063,.3063],[.3008,.3008,.3008],[.2953,.2953,.2953],[.2897,.2897,.2897],[.2842,.2842,.2842],[.2787,.2787,.2787],[.2731,.2731,.2731],[.2676,.2676,.2676],[.2621,.2621,.2621],[.2565,.2565,.2565],[.251,.251,.251],[.2454,.2454,.2454],[.2399,.2399,.2399],[.2344,.2344,.2344],[.2288,.2288,.2288],[.2233,.2233,.2233],[.2178,.2178,.2178],[.2122,.2122,.2122],[.2067,.2067,.2067],[.2012,.2012,.2012],[.1956,.1956,.1956],[.1901,.1901,.1901],[.1845,.1845,.1845],[.179,.179,.179],[.1735,.1735,.1735],[.1679,.1679,.1679],[.1624,.1624,.1624],[.1569,.1569,.1569],[.1513,.1513,.1513],[.1458,.1458,.1458],[.1411,.1411,.1411],[.1366,.1366,.1366],[.132,.132,.132],[.1275,.1275,.1275],[.1229,.1229,.1229],[.1184,.1184,.1184],[.1138,.1138,.1138],[.1093,.1093,.1093],[.1047,.1047,.1047],[.1001,.1001,.1001],[.0956,.0956,.0956],[.091,.091,.091],[.0865,.0865,.0865],[.0819,.0819,.0819],[.0774,.0774,.0774],[.0728,.0728,.0728],[.0683,.0683,.0683],[.0637,.0637,.0637],[.0592,.0592,.0592],[.0546,.0546,.0546],[.0501,.0501,.0501],[.0455,.0455,.0455],[.041,.041,.041],[.0364,.0364,.0364],[.0319,.0319,.0319],[.0273,.0273,.0273],[.0228,.0228,.0228],[.0182,.0182,.0182],[.0137,.0137,.0137],[.0091,.0091,.0091],[.0046,.0046,.0046],[0,0,0]]},OrRd:{interpolate:!0,colors:[[1,.9686,.9255],[.9999,.9668,.9211],[.9998,.9649,.9166],[.9996,.9631,.9122],[.9995,.9612,.9078],[.9994,.9594,.9033],[.9993,.9576,.8989],[.9991,.9557,.8945],[.999,.9539,.8901],[.9989,.952,.8856],[.9988,.9502,.8812],[.9986,.9483,.8768],[.9985,.9465,.8723],[.9984,.9446,.8679],[.9983,.9428,.8635],[.9982,.9409,.8591],[.998,.9391,.8546],[.9979,.9373,.8502],[.9978,.9354,.8458],[.9977,.9336,.8413],[.9975,.9317,.8369],[.9974,.9299,.8325],[.9973,.928,.8281],[.9972,.9262,.8236],[.997,.9243,.8192],[.9969,.9225,.8148],[.9968,.9206,.8103],[.9967,.9188,.8059],[.9966,.917,.8015],[.9964,.9151,.797],[.9963,.9133,.7926],[.9962,.9114,.7882],[.9961,.9095,.7837],[.9959,.907,.7785],[.9958,.9046,.7733],[.9957,.9021,.7682],[.9956,.8997,.763],[.9954,.8972,.7578],[.9953,.8947,.7527],[.9952,.8923,.7475],[.9951,.8898,.7423],[.995,.8874,.7372],[.9948,.8849,.732],[.9947,.8824,.7268],[.9946,.88,.7217],[.9945,.8775,.7165],[.9943,.875,.7113],[.9942,.8726,.7062],[.9941,.8701,.701],[.994,.8677,.6958],[.9938,.8652,.6907],[.9937,.8627,.6855],[.9936,.8603,.6803],[.9935,.8578,.6752],[.9934,.8554,.67],[.9932,.8529,.6648],[.9931,.8504,.6597],[.993,.848,.6545],[.9929,.8455,.6493],[.9927,.8431,.6442],[.9926,.8406,.639],[.9925,.8381,.6338],[.9924,.8357,.6287],[.9922,.8332,.6235],[.9922,.8306,.6188],[.9922,.8275,.6156],[.9922,.8245,.6124],[.9922,.8214,.6092],[.9922,.8183,.606],[.9922,.8152,.6028],[.9922,.8121,.5996],[.9922,.8091,.5964],[.9922,.806,.5932],[.9922,.8029,.59],[.9922,.7998,.5868],[.9922,.7968,.5836],[.9922,.7937,.5804],[.9922,.7906,.5772],[.9922,.7875,.574],[.9922,.7845,.5708],[.9922,.7814,.5676],[.9922,.7783,.5644],[.9922,.7752,.5612],[.9922,.7722,.558],[.9922,.7691,.5548],[.9922,.766,.5516],[.9922,.7629,.5484],[.9922,.7599,.5452],[.9922,.7568,.542],[.9922,.7537,.5388],[.9922,.7506,.5356],[.9922,.7476,.5324],[.9922,.7445,.5292],[.9922,.7414,.526],[.9922,.7383,.5228],[.9922,.7353,.5196],[.9921,.7312,.5157],[.992,.7256,.5104],[.9919,.7199,.5051],[.9917,.7142,.4998],[.9916,.7086,.4945],[.9915,.7029,.4892],[.9914,.6973,.4839],[.9912,.6916,.4786],[.9911,.6859,.4733],[.991,.6803,.4681],[.9909,.6746,.4628],[.9908,.669,.4575],[.9906,.6633,.4522],[.9905,.6576,.4469],[.9904,.652,.4416],[.9903,.6463,.4363],[.9901,.6407,.431],[.99,.635,.4257],[.9899,.6293,.4204],[.9898,.6237,.4151],[.9897,.618,.4099],[.9895,.6124,.4046],[.9894,.6067,.3993],[.9893,.601,.394],[.9892,.5954,.3887],[.989,.5897,.3834],[.9889,.5841,.3781],[.9888,.5784,.3728],[.9887,.5727,.3675],[.9885,.5671,.3622],[.9884,.5614,.357],[.9883,.5558,.3517],[.9874,.5505,.348],[.9858,.5456,.3459],[.9842,.5406,.3438],[.9826,.5357,.3417],[.981,.5308,.3396],[.9794,.5259,.3375],[.9778,.521,.3354],[.9762,.516,.3333],[.9746,.5111,.3312],[.973,.5062,.3292],[.9714,.5013,.3271],[.9698,.4963,.325],[.9682,.4914,.3229],[.9666,.4865,.3208],[.965,.4816,.3187],[.9634,.4767,.3166],[.9618,.4717,.3145],[.9602,.4668,.3124],[.9586,.4619,.3103],[.957,.457,.3082],[.9554,.4521,.3061],[.9538,.4471,.3041],[.9522,.4422,.302],[.9506,.4373,.2999],[.9491,.4324,.2978],[.9475,.4275,.2957],[.9459,.4225,.2936],[.9443,.4176,.2915],[.9427,.4127,.2894],[.9411,.4078,.2873],[.9395,.4028,.2852],[.9379,.3979,.2831],[.9354,.392,.2792],[.9325,.3855,.2742],[.9295,.379,.2691],[.9266,.3724,.2641],[.9236,.3659,.259],[.9206,.3594,.254],[.9177,.3529,.2489],[.9147,.3464,.2439],[.9118,.3398,.2388],[.9088,.3333,.2338],[.9059,.3268,.2288],[.9029,.3203,.2237],[.9,.3138,.2187],[.897,.3072,.2136],[.8941,.3007,.2086],[.8911,.2942,.2035],[.8882,.2877,.1985],[.8852,.2812,.1934],[.8823,.2746,.1884],[.8793,.2681,.1834],[.8764,.2616,.1783],[.8734,.2551,.1733],[.8704,.2486,.1682],[.8675,.242,.1632],[.8645,.2355,.1581],[.8616,.229,.1531],[.8586,.2225,.1481],[.8557,.2159,.143],[.8527,.2094,.138],[.8498,.2029,.1329],[.8468,.1964,.1279],[.8439,.1899,.1228],[.8398,.1838,.1187],[.8354,.1779,.1149],[.831,.172,.1111],[.8265,.1661,.1073],[.8221,.1602,.1035],[.8177,.1543,.0996],[.8132,.1484,.0958],[.8088,.1425,.092],[.8044,.1366,.0882],[.8,.1307,.0844],[.7955,.1248,.0806],[.7911,.1188,.0768],[.7867,.1129,.0729],[.7822,.107,.0691],[.7778,.1011,.0653],[.7734,.0952,.0615],[.769,.0893,.0577],[.7645,.0834,.0539],[.7601,.0775,.0501],[.7557,.0716,.0462],[.7512,.0657,.0424],[.7468,.0598,.0386],[.7424,.0539,.0348],[.7379,.048,.031],[.7335,.0421,.0272],[.7291,.0362,.0234],[.7247,.0303,.0195],[.7202,.0244,.0157],[.7158,.0185,.0119],[.7114,.0125,.0081],[.7069,.0066,.0043],[.7025,7e-4,5e-4],[.6964,0,0],[.69,0,0],[.6836,0,0],[.6772,0,0],[.6708,0,0],[.6644,0,0],[.658,0,0],[.6516,0,0],[.6452,0,0],[.6388,0,0],[.6324,0,0],[.626,0,0],[.6196,0,0],[.6132,0,0],[.6068,0,0],[.6004,0,0],[.594,0,0],[.5876,0,0],[.5812,0,0],[.5748,0,0],[.5684,0,0],[.562,0,0],[.5556,0,0],[.5492,0,0],[.5428,0,0],[.5364,0,0],[.53,0,0],[.5236,0,0],[.5172,0,0],[.5108,0,0],[.5044,0,0],[.498,0,0]]},Oranges:{interpolate:!0,colors:[[1,.9608,.9216],[.9999,.9589,.918],[.9998,.9571,.9144],[.9996,.9552,.9109],[.9995,.9534,.9073],[.9994,.9516,.9037],[.9993,.9497,.9002],[.9991,.9479,.8966],[.999,.946,.893],[.9989,.9442,.8895],[.9988,.9423,.8859],[.9986,.9405,.8823],[.9985,.9386,.8788],[.9984,.9368,.8752],[.9983,.9349,.8716],[.9982,.9331,.8681],[.998,.9313,.8645],[.9979,.9294,.8609],[.9978,.9276,.8573],[.9977,.9257,.8538],[.9975,.9239,.8502],[.9974,.922,.8466],[.9973,.9202,.8431],[.9972,.9183,.8395],[.997,.9165,.8359],[.9969,.9146,.8324],[.9968,.9128,.8288],[.9967,.911,.8252],[.9966,.9091,.8217],[.9964,.9073,.8181],[.9963,.9054,.8145],[.9962,.9036,.811],[.9961,.9016,.8072],[.9959,.8989,.8018],[.9958,.8962,.7963],[.9957,.8935,.7909],[.9956,.8908,.7855],[.9954,.8881,.7801],[.9953,.8854,.7747],[.9952,.8827,.7693],[.9951,.88,.7639],[.995,.8773,.7584],[.9948,.8746,.753],[.9947,.8718,.7476],[.9946,.8691,.7422],[.9945,.8664,.7368],[.9943,.8637,.7314],[.9942,.861,.726],[.9941,.8583,.7206],[.994,.8556,.7151],[.9938,.8529,.7097],[.9937,.8502,.7043],[.9936,.8475,.6989],[.9935,.8448,.6935],[.9934,.8421,.6881],[.9932,.8394,.6827],[.9931,.8367,.6772],[.993,.834,.6718],[.9929,.8312,.6664],[.9927,.8285,.661],[.9926,.8258,.6556],[.9925,.8231,.6502],[.9924,.8204,.6448],[.9922,.8177,.6394],[.9922,.8146,.6336],[.9922,.8105,.6268],[.9922,.8063,.6201],[.9922,.8021,.6133],[.9922,.7979,.6065],[.9922,.7937,.5998],[.9922,.7895,.593],[.9922,.7854,.5862],[.9922,.7812,.5795],[.9922,.777,.5727],[.9922,.7728,.5659],[.9922,.7686,.5592],[.9922,.7644,.5524],[.9922,.7603,.5456],[.9922,.7561,.5389],[.9922,.7519,.5321],[.9922,.7477,.5253],[.9922,.7435,.5186],[.9922,.7393,.5118],[.9922,.7352,.505],[.9922,.731,.4983],[.9922,.7268,.4915],[.9922,.7226,.4847],[.9922,.7184,.478],[.9922,.7142,.4712],[.9922,.7101,.4644],[.9922,.7059,.4577],[.9922,.7017,.4509],[.9922,.6975,.4441],[.9922,.6933,.4374],[.9922,.6892,.4306],[.9922,.685,.4238],[.9922,.6808,.4174],[.9922,.6768,.4117],[.9922,.6727,.4059],[.9922,.6687,.4001],[.9922,.6646,.3943],[.9922,.6605,.3885],[.9922,.6565,.3827],[.9922,.6524,.377],[.9922,.6484,.3712],[.9922,.6443,.3654],[.9922,.6402,.3596],[.9922,.6362,.3538],[.9922,.6321,.3481],[.9922,.6281,.3423],[.9922,.624,.3365],[.9922,.6199,.3307],[.9922,.6159,.3249],[.9922,.6118,.3191],[.9922,.6078,.3134],[.9922,.6037,.3076],[.9922,.5996,.3018],[.9922,.5956,.296],[.9922,.5915,.2902],[.9922,.5875,.2844],[.9922,.5834,.2787],[.9922,.5793,.2729],[.9922,.5753,.2671],[.9922,.5712,.2613],[.9922,.5672,.2555],[.9922,.5631,.2498],[.9922,.559,.244],[.9922,.555,.2382],[.9914,.5507,.2328],[.9899,.5463,.2277],[.9885,.5419,.2227],[.987,.5374,.2176],[.9855,.533,.2126],[.984,.5286,.2076],[.9826,.5242,.2025],[.9811,.5197,.1975],[.9796,.5153,.1924],[.9781,.5109,.1874],[.9767,.5064,.1823],[.9752,.502,.1773],[.9737,.4976,.1722],[.9722,.4931,.1672],[.9707,.4887,.1622],[.9693,.4843,.1571],[.9678,.4799,.1521],[.9663,.4754,.147],[.9648,.471,.142],[.9634,.4666,.1369],[.9619,.4621,.1319],[.9604,.4577,.1268],[.9589,.4533,.1218],[.9575,.4489,.1168],[.956,.4444,.1117],[.9545,.44,.1067],[.953,.4356,.1016],[.9516,.4311,.0966],[.9501,.4267,.0915],[.9486,.4223,.0865],[.9471,.4179,.0814],[.9457,.4134,.0764],[.9433,.4092,.0731],[.9403,.4052,.0709],[.9373,.4011,.0687],[.9344,.397,.0665],[.9314,.393,.0643],[.9285,.3889,.0621],[.9255,.3849,.0598],[.9226,.3808,.0576],[.9196,.3767,.0554],[.9167,.3727,.0532],[.9137,.3686,.051],[.9108,.3646,.0488],[.9078,.3605,.0466],[.9049,.3564,.0443],[.9019,.3524,.0421],[.899,.3483,.0399],[.896,.3443,.0377],[.8931,.3402,.0355],[.8901,.3361,.0333],[.8872,.3321,.031],[.8842,.328,.0288],[.8812,.324,.0266],[.8783,.3199,.0244],[.8753,.3158,.0222],[.8724,.3118,.02],[.8694,.3077,.0178],[.8665,.3037,.0155],[.8635,.2996,.0133],[.8606,.2955,.0111],[.8576,.2915,.0089],[.8547,.2874,.0067],[.8517,.2834,.0045],[.8463,.2807,.0041],[.84,.2785,.0044],[.8337,.2763,.0046],[.8275,.274,.0048],[.8212,.2718,.0051],[.8149,.2696,.0053],[.8086,.2674,.0056],[.8024,.2652,.0058],[.7961,.263,.0061],[.7898,.2608,.0063],[.7835,.2585,.0066],[.7773,.2563,.0068],[.771,.2541,.0071],[.7647,.2519,.0073],[.7584,.2497,.0076],[.7522,.2475,.0078],[.7459,.2453,.008],[.7396,.243,.0083],[.7333,.2408,.0085],[.7271,.2386,.0088],[.7208,.2364,.009],[.7145,.2342,.0093],[.7082,.232,.0095],[.702,.2298,.0098],[.6957,.2275,.01],[.6894,.2253,.0103],[.6831,.2231,.0105],[.6769,.2209,.0107],[.6706,.2187,.011],[.6643,.2165,.0112],[.658,.2143,.0115],[.6518,.212,.0117],[.6468,.2101,.0119],[.642,.2083,.012],[.6372,.2065,.0121],[.6324,.2046,.0122],[.6276,.2028,.0124],[.6228,.2009,.0125],[.618,.1991,.0126],[.6132,.1972,.0127],[.6084,.1954,.0129],[.6036,.1935,.013],[.5988,.1917,.0131],[.594,.1899,.0132],[.5892,.188,.0133],[.5844,.1862,.0135],[.5796,.1843,.0136],[.5748,.1825,.0137],[.57,.1806,.0138],[.5652,.1788,.014],[.5604,.1769,.0141],[.5556,.1751,.0142],[.5508,.1732,.0143],[.546,.1714,.0145],[.5412,.1696,.0146],[.5364,.1677,.0147],[.5316,.1659,.0148],[.5268,.164,.0149],[.522,.1622,.0151],[.5172,.1603,.0152],[.5124,.1585,.0153],[.5076,.1566,.0154],[.5028,.1548,.0156],[.498,.1529,.0157]]},PRGn:{interpolate:!0,colors:[[.251,0,.2941],[.2593,.0065,.3027],[.2676,.0129,.3113],[.2759,.0194,.32],[.2842,.0258,.3286],[.2925,.0323,.3372],[.3008,.0388,.3458],[.3091,.0452,.3544],[.3174,.0517,.363],[.3257,.0581,.3716],[.334,.0646,.3802],[.3423,.071,.3889],[.3506,.0775,.3975],[.3589,.084,.4061],[.3672,.0904,.4147],[.3755,.0969,.4233],[.3839,.1033,.4319],[.3922,.1098,.4405],[.4005,.1163,.4491],[.4088,.1227,.4577],[.4171,.1292,.4664],[.4254,.1356,.475],[.4337,.1421,.4836],[.442,.1486,.4922],[.4503,.155,.5008],[.4586,.1615,.5094],[.4654,.1701,.5168],[.4708,.1809,.523],[.4762,.1916,.5291],[.4816,.2024,.5353],[.487,.2131,.5414],[.4923,.2239,.5476],[.4977,.2347,.5537],[.5031,.2454,.5599],[.5085,.2562,.566],[.5139,.267,.5722],[.5193,.2777,.5783],[.5246,.2885,.5845],[.53,.2993,.5906],[.5354,.31,.5968],[.5408,.3208,.6029],[.5462,.3316,.6091],[.5516,.3423,.6152],[.5569,.3531,.6214],[.5623,.3639,.6275],[.5677,.3746,.6337],[.5731,.3854,.6398],[.5785,.3962,.646],[.5839,.4069,.6521],[.5892,.4177,.6583],[.5946,.4285,.6644],[.6,.4392,.6706],[.6063,.4474,.6761],[.6126,.4555,.6817],[.6189,.4637,.6872],[.6252,.4718,.6927],[.6315,.48,.6983],[.6378,.4881,.7038],[.6441,.4963,.7093],[.6504,.5044,.7149],[.6567,.5126,.7204],[.6631,.5207,.726],[.6694,.5289,.7315],[.6757,.537,.737],[.682,.5452,.7426],[.6883,.5533,.7481],[.6946,.5615,.7536],[.7009,.5696,.7592],[.7072,.5778,.7647],[.7135,.5859,.7702],[.7198,.5941,.7758],[.7261,.6022,.7813],[.7324,.6104,.7869],[.7387,.6185,.7924],[.745,.6267,.7979],[.7513,.6348,.8035],[.7576,.643,.809],[.7636,.6507,.8137],[.7693,.6579,.8175],[.775,.6651,.8214],[.7807,.6724,.8252],[.7864,.6796,.8291],[.7921,.6868,.8329],[.7978,.694,.8368],[.8035,.7013,.8406],[.8092,.7085,.8444],[.8148,.7157,.8483],[.8205,.723,.8521],[.8262,.7302,.856],[.8319,.7374,.8598],[.8376,.7446,.8637],[.8433,.7519,.8675],[.849,.7591,.8714],[.8547,.7663,.8752],[.8604,.7735,.879],[.8661,.7808,.8829],[.8717,.788,.8867],[.8774,.7952,.8906],[.8831,.8025,.8944],[.8888,.8097,.8983],[.8945,.8169,.9021],[.9002,.8241,.906],[.9059,.8314,.9098],[.9083,.8368,.9121],[.9108,.8421,.9144],[.9133,.8475,.9167],[.9157,.8529,.919],[.9182,.8583,.9213],[.9206,.8637,.9236],[.9231,.8691,.926],[.9256,.8744,.9283],[.928,.8798,.9306],[.9305,.8852,.9329],[.9329,.8906,.9352],[.9354,.896,.9375],[.9379,.9013,.9398],[.9403,.9067,.9421],[.9428,.9121,.9444],[.9453,.9175,.9467],[.9477,.9229,.949],[.9502,.9283,.9513],[.9526,.9336,.9536],[.9551,.939,.9559],[.9576,.9444,.9582],[.96,.9498,.9606],[.9625,.9552,.9629],[.9649,.9606,.9652],[.9674,.9659,.9675],[.9663,.9681,.9659],[.9617,.967,.9603],[.9571,.9659,.9548],[.9525,.9649,.9493],[.9479,.9638,.9437],[.9433,.9627,.9382],[.9386,.9616,.9326],[.934,.9606,.9271],[.9294,.9595,.9216],[.9248,.9584,.916],[.9202,.9573,.9105],[.9156,.9562,.905],[.911,.9552,.8994],[.9063,.9541,.8939],[.9017,.953,.8884],[.8971,.9519,.8828],[.8925,.9509,.8773],[.8879,.9498,.8717],[.8833,.9487,.8662],[.8787,.9476,.8607],[.874,.9466,.8551],[.8694,.9455,.8496],[.8648,.9444,.8441],[.8602,.9433,.8385],[.8556,.9423,.833],[.851,.9412,.8275],[.8431,.9379,.8196],[.8353,.9347,.8118],[.8275,.9315,.8039],[.8196,.9283,.7961],[.8118,.925,.7882],[.8039,.9218,.7804],[.7961,.9186,.7725],[.7882,.9153,.7647],[.7804,.9121,.7569],[.7725,.9089,.749],[.7647,.9057,.7412],[.7569,.9024,.7333],[.749,.8992,.7255],[.7412,.896,.7176],[.7333,.8927,.7098],[.7255,.8895,.702],[.7176,.8863,.6941],[.7098,.883,.6863],[.702,.8798,.6784],[.6941,.8766,.6706],[.6863,.8734,.6627],[.6784,.8701,.6549],[.6706,.8669,.6471],[.6627,.8637,.6392],[.6549,.8604,.6314],[.6451,.8554,.6226],[.6334,.8484,.6129],[.6218,.8415,.6032],[.6101,.8346,.5935],[.5984,.8277,.5839],[.5867,.8208,.5742],[.575,.8138,.5645],[.5633,.8069,.5548],[.5516,.8,.5451],[.5399,.7931,.5354],[.5283,.7862,.5257],[.5166,.7792,.516],[.5049,.7723,.5063],[.4932,.7654,.4967],[.4815,.7585,.487],[.4698,.7516,.4773],[.4581,.7446,.4676],[.4464,.7377,.4579],[.4348,.7308,.4482],[.4231,.7239,.4385],[.4114,.717,.4288],[.3997,.71,.4191],[.388,.7031,.4095],[.3763,.6962,.3998],[.3646,.6893,.3901],[.3529,.6824,.3804],[.3433,.674,.3739],[.3336,.6657,.3675],[.3239,.6574,.361],[.3142,.6491,.3546],[.3045,.6408,.3481],[.2948,.6325,.3416],[.2851,.6242,.3352],[.2754,.6159,.3287],[.2657,.6076,.3223],[.2561,.5993,.3158],[.2464,.591,.3093],[.2367,.5827,.3029],[.227,.5744,.2964],[.2173,.5661,.29],[.2076,.5578,.2835],[.1979,.5495,.277],[.1882,.5412,.2706],[.1785,.5329,.2641],[.1689,.5246,.2577],[.1592,.5163,.2512],[.1495,.508,.2448],[.1398,.4997,.2383],[.1301,.4913,.2318],[.1204,.483,.2254],[.1107,.4747,.2189],[.1038,.4666,.2135],[.0997,.4586,.2092],[.0955,.4506,.2049],[.0913,.4426,.2006],[.0872,.4346,.1963],[.083,.4266,.192],[.0789,.4186,.1877],[.0747,.4106,.1834],[.0706,.4026,.1791],[.0664,.3946,.1748],[.0623,.3866,.1705],[.0581,.3786,.1662],[.054,.3706,.1619],[.0498,.3626,.1576],[.0457,.3546,.1532],[.0415,.3466,.1489],[.0374,.3386,.1446],[.0332,.3306,.1403],[.0291,.3226,.136],[.0249,.3146,.1317],[.0208,.3067,.1274],[.0166,.2987,.1231],[.0125,.2907,.1188],[.0083,.2827,.1145],[.0042,.2747,.1102],[0,.2667,.1059]]},Paired:{interpolate:!1,colors:[[.651,.8078,.8902],[.1216,.4706,.7059],[.698,.8745,.5412],[.2,.6275,.1725],[.9843,.6039,.6],[.8902,.102,.1098],[.9922,.749,.4353],[1,.498,0],[.7922,.698,.8392],[.4157,.2392,.6039],[1,1,.6],[.6941,.349,.1569]]},Pastel1:{interpolate:!1,colors:[[.9843,.7059,.6824],[.702,.8039,.8902],[.8,.9216,.7725],[.8706,.7961,.8941],[.9961,.851,.651],[1,1,.8],[.898,.8471,.7412],[.9922,.8549,.9255],[.949,.949,.949]]},Pastel2:{interpolate:!1,colors:[[.702,.8863,.8039],[.9922,.8039,.6745],[.7961,.8353,.9098],[.9569,.7922,.8941],[.902,.9608,.7882],[1,.949,.6824],[.9451,.8863,.8],[.8,.8,.8]]},PiYG:{interpolate:!0,colors:[[.5569,.0039,.3216],[.5653,.0079,.3282],[.5738,.0119,.3348],[.5822,.0159,.3414],[.5907,.0199,.348],[.5992,.0239,.3546],[.6076,.0279,.3612],[.6161,.0319,.3679],[.6245,.0359,.3745],[.633,.0399,.3811],[.6414,.0439,.3877],[.6499,.0479,.3943],[.6584,.0519,.4009],[.6668,.0559,.4075],[.6753,.0599,.4141],[.6837,.0639,.4208],[.6922,.0679,.4274],[.7007,.0719,.434],[.7091,.0759,.4406],[.7176,.0799,.4472],[.726,.0839,.4538],[.7345,.0879,.4604],[.7429,.0919,.4671],[.7514,.0959,.4737],[.7599,.0999,.4803],[.7683,.1039,.4869],[.7745,.113,.494],[.7783,.1271,.5015],[.7822,.1413,.509],[.786,.1554,.5166],[.7899,.1696,.5241],[.7937,.1837,.5316],[.7975,.1978,.5392],[.8014,.212,.5467],[.8052,.2261,.5542],[.8091,.2403,.5618],[.8129,.2544,.5693],[.8168,.2686,.5769],[.8206,.2827,.5844],[.8245,.2969,.5919],[.8283,.311,.5995],[.8321,.3252,.607],[.836,.3393,.6145],[.8398,.3535,.6221],[.8437,.3676,.6296],[.8475,.3818,.6371],[.8514,.3959,.6447],[.8552,.4101,.6522],[.8591,.4242,.6597],[.8629,.4384,.6673],[.8667,.4525,.6748],[.8706,.4667,.6824],[.8735,.4764,.6891],[.8764,.486,.6959],[.8794,.4957,.7027],[.8823,.5054,.7094],[.8852,.5151,.7162],[.8881,.5248,.723],[.891,.5345,.7297],[.894,.5442,.7365],[.8969,.5539,.7433],[.8998,.5636,.75],[.9027,.5732,.7568],[.9057,.5829,.7636],[.9086,.5926,.7703],[.9115,.6023,.7771],[.9144,.612,.7839],[.9173,.6217,.7906],[.9203,.6314,.7974],[.9232,.6411,.8042],[.9261,.6507,.8109],[.929,.6604,.8177],[.9319,.6701,.8245],[.9349,.6798,.8312],[.9378,.6895,.838],[.9407,.6992,.8448],[.9436,.7089,.8515],[.946,.717,.8565],[.9479,.7234,.8597],[.9497,.7299,.863],[.9516,.7363,.8662],[.9534,.7428,.8694],[.9552,.7493,.8727],[.9571,.7557,.8759],[.9589,.7622,.8791],[.9608,.7686,.8824],[.9626,.7751,.8856],[.9645,.7815,.8888],[.9663,.788,.892],[.9682,.7945,.8953],[.97,.8009,.8985],[.9719,.8074,.9017],[.9737,.8138,.905],[.9755,.8203,.9082],[.9774,.8268,.9114],[.9792,.8332,.9146],[.9811,.8397,.9179],[.9829,.8461,.9211],[.9848,.8526,.9243],[.9866,.8591,.9276],[.9885,.8655,.9308],[.9903,.872,.934],[.9922,.8784,.9373],[.9912,.882,.9385],[.9903,.8855,.9397],[.9894,.889,.9409],[.9885,.8926,.9422],[.9875,.8961,.9434],[.9866,.8997,.9446],[.9857,.9032,.9459],[.9848,.9067,.9471],[.9839,.9103,.9483],[.9829,.9138,.9496],[.982,.9173,.9508],[.9811,.9209,.952],[.9802,.9244,.9532],[.9792,.928,.9545],[.9783,.9315,.9557],[.9774,.935,.9569],[.9765,.9386,.9582],[.9755,.9421,.9594],[.9746,.9456,.9606],[.9737,.9492,.9619],[.9728,.9527,.9631],[.9719,.9562,.9643],[.9709,.9598,.9656],[.97,.9633,.9668],[.9691,.9669,.968],[.9673,.9685,.9656],[.9647,.9682,.9596],[.9621,.9679,.9536],[.9595,.9676,.9476],[.9569,.9672,.9416],[.9542,.9669,.9356],[.9516,.9666,.9296],[.949,.9663,.9236],[.9464,.966,.9176],[.9438,.9657,.9116],[.9412,.9654,.9057],[.9386,.9651,.8997],[.9359,.9648,.8937],[.9333,.9645,.8877],[.9307,.9642,.8817],[.9281,.9639,.8757],[.9255,.9636,.8697],[.9229,.9632,.8637],[.9203,.9629,.8577],[.9176,.9626,.8517],[.915,.9623,.8457],[.9124,.962,.8397],[.9098,.9617,.8337],[.9072,.9614,.8277],[.9046,.9611,.8217],[.902,.9608,.8157],[.8949,.9577,.8043],[.8878,.9546,.7929],[.8807,.9516,.7815],[.8737,.9485,.7702],[.8666,.9454,.7588],[.8595,.9423,.7474],[.8524,.9393,.736],[.8454,.9362,.7246],[.8383,.9331,.7133],[.8312,.93,.7019],[.8241,.927,.6905],[.8171,.9239,.6791],[.81,.9208,.6677],[.8029,.9177,.6564],[.7958,.9146,.645],[.7888,.9116,.6336],[.7817,.9085,.6222],[.7746,.9054,.6108],[.7676,.9023,.5995],[.7605,.8993,.5881],[.7534,.8962,.5767],[.7463,.8931,.5653],[.7393,.89,.5539],[.7322,.887,.5426],[.7251,.8839,.5312],[.7172,.8795,.5202],[.7084,.8738,.5096],[.6997,.8681,.499],[.6909,.8624,.4884],[.6821,.8567,.4777],[.6734,.8511,.4671],[.6646,.8454,.4565],[.6558,.8397,.4459],[.6471,.834,.4353],[.6383,.8283,.4247],[.6295,.8226,.4141],[.6208,.8169,.4035],[.612,.8112,.3928],[.6032,.8055,.3822],[.5945,.7998,.3716],[.5857,.7942,.361],[.5769,.7885,.3504],[.5682,.7828,.3398],[.5594,.7771,.3292],[.5506,.7714,.3186],[.5419,.7657,.308],[.5331,.76,.2973],[.5243,.7543,.2867],[.5156,.7486,.2761],[.5068,.7429,.2655],[.498,.7373,.2549],[.4903,.7308,.25],[.4827,.7243,.2451],[.475,.7179,.2401],[.4673,.7114,.2352],[.4596,.705,.2303],[.4519,.6985,.2254],[.4442,.692,.2205],[.4365,.6856,.2155],[.4288,.6791,.2106],[.4211,.6727,.2057],[.4135,.6662,.2008],[.4058,.6597,.1958],[.3981,.6533,.1909],[.3904,.6468,.186],[.3827,.6404,.1811],[.375,.6339,.1762],[.3673,.6275,.1712],[.3596,.621,.1663],[.3519,.6145,.1614],[.3443,.6081,.1565],[.3366,.6016,.1516],[.3289,.5952,.1466],[.3212,.5887,.1417],[.3135,.5822,.1368],[.3058,.5758,.1319],[.299,.569,.1288],[.2932,.5619,.1276],[.2874,.5549,.1263],[.2815,.5478,.1251],[.2757,.5407,.1239],[.2698,.5336,.1226],[.264,.5266,.1214],[.2581,.5195,.1202],[.2523,.5124,.119],[.2464,.5053,.1177],[.2406,.4983,.1165],[.2348,.4912,.1153],[.2289,.4841,.114],[.2231,.477,.1128],[.2172,.47,.1116],[.2114,.4629,.1103],[.2055,.4558,.1091],[.1997,.4488,.1079],[.1938,.4417,.1067],[.188,.4346,.1054],[.1822,.4275,.1042],[.1763,.4205,.103],[.1705,.4134,.1017],[.1646,.4063,.1005],[.1588,.3992,.0993],[.1529,.3922,.098]]},PuBu:{interpolate:!0,colors:[[1,.9686,.9843],[.9977,.9667,.9832],[.9953,.9647,.9821],[.993,.9627,.981],[.9906,.9608,.9799],[.9883,.9588,.9788],[.986,.9568,.9777],[.9836,.9548,.9766],[.9813,.9529,.9755],[.979,.9509,.9743],[.9766,.9489,.9732],[.9743,.947,.9721],[.9719,.945,.971],[.9696,.943,.9699],[.9673,.9411,.9688],[.9649,.9391,.9677],[.9626,.9371,.9666],[.9603,.9352,.9655],[.9579,.9332,.9644],[.9556,.9312,.9633],[.9532,.9293,.9622],[.9509,.9273,.9611],[.9486,.9253,.96],[.9462,.9234,.9588],[.9439,.9214,.9577],[.9416,.9194,.9566],[.9392,.9174,.9555],[.9369,.9155,.9544],[.9345,.9135,.9533],[.9322,.9115,.9522],[.9299,.9096,.9511],[.9275,.9076,.95],[.9251,.9055,.9488],[.9216,.9028,.9474],[.9182,.9001,.9459],[.9147,.8974,.9444],[.9113,.8947,.9429],[.9078,.892,.9415],[.9044,.8893,.94],[.9009,.8866,.9385],[.8975,.8839,.937],[.8941,.8812,.9355],[.8906,.8785,.9341],[.8872,.8758,.9326],[.8837,.8731,.9311],[.8803,.8704,.9296],[.8768,.8677,.9282],[.8734,.8649,.9267],[.8699,.8622,.9252],[.8665,.8595,.9237],[.8631,.8568,.9223],[.8596,.8541,.9208],[.8562,.8514,.9193],[.8527,.8487,.9178],[.8493,.846,.9164],[.8458,.8433,.9149],[.8424,.8406,.9134],[.8389,.8379,.9119],[.8355,.8352,.9104],[.832,.8325,.909],[.8286,.8298,.9075],[.8252,.8271,.906],[.8217,.8243,.9045],[.8183,.8216,.9031],[.8144,.819,.9016],[.8092,.8165,.9003],[.8041,.8141,.8989],[.7989,.8116,.8976],[.7937,.8092,.8962],[.7886,.8067,.8949],[.7834,.8042,.8935],[.7782,.8018,.8921],[.7731,.7993,.8908],[.7679,.7968,.8894],[.7627,.7944,.8881],[.7576,.7919,.8867],[.7524,.7895,.8854],[.7472,.787,.884],[.7421,.7845,.8827],[.7369,.7821,.8813],[.7317,.7796,.88],[.7266,.7772,.8786],[.7214,.7747,.8773],[.7162,.7722,.8759],[.711,.7698,.8746],[.7059,.7673,.8732],[.7007,.7649,.8718],[.6955,.7624,.8705],[.6904,.7599,.8691],[.6852,.7575,.8678],[.68,.755,.8664],[.6749,.7526,.8651],[.6697,.7501,.8637],[.6645,.7476,.8624],[.6594,.7452,.861],[.6542,.7427,.8597],[.6487,.7403,.8583],[.6425,.7378,.8568],[.6364,.7353,.8553],[.6302,.7329,.8538],[.6241,.7304,.8524],[.6179,.728,.8509],[.6118,.7255,.8494],[.6056,.723,.8479],[.5995,.7206,.8465],[.5933,.7181,.845],[.5872,.7156,.8435],[.581,.7132,.842],[.5749,.7107,.8406],[.5687,.7083,.8391],[.5626,.7058,.8376],[.5564,.7033,.8361],[.5502,.7009,.8346],[.5441,.6984,.8332],[.5379,.696,.8317],[.5318,.6935,.8302],[.5256,.691,.8287],[.5195,.6886,.8273],[.5133,.6861,.8258],[.5072,.6837,.8243],[.501,.6812,.8228],[.4949,.6787,.8214],[.4887,.6763,.8199],[.4826,.6738,.8184],[.4764,.6714,.8169],[.4703,.6689,.8155],[.4641,.6664,.814],[.458,.664,.8125],[.4511,.6612,.8108],[.4435,.6581,.809],[.4358,.6551,.8072],[.4282,.652,.8053],[.4206,.6489,.8035],[.4129,.6458,.8016],[.4053,.6428,.7998],[.3977,.6397,.7979],[.3901,.6366,.7961],[.3824,.6335,.7942],[.3748,.6304,.7924],[.3672,.6274,.7905],[.3596,.6243,.7887],[.3519,.6212,.7869],[.3443,.6181,.785],[.3367,.6151,.7832],[.329,.612,.7813],[.3214,.6089,.7795],[.3138,.6058,.7776],[.3062,.6028,.7758],[.2985,.5997,.7739],[.2909,.5966,.7721],[.2833,.5935,.7702],[.2756,.5905,.7684],[.268,.5874,.7666],[.2604,.5843,.7647],[.2528,.5812,.7629],[.2451,.5782,.761],[.2375,.5751,.7592],[.2299,.572,.7573],[.2223,.5689,.7555],[.2146,.5659,.7536],[.208,.5622,.7517],[.202,.5583,.7497],[.1959,.5544,.7478],[.1899,.5504,.7458],[.1839,.5465,.7438],[.1779,.5426,.7419],[.1718,.5386,.7399],[.1658,.5347,.7379],[.1598,.5307,.736],[.1537,.5268,.734],[.1477,.5229,.732],[.1417,.5189,.7301],[.1357,.515,.7281],[.1296,.5111,.7261],[.1236,.5071,.7242],[.1176,.5032,.7222],[.1115,.4993,.7202],[.1055,.4953,.7182],[.0995,.4914,.7163],[.0935,.4874,.7143],[.0874,.4835,.7123],[.0814,.4796,.7104],[.0754,.4756,.7084],[.0693,.4717,.7064],[.0633,.4678,.7045],[.0573,.4638,.7025],[.0513,.4599,.7005],[.0452,.4559,.6986],[.0392,.452,.6966],[.0332,.4481,.6946],[.0271,.4441,.6927],[.0211,.4402,.6907],[.0195,.4372,.687],[.0194,.4345,.6827],[.0193,.4318,.6784],[.0191,.4291,.674],[.019,.4264,.6697],[.0189,.4237,.6654],[.0188,.4209,.6611],[.0187,.4182,.6568],[.0185,.4155,.6525],[.0184,.4128,.6482],[.0183,.4101,.6439],[.0182,.4074,.6396],[.018,.4047,.6353],[.0179,.402,.631],[.0178,.3993,.6267],[.0177,.3966,.6224],[.0175,.3939,.6181],[.0174,.3912,.6138],[.0173,.3885,.6095],[.0172,.3858,.6052],[.0171,.3831,.6008],[.0169,.3803,.5965],[.0168,.3776,.5922],[.0167,.3749,.5879],[.0166,.3722,.5836],[.0164,.3695,.5793],[.0163,.3668,.575],[.0162,.3641,.5707],[.0161,.3614,.5664],[.0159,.3587,.5621],[.0158,.356,.5578],[.0157,.3533,.5535],[.0155,.3493,.5472],[.0152,.3451,.5407],[.015,.3409,.5342],[.0147,.3367,.5277],[.0145,.3325,.5212],[.0142,.3284,.5146],[.014,.3242,.5081],[.0137,.32,.5016],[.0135,.3158,.4951],[.0133,.3116,.4886],[.013,.3075,.482],[.0128,.3033,.4755],[.0125,.2991,.469],[.0123,.2949,.4625],[.012,.2907,.4559],[.0118,.2865,.4494],[.0115,.2824,.4429],[.0113,.2782,.4364],[.011,.274,.4299],[.0108,.2698,.4233],[.0105,.2656,.4168],[.0103,.2614,.4103],[.0101,.2573,.4038],[.0098,.2531,.3973],[.0096,.2489,.3907],[.0093,.2447,.3842],[.0091,.2405,.3777],[.0088,.2363,.3712],[.0086,.2322,.3647],[.0083,.228,.3581],[.0081,.2238,.3516],[.0078,.2196,.3451]]},PuBuGn:{interpolate:!0,colors:[[1,.9686,.9843],[.9977,.966,.983],[.9953,.9635,.9816],[.993,.9609,.9803],[.9906,.9583,.9789],[.9883,.9557,.9775],[.986,.9531,.9762],[.9836,.9505,.9748],[.9813,.948,.9735],[.979,.9454,.9721],[.9766,.9428,.9708],[.9743,.9402,.9694],[.9719,.9376,.9681],[.9696,.935,.9667],[.9673,.9325,.9654],[.9649,.9299,.964],[.9626,.9273,.9627],[.9603,.9247,.9613],[.9579,.9221,.96],[.9556,.9195,.9586],[.9532,.917,.9572],[.9509,.9144,.9559],[.9486,.9118,.9545],[.9462,.9092,.9532],[.9439,.9066,.9518],[.9416,.904,.9505],[.9392,.9015,.9491],[.9369,.8989,.9478],[.9345,.8963,.9464],[.9322,.8937,.9451],[.9299,.8911,.9437],[.9275,.8885,.9424],[.9251,.886,.941],[.9216,.8839,.9398],[.9182,.8818,.9386],[.9147,.8797,.9373],[.9113,.8776,.9361],[.9078,.8756,.9349],[.9044,.8735,.9336],[.9009,.8714,.9324],[.8975,.8693,.9312],[.8941,.8672,.93],[.8906,.8651,.9287],[.8872,.863,.9275],[.8837,.8609,.9263],[.8803,.8588,.925],[.8768,.8567,.9238],[.8734,.8546,.9226],[.8699,.8525,.9213],[.8665,.8505,.9201],[.8631,.8484,.9189],[.8596,.8463,.9176],[.8562,.8442,.9164],[.8527,.8421,.9152],[.8493,.84,.914],[.8458,.8379,.9127],[.8424,.8358,.9115],[.8389,.8337,.9103],[.8355,.8316,.909],[.832,.8295,.9078],[.8286,.8275,.9066],[.8252,.8254,.9053],[.8217,.8233,.9041],[.8183,.8212,.9029],[.8144,.819,.9016],[.8092,.8165,.9003],[.8041,.8141,.8989],[.7989,.8116,.8976],[.7937,.8092,.8962],[.7886,.8067,.8949],[.7834,.8042,.8935],[.7782,.8018,.8921],[.7731,.7993,.8908],[.7679,.7968,.8894],[.7627,.7944,.8881],[.7576,.7919,.8867],[.7524,.7895,.8854],[.7472,.787,.884],[.7421,.7845,.8827],[.7369,.7821,.8813],[.7317,.7796,.88],[.7266,.7772,.8786],[.7214,.7747,.8773],[.7162,.7722,.8759],[.711,.7698,.8746],[.7059,.7673,.8732],[.7007,.7649,.8718],[.6955,.7624,.8705],[.6904,.7599,.8691],[.6852,.7575,.8678],[.68,.755,.8664],[.6749,.7526,.8651],[.6697,.7501,.8637],[.6645,.7476,.8624],[.6594,.7452,.861],[.6542,.7427,.8597],[.6481,.7403,.8583],[.6403,.7378,.8568],[.6326,.7353,.8553],[.6248,.7329,.8538],[.6171,.7304,.8524],[.6093,.728,.8509],[.6016,.7255,.8494],[.5938,.723,.8479],[.5861,.7206,.8465],[.5783,.7181,.845],[.5706,.7156,.8435],[.5628,.7132,.842],[.5551,.7107,.8406],[.5473,.7083,.8391],[.5396,.7058,.8376],[.5318,.7033,.8361],[.5241,.7009,.8346],[.5163,.6984,.8332],[.5086,.696,.8317],[.5008,.6935,.8302],[.4931,.691,.8287],[.4853,.6886,.8273],[.4776,.6861,.8258],[.4698,.6837,.8243],[.4621,.6812,.8228],[.4543,.6787,.8214],[.4466,.6763,.8199],[.4388,.6738,.8184],[.431,.6714,.8169],[.4233,.6689,.8155],[.4155,.6664,.814],[.4078,.664,.8125],[.4009,.6612,.8108],[.3949,.6581,.809],[.3889,.6551,.8072],[.3828,.652,.8053],[.3768,.6489,.8035],[.3708,.6458,.8016],[.3647,.6428,.7998],[.3587,.6397,.7979],[.3527,.6366,.7961],[.3467,.6335,.7942],[.3406,.6304,.7924],[.3346,.6274,.7905],[.3286,.6243,.7887],[.3225,.6212,.7869],[.3165,.6181,.785],[.3105,.6151,.7832],[.3045,.612,.7813],[.2984,.6089,.7795],[.2924,.6058,.7776],[.2864,.6028,.7758],[.2803,.5997,.7739],[.2743,.5966,.7721],[.2683,.5935,.7702],[.2623,.5905,.7684],[.2562,.5874,.7666],[.2502,.5843,.7647],[.2442,.5812,.7629],[.2381,.5782,.761],[.2321,.5751,.7592],[.2261,.572,.7573],[.2201,.5689,.7555],[.214,.5659,.7536],[.2078,.5636,.7488],[.2014,.5617,.7421],[.195,.5599,.7355],[.1886,.558,.7289],[.1822,.5562,.7222],[.1758,.5543,.7156],[.1694,.5525,.7089],[.163,.5506,.7023],[.1566,.5488,.6956],[.1502,.5469,.689],[.1438,.5451,.6824],[.1374,.5433,.6757],[.131,.5414,.6691],[.1246,.5396,.6624],[.1182,.5377,.6558],[.1118,.5359,.6491],[.1054,.534,.6425],[.099,.5322,.6358],[.0926,.5303,.6292],[.0862,.5285,.6226],[.0798,.5266,.6159],[.0734,.5248,.6093],[.067,.523,.6026],[.0606,.5211,.596],[.0542,.5193,.5893],[.0478,.5174,.5827],[.0414,.5156,.5761],[.035,.5137,.5694],[.0286,.5119,.5628],[.0222,.51,.5561],[.0158,.5082,.5495],[.0094,.5063,.5428],[.0078,.5039,.5367],[.0076,.5014,.5306],[.0075,.4988,.5246],[.0074,.4962,.5186],[.0073,.4936,.5125],[.0071,.491,.5065],[.007,.4884,.5005],[.0069,.4859,.4945],[.0068,.4833,.4884],[.0066,.4807,.4824],[.0065,.4781,.4764],[.0064,.4755,.4703],[.0063,.4729,.4643],[.0062,.4704,.4583],[.006,.4678,.4523],[.0059,.4652,.4462],[.0058,.4626,.4402],[.0057,.46,.4342],[.0055,.4574,.4281],[.0054,.4549,.4221],[.0053,.4523,.4161],[.0052,.4497,.4101],[.005,.4471,.404],[.0049,.4445,.398],[.0048,.4419,.392],[.0047,.4394,.3859],[.0046,.4368,.3799],[.0044,.4342,.3739],[.0043,.4316,.3679],[.0042,.429,.3618],[.0041,.4264,.3558],[.0039,.4239,.3498],[.0039,.4194,.3453],[.0039,.4148,.3409],[.0039,.4101,.3366],[.0039,.4054,.3323],[.0039,.4007,.328],[.0039,.3961,.3237],[.0039,.3914,.3194],[.0039,.3867,.3151],[.0039,.382,.3108],[.0039,.3774,.3065],[.0039,.3727,.3022],[.0039,.368,.2979],[.0039,.3633,.2936],[.0039,.3587,.2893],[.0039,.354,.285],[.0039,.3493,.2807],[.0039,.3446,.2764],[.0039,.34,.272],[.0039,.3353,.2677],[.0039,.3306,.2634],[.0039,.3259,.2591],[.0039,.3213,.2548],[.0039,.3166,.2505],[.0039,.3119,.2462],[.0039,.3072,.2419],[.0039,.3026,.2376],[.0039,.2979,.2333],[.0039,.2932,.229],[.0039,.2885,.2247],[.0039,.2839,.2204],[.0039,.2792,.2161],[.0039,.2745,.2118]]},PuOr:{interpolate:!0,colors:[[.498,.2314,.0314],[.506,.2358,.0311],[.514,.2403,.0308],[.522,.2448,.0304],[.53,.2492,.0301],[.538,.2537,.0298],[.546,.2581,.0295],[.554,.2626,.0292],[.562,.2671,.0289],[.57,.2715,.0286],[.578,.276,.0283],[.586,.2804,.028],[.594,.2849,.0277],[.602,.2894,.0274],[.61,.2938,.0271],[.618,.2983,.0268],[.626,.3027,.0265],[.634,.3072,.0261],[.642,.3116,.0258],[.65,.3161,.0255],[.658,.3206,.0252],[.666,.325,.0249],[.674,.3295,.0246],[.682,.3339,.0243],[.69,.3384,.024],[.698,.3429,.0237],[.7054,.3483,.0246],[.7123,.3548,.0268],[.7193,.3612,.0289],[.7262,.3677,.0311],[.7331,.3742,.0332],[.74,.3806,.0354],[.7469,.3871,.0375],[.7539,.3935,.0397],[.7608,.4,.0418],[.7677,.4065,.044],[.7746,.4129,.0461],[.7815,.4194,.0483],[.7885,.4258,.0504],[.7954,.4323,.0526],[.8023,.4388,.0547],[.8092,.4452,.0569],[.8161,.4517,.0591],[.8231,.4581,.0612],[.83,.4646,.0634],[.8369,.471,.0655],[.8438,.4775,.0677],[.8507,.484,.0698],[.8577,.4904,.072],[.8646,.4969,.0741],[.8715,.5033,.0763],[.8784,.5098,.0784],[.8829,.5181,.0906],[.8874,.5264,.1027],[.8918,.5347,.1149],[.8963,.543,.127],[.9007,.5513,.1392],[.9052,.5596,.1513],[.9097,.5679,.1635],[.9141,.5762,.1756],[.9186,.5845,.1878],[.923,.5928,.1999],[.9275,.6012,.2121],[.9319,.6095,.2242],[.9364,.6178,.2364],[.9409,.6261,.2485],[.9453,.6344,.2607],[.9498,.6427,.2728],[.9542,.651,.285],[.9587,.6593,.2971],[.9632,.6676,.3093],[.9676,.6759,.3214],[.9721,.6842,.3336],[.9765,.6925,.3457],[.981,.7008,.3579],[.9855,.7091,.37],[.9899,.7174,.3822],[.9922,.7246,.3946],[.9924,.7308,.4074],[.9925,.7369,.4201],[.9927,.7431,.4329],[.9928,.7493,.4457],[.993,.7554,.4584],[.9932,.7616,.4712],[.9933,.7677,.484],[.9935,.7739,.4967],[.9936,.78,.5095],[.9938,.7862,.5223],[.9939,.7923,.535],[.9941,.7985,.5478],[.9942,.8046,.5606],[.9944,.8108,.5733],[.9945,.8169,.5861],[.9947,.8231,.5988],[.9948,.8292,.6116],[.995,.8354,.6244],[.9952,.8415,.6371],[.9953,.8477,.6499],[.9955,.8538,.6627],[.9956,.86,.6754],[.9958,.8661,.6882],[.9959,.8723,.701],[.9961,.8784,.7137],[.995,.882,.7237],[.9939,.8855,.7337],[.9928,.889,.7437],[.9918,.8926,.7537],[.9907,.8961,.7637],[.9896,.8997,.7737],[.9885,.9032,.7837],[.9875,.9067,.7937],[.9864,.9103,.8037],[.9853,.9138,.8137],[.9842,.9173,.8237],[.9832,.9209,.8337],[.9821,.9244,.8437],[.981,.928,.8537],[.9799,.9315,.8637],[.9789,.935,.8737],[.9778,.9386,.8837],[.9767,.9421,.8937],[.9756,.9456,.9037],[.9745,.9492,.9136],[.9735,.9527,.9236],[.9724,.9562,.9336],[.9713,.9598,.9436],[.9702,.9633,.9536],[.9692,.9669,.9636],[.9662,.9664,.9677],[.9615,.9619,.9659],[.9567,.9575,.964],[.9519,.953,.9622],[.9472,.9486,.9603],[.9424,.9441,.9585],[.9376,.9396,.9566],[.9329,.9352,.9548],[.9281,.9307,.9529],[.9233,.9263,.9511],[.9186,.9218,.9493],[.9138,.9173,.9474],[.909,.9129,.9456],[.9043,.9084,.9437],[.8995,.904,.9419],[.8947,.8995,.94],[.89,.895,.9382],[.8852,.8906,.9363],[.8804,.8861,.9345],[.8757,.8817,.9326],[.8709,.8772,.9308],[.8661,.8727,.929],[.8614,.8683,.9271],[.8566,.8638,.9253],[.8518,.8594,.9234],[.8471,.8549,.9216],[.8412,.8477,.9177],[.8354,.8404,.9139],[.8295,.8332,.91],[.8237,.826,.9062],[.8178,.8188,.9023],[.812,.8115,.8985],[.8062,.8043,.8947],[.8003,.7971,.8908],[.7945,.7899,.887],[.7886,.7826,.8831],[.7828,.7754,.8793],[.7769,.7682,.8754],[.7711,.7609,.8716],[.7652,.7537,.8677],[.7594,.7465,.8639],[.7536,.7393,.8601],[.7477,.732,.8562],[.7419,.7248,.8524],[.736,.7176,.8485],[.7302,.7103,.8447],[.7243,.7031,.8408],[.7185,.6959,.837],[.7126,.6887,.8331],[.7068,.6814,.8293],[.701,.6742,.8255],[.6942,.6663,.8206],[.6865,.6577,.8148],[.6788,.6491,.8089],[.6711,.6404,.8031],[.6634,.6318,.7972],[.6557,.6232,.7914],[.6481,.6146,.7855],[.6404,.606,.7797],[.6327,.5974,.7739],[.625,.5888,.768],[.6173,.5802,.7622],[.6096,.5715,.7563],[.6019,.5629,.7505],[.5942,.5543,.7446],[.5865,.5457,.7388],[.5789,.5371,.7329],[.5712,.5285,.7271],[.5635,.5199,.7213],[.5558,.5113,.7154],[.5481,.5027,.7096],[.5404,.494,.7037],[.5327,.4854,.6979],[.525,.4768,.692],[.5173,.4682,.6862],[.5097,.4596,.6804],[.502,.451,.6745],[.4952,.4393,.669],[.4884,.4276,.6634],[.4817,.4159,.6579],[.4749,.4042,.6524],[.4681,.3925,.6468],[.4614,.3809,.6413],[.4546,.3692,.6358],[.4478,.3575,.6302],[.4411,.3458,.6247],[.4343,.3341,.6191],[.4275,.3224,.6136],[.4208,.3107,.6081],[.414,.299,.6025],[.4072,.2874,.597],[.4005,.2757,.5915],[.3937,.264,.5859],[.3869,.2523,.5804],[.3802,.2406,.5749],[.3734,.2289,.5693],[.3666,.2172,.5638],[.3599,.2055,.5582],[.3531,.1938,.5527],[.3463,.1822,.5472],[.3396,.1705,.5416],[.3328,.1588,.5361],[.3264,.1499,.5286],[.3204,.1439,.5193],[.3144,.1379,.5099],[.3084,.1319,.5005],[.3024,.126,.4911],[.2964,.12,.4817],[.2904,.114,.4724],[.2844,.108,.463],[.2784,.102,.4536],[.2724,.096,.4442],[.2664,.09,.4348],[.2604,.084,.4255],[.2544,.078,.4161],[.2484,.072,.4067],[.2424,.066,.3973],[.2364,.06,.3879],[.2304,.054,.3785],[.2245,.048,.3692],[.2185,.042,.3598],[.2125,.036,.3504],[.2065,.03,.341],[.2005,.024,.3316],[.1945,.018,.3223],[.1885,.012,.3129],[.1825,.006,.3035],[.1765,0,.2941]]},PuRd:{interpolate:!0,colors:[[.9686,.9569,.9765],[.9667,.9545,.9752],[.9647,.9522,.974],[.9627,.9499,.9728],[.9608,.9475,.9715],[.9588,.9452,.9703],[.9568,.9428,.9691],[.9548,.9405,.9679],[.9529,.9382,.9666],[.9509,.9358,.9654],[.9489,.9335,.9642],[.947,.9311,.9629],[.945,.9288,.9617],[.943,.9265,.9605],[.9411,.9241,.9592],[.9391,.9218,.958],[.9371,.9195,.9568],[.9352,.9171,.9556],[.9332,.9148,.9543],[.9312,.9124,.9531],[.9293,.9101,.9519],[.9273,.9078,.9506],[.9253,.9054,.9494],[.9234,.9031,.9482],[.9214,.9008,.9469],[.9194,.8984,.9457],[.9174,.8961,.9445],[.9155,.8937,.9433],[.9135,.8914,.942],[.9115,.8891,.9408],[.9096,.8867,.9396],[.9076,.8844,.9383],[.9056,.8817,.9369],[.9033,.8768,.9343],[.9009,.8719,.9318],[.8986,.867,.9292],[.8962,.8621,.9266],[.8939,.8571,.924],[.8916,.8522,.9214],[.8892,.8473,.9188],[.8869,.8424,.9163],[.8846,.8374,.9137],[.8822,.8325,.9111],[.8799,.8276,.9085],[.8775,.8227,.9059],[.8752,.8178,.9033],[.8729,.8128,.9008],[.8705,.8079,.8982],[.8682,.803,.8956],[.8659,.7981,.893],[.8635,.7932,.8904],[.8612,.7882,.8878],[.8588,.7833,.8853],[.8565,.7784,.8827],[.8542,.7735,.8801],[.8518,.7686,.8775],[.8495,.7636,.8749],[.8472,.7587,.8723],[.8448,.7538,.8698],[.8425,.7489,.8672],[.8401,.7439,.8646],[.8378,.739,.862],[.8355,.7341,.8594],[.8331,.7292,.8568],[.831,.7244,.8543],[.8297,.7198,.852],[.8283,.7152,.8496],[.827,.7107,.8473],[.8256,.7061,.845],[.8243,.7016,.8426],[.8229,.697,.8403],[.8216,.6925,.838],[.8202,.6879,.8356],[.8189,.6834,.8333],[.8175,.6788,.8309],[.8161,.6743,.8286],[.8148,.6697,.8263],[.8134,.6652,.8239],[.8121,.6606,.8216],[.8107,.6561,.8193],[.8094,.6515,.8169],[.808,.647,.8146],[.8067,.6424,.8122],[.8053,.6379,.8099],[.804,.6333,.8076],[.8026,.6288,.8052],[.8013,.6242,.8029],[.7999,.6197,.8006],[.7986,.6151,.7982],[.7972,.6105,.7959],[.7958,.606,.7935],[.7945,.6014,.7912],[.7931,.5969,.7889],[.7918,.5923,.7865],[.7904,.5878,.7842],[.7891,.5832,.7819],[.7893,.5782,.7793],[.792,.5724,.7765],[.7947,.5667,.7737],[.7974,.5609,.7708],[.8001,.5551,.768],[.8028,.5493,.7652],[.8055,.5435,.7624],[.8082,.5377,.7595],[.8109,.532,.7567],[.8136,.5262,.7539],[.8163,.5204,.751],[.819,.5146,.7482],[.8217,.5088,.7454],[.8244,.5031,.7425],[.8271,.4973,.7397],[.8299,.4915,.7369],[.8326,.4857,.7341],[.8353,.4799,.7312],[.838,.4741,.7284],[.8407,.4684,.7256],[.8434,.4626,.7227],[.8461,.4568,.7199],[.8488,.451,.7171],[.8515,.4452,.7142],[.8542,.4394,.7114],[.8569,.4337,.7086],[.8596,.4279,.7058],[.8623,.4221,.7029],[.865,.4163,.7001],[.8677,.4105,.6973],[.8704,.4048,.6944],[.8732,.399,.6916],[.875,.3924,.6879],[.876,.385,.6832],[.877,.3776,.6785],[.878,.3702,.6738],[.8789,.3629,.6692],[.8799,.3555,.6645],[.8809,.3481,.6598],[.8819,.3407,.6551],[.8829,.3333,.6505],[.8839,.326,.6458],[.8848,.3186,.6411],[.8858,.3112,.6364],[.8868,.3038,.6318],[.8878,.2964,.6271],[.8888,.289,.6224],[.8898,.2817,.6177],[.8907,.2743,.6131],[.8917,.2669,.6084],[.8927,.2595,.6037],[.8937,.2521,.599],[.8947,.2448,.5944],[.8957,.2374,.5897],[.8967,.23,.585],[.8976,.2226,.5803],[.8986,.2152,.5757],[.8996,.2078,.571],[.9006,.2005,.5663],[.9016,.1931,.5616],[.9026,.1857,.557],[.9035,.1783,.5523],[.9045,.1709,.5476],[.9055,.1636,.5429],[.904,.159,.5372],[.9009,.1562,.5308],[.8978,.1534,.5244],[.8947,.1505,.518],[.8917,.1477,.5116],[.8886,.1449,.5052],[.8855,.142,.4988],[.8824,.1392,.4924],[.8794,.1364,.486],[.8763,.1335,.4796],[.8732,.1307,.4732],[.8701,.1279,.4668],[.8671,.1251,.4604],[.864,.1222,.454],[.8609,.1194,.4476],[.8578,.1166,.4412],[.8547,.1137,.4348],[.8517,.1109,.4284],[.8486,.1081,.422],[.8455,.1053,.4156],[.8424,.1024,.4092],[.8394,.0996,.4028],[.8363,.0968,.3964],[.8332,.0939,.39],[.8301,.0911,.3836],[.8271,.0883,.3772],[.824,.0854,.3708],[.8209,.0826,.3644],[.8178,.0798,.358],[.8148,.077,.3516],[.8117,.0741,.3453],[.8086,.0713,.3389],[.8029,.0689,.3355],[.7962,.0667,.3332],[.7896,.0645,.3308],[.7829,.0623,.3285],[.7763,.0601,.3262],[.7696,.0579,.3238],[.763,.0556,.3215],[.7564,.0534,.3191],[.7497,.0512,.3168],[.7431,.049,.3145],[.7364,.0468,.3121],[.7298,.0446,.3098],[.7231,.0424,.3075],[.7165,.0401,.3051],[.7099,.0379,.3028],[.7032,.0357,.3004],[.6966,.0335,.2981],[.6899,.0313,.2958],[.6833,.0291,.2934],[.6766,.0269,.2911],[.67,.0246,.2888],[.6633,.0224,.2864],[.6567,.0202,.2841],[.6501,.018,.2817],[.6434,.0158,.2794],[.6368,.0136,.2771],[.6301,.0113,.2747],[.6235,.0091,.2724],[.6168,.0069,.27],[.6102,.0047,.2677],[.6036,.0025,.2654],[.5969,3e-4,.263],[.5908,0,.2589],[.5848,0,.2544],[.5787,0,.25],[.5727,0,.2456],[.5667,0,.2412],[.5607,0,.2367],[.5546,0,.2323],[.5486,0,.2279],[.5426,0,.2234],[.5365,0,.219],[.5305,0,.2146],[.5245,0,.2101],[.5185,0,.2057],[.5124,0,.2013],[.5064,0,.1969],[.5004,0,.1924],[.4943,0,.188],[.4883,0,.1836],[.4823,0,.1791],[.4763,0,.1747],[.4702,0,.1703],[.4642,0,.1659],[.4582,0,.1614],[.4521,0,.157],[.4461,0,.1526],[.4401,0,.1481],[.4341,0,.1437],[.428,0,.1393],[.422,0,.1349],[.416,0,.1304],[.41,0,.126],[.4039,0,.1216]]},Purples:{interpolate:!0,colors:[[.9882,.9843,.9922],[.9866,.9826,.9912],[.985,.9809,.9902],[.9834,.9791,.9892],[.9818,.9774,.9882],[.9802,.9757,.9872],[.9786,.974,.9863],[.977,.9723,.9853],[.9754,.9705,.9843],[.9738,.9688,.9833],[.9722,.9671,.9823],[.9706,.9654,.9813],[.969,.9636,.9803],[.9674,.9619,.9794],[.9658,.9602,.9784],[.9642,.9585,.9774],[.9626,.9568,.9764],[.961,.955,.9754],[.9594,.9533,.9744],[.9578,.9516,.9735],[.9562,.9499,.9725],[.9546,.9481,.9715],[.953,.9464,.9705],[.9514,.9447,.9695],[.9499,.943,.9685],[.9483,.9413,.9676],[.9467,.9395,.9666],[.9451,.9378,.9656],[.9435,.9361,.9646],[.9419,.9344,.9636],[.9403,.9326,.9626],[.9387,.9309,.9616],[.9369,.9291,.9606],[.9343,.9268,.9594],[.9318,.9244,.9582],[.9292,.9221,.9569],[.9266,.9198,.9557],[.924,.9174,.9545],[.9214,.9151,.9532],[.9188,.9128,.952],[.9163,.9104,.9508],[.9137,.9081,.9496],[.9111,.9057,.9483],[.9085,.9034,.9471],[.9059,.9011,.9459],[.9033,.8987,.9446],[.9008,.8964,.9434],[.8982,.8941,.9422],[.8956,.8917,.9409],[.893,.8894,.9397],[.8904,.887,.9385],[.8878,.8847,.9373],[.8853,.8824,.936],[.8827,.88,.9348],[.8801,.8777,.9336],[.8775,.8754,.9323],[.8749,.873,.9311],[.8723,.8707,.9299],[.8698,.8683,.9286],[.8672,.866,.9274],[.8646,.8637,.9262],[.862,.8613,.925],[.8594,.859,.9237],[.8568,.8567,.9225],[.854,.854,.9211],[.8503,.8504,.9193],[.8466,.8469,.9174],[.8429,.8433,.9156],[.8392,.8397,.9137],[.8355,.8362,.9119],[.8318,.8326,.91],[.8281,.829,.9082],[.8245,.8255,.9063],[.8208,.8219,.9045],[.8171,.8183,.9027],[.8134,.8148,.9008],[.8097,.8112,.899],[.806,.8076,.8971],[.8023,.8041,.8953],[.7986,.8005,.8934],[.7949,.7969,.8916],[.7912,.7934,.8897],[.7875,.7898,.8879],[.7839,.7862,.886],[.7802,.7827,.8842],[.7765,.7791,.8824],[.7728,.7755,.8805],[.7691,.7719,.8787],[.7654,.7684,.8768],[.7617,.7648,.875],[.758,.7612,.8731],[.7543,.7577,.8713],[.7506,.7541,.8694],[.7469,.7505,.8676],[.7433,.747,.8657],[.7396,.7434,.8639],[.7359,.7396,.8618],[.7322,.7353,.8594],[.7285,.7309,.8569],[.7248,.7266,.8544],[.7211,.7223,.852],[.7174,.718,.8495],[.7137,.7137,.8471],[.71,.7094,.8446],[.7063,.7051,.8421],[.7027,.7008,.8397],[.699,.6965,.8372],[.6953,.6922,.8348],[.6916,.6879,.8323],[.6879,.6836,.8298],[.6842,.6793,.8274],[.6805,.675,.8249],[.6768,.6707,.8225],[.6731,.6664,.82],[.6694,.6621,.8175],[.6657,.6577,.8151],[.6621,.6534,.8126],[.6584,.6491,.8101],[.6547,.6448,.8077],[.651,.6405,.8052],[.6473,.6362,.8028],[.6436,.6319,.8003],[.6399,.6276,.7978],[.6362,.6233,.7954],[.6325,.619,.7929],[.6288,.6147,.7905],[.6251,.6104,.788],[.6215,.6061,.7855],[.6178,.6021,.7835],[.6141,.5986,.7817],[.6104,.595,.78],[.6067,.5914,.7783],[.603,.5879,.7766],[.5993,.5843,.7748],[.5956,.5807,.7731],[.5919,.5772,.7714],[.5882,.5736,.7697],[.5845,.57,.768],[.5809,.5665,.7662],[.5772,.5629,.7645],[.5735,.5593,.7628],[.5698,.5558,.7611],[.5661,.5522,.7593],[.5624,.5486,.7576],[.5587,.5451,.7559],[.555,.5415,.7542],[.5513,.5379,.7524],[.5476,.5343,.7507],[.5439,.5308,.749],[.5403,.5272,.7473],[.5366,.5236,.7456],[.5329,.5201,.7438],[.5292,.5165,.7421],[.5255,.5129,.7404],[.5218,.5094,.7387],[.5181,.5058,.7369],[.5144,.5022,.7352],[.5107,.4987,.7335],[.507,.4951,.7318],[.5033,.4915,.7301],[.5003,.4868,.7276],[.4976,.4814,.7248],[.4949,.476,.722],[.4921,.4706,.7192],[.4894,.4652,.7163],[.4867,.4597,.7135],[.484,.4543,.7107],[.4813,.4489,.7078],[.4786,.4435,.705],[.4759,.4381,.7022],[.4732,.4327,.6993],[.4705,.4273,.6965],[.4678,.4219,.6937],[.4651,.4164,.6909],[.4624,.411,.688],[.4597,.4056,.6852],[.457,.4002,.6824],[.4543,.3948,.6795],[.4515,.3894,.6767],[.4488,.384,.6739],[.4461,.3785,.671],[.4434,.3731,.6682],[.4407,.3677,.6654],[.438,.3623,.6626],[.4353,.3569,.6597],[.4326,.3515,.6569],[.4299,.3461,.6541],[.4272,.3407,.6512],[.4245,.3352,.6484],[.4218,.3298,.6456],[.4191,.3244,.6428],[.4164,.319,.6399],[.4137,.3138,.6374],[.4109,.3086,.6349],[.4082,.3034,.6324],[.4055,.2983,.63],[.4028,.2931,.6275],[.4001,.2879,.6251],[.3974,.2828,.6226],[.3947,.2776,.6201],[.392,.2724,.6177],[.3893,.2673,.6152],[.3866,.2621,.6128],[.3839,.2569,.6103],[.3812,.2518,.6078],[.3785,.2466,.6054],[.3758,.2414,.6029],[.3731,.2363,.6005],[.3703,.2311,.598],[.3676,.2259,.5955],[.3649,.2208,.5931],[.3622,.2156,.5906],[.3595,.2104,.5882],[.3568,.2053,.5857],[.3541,.2001,.5832],[.3514,.1949,.5808],[.3487,.1898,.5783],[.346,.1846,.5759],[.3433,.1794,.5734],[.3406,.1743,.5709],[.3379,.1691,.5685],[.3352,.1639,.566],[.3325,.1588,.5636],[.3298,.1536,.5611],[.3272,.1487,.5588],[.3246,.1439,.5566],[.322,.1391,.5544],[.3194,.1343,.5522],[.3168,.1296,.55],[.3142,.1248,.5478],[.3116,.12,.5456],[.3091,.1152,.5433],[.3065,.1104,.5411],[.3039,.1056,.5389],[.3013,.1008,.5367],[.2987,.096,.5345],[.2961,.0912,.5323],[.2936,.0864,.5301],[.291,.0816,.5278],[.2884,.0768,.5256],[.2858,.072,.5234],[.2832,.0672,.5212],[.2806,.0624,.519],[.2781,.0576,.5168],[.2755,.0528,.5146],[.2729,.048,.5123],[.2703,.0432,.5101],[.2677,.0384,.5079],[.2651,.0336,.5057],[.2626,.0288,.5035],[.26,.024,.5013],[.2574,.0192,.4991],[.2548,.0144,.4968],[.2522,.0096,.4946],[.2496,.0048,.4924],[.2471,0,.4902]]},RdBu:{interpolate:!0,colors:[[.4039,0,.1216],[.4155,.0037,.1234],[.427,.0074,.1253],[.4385,.0111,.1271],[.4501,.0148,.129],[.4616,.0185,.1308],[.4731,.0221,.1326],[.4847,.0258,.1345],[.4962,.0295,.1363],[.5077,.0332,.1382],[.5193,.0369,.14],[.5308,.0406,.1419],[.5423,.0443,.1437],[.5539,.048,.1456],[.5654,.0517,.1474],[.5769,.0554,.1493],[.5885,.0591,.1511],[.6,.0627,.1529],[.6115,.0664,.1548],[.6231,.0701,.1566],[.6346,.0738,.1585],[.6461,.0775,.1603],[.6577,.0812,.1622],[.6692,.0849,.164],[.6807,.0886,.1659],[.6923,.0923,.1677],[.7008,.0997,.1712],[.7063,.1107,.1765],[.7119,.1218,.1817],[.7174,.1329,.1869],[.723,.1439,.1922],[.7285,.155,.1974],[.734,.1661,.2026],[.7396,.1772,.2078],[.7451,.1882,.2131],[.7506,.1993,.2183],[.7562,.2104,.2235],[.7617,.2215,.2288],[.7672,.2325,.234],[.7728,.2436,.2392],[.7783,.2547,.2444],[.7839,.2657,.2497],[.7894,.2768,.2549],[.7949,.2879,.2601],[.8005,.299,.2654],[.806,.31,.2706],[.8115,.3211,.2758],[.8171,.3322,.281],[.8226,.3433,.2863],[.8281,.3543,.2915],[.8337,.3654,.2967],[.8392,.3765,.302],[.8438,.3871,.3101],[.8484,.3977,.3183],[.8531,.4083,.3264],[.8577,.4189,.3346],[.8623,.4295,.3427],[.8669,.4401,.3509],[.8715,.4507,.359],[.8761,.4614,.3672],[.8807,.472,.3753],[.8854,.4826,.3835],[.89,.4932,.3916],[.8946,.5038,.3998],[.8992,.5144,.4079],[.9038,.525,.4161],[.9084,.5356,.4242],[.913,.5463,.4324],[.9176,.5569,.4405],[.9223,.5675,.4487],[.9269,.5781,.4568],[.9315,.5887,.465],[.9361,.5993,.4731],[.9407,.6099,.4813],[.9453,.6205,.4894],[.9499,.6311,.4976],[.9546,.6418,.5057],[.9576,.6512,.5151],[.9589,.6595,.5257],[.9603,.6678,.5363],[.9617,.6761,.5469],[.9631,.6844,.5576],[.9645,.6927,.5682],[.9659,.701,.5788],[.9672,.7093,.5894],[.9686,.7176,.6],[.97,.726,.6106],[.9714,.7343,.6212],[.9728,.7426,.6318],[.9742,.7509,.6424],[.9755,.7592,.6531],[.9769,.7675,.6637],[.9783,.7758,.6743],[.9797,.7841,.6849],[.9811,.7924,.6955],[.9825,.8007,.7061],[.9839,.809,.7167],[.9852,.8173,.7273],[.9866,.8256,.7379],[.988,.8339,.7486],[.9894,.8422,.7592],[.9908,.8505,.7698],[.9922,.8588,.7804],[.9912,.8631,.7878],[.9903,.8674,.7952],[.9894,.8717,.8025],[.9885,.876,.8099],[.9875,.8804,.8173],[.9866,.8847,.8247],[.9857,.889,.8321],[.9848,.8933,.8394],[.9839,.8976,.8468],[.9829,.9019,.8542],[.982,.9062,.8616],[.9811,.9105,.869],[.9802,.9148,.8764],[.9792,.9191,.8837],[.9783,.9234,.8911],[.9774,.9277,.8985],[.9765,.932,.9059],[.9755,.9363,.9133],[.9746,.9406,.9206],[.9737,.9449,.928],[.9728,.9493,.9354],[.9719,.9536,.9428],[.9709,.9579,.9502],[.97,.9622,.9576],[.9691,.9665,.9649],[.9657,.9672,.9681],[.9599,.9645,.967],[.954,.9617,.9659],[.9482,.9589,.9649],[.9423,.9562,.9638],[.9365,.9534,.9627],[.9306,.9506,.9616],[.9248,.9479,.9606],[.919,.9451,.9595],[.9131,.9423,.9584],[.9073,.9396,.9573],[.9014,.9368,.9562],[.8956,.934,.9552],[.8897,.9313,.9541],[.8839,.9285,.953],[.878,.9257,.9519],[.8722,.923,.9509],[.8664,.9202,.9498],[.8605,.9174,.9487],[.8547,.9146,.9476],[.8488,.9119,.9466],[.843,.9091,.9455],[.8371,.9063,.9444],[.8313,.9036,.9433],[.8255,.9008,.9423],[.8196,.898,.9412],[.8099,.8931,.9384],[.8002,.8882,.9356],[.7905,.8833,.9329],[.7809,.8784,.9301],[.7712,.8734,.9273],[.7615,.8685,.9246],[.7518,.8636,.9218],[.7421,.8587,.919],[.7324,.8537,.9163],[.7227,.8488,.9135],[.713,.8439,.9107],[.7033,.839,.908],[.6937,.8341,.9052],[.684,.8291,.9024],[.6743,.8242,.8997],[.6646,.8193,.8969],[.6549,.8144,.8941],[.6452,.8095,.8913],[.6355,.8045,.8886],[.6258,.7996,.8858],[.6161,.7947,.883],[.6065,.7898,.8803],[.5968,.7849,.8775],[.5871,.7799,.8747],[.5774,.775,.872],[.5665,.7687,.8685],[.5543,.761,.8644],[.5422,.7533,.8602],[.53,.7456,.8561],[.5179,.7379,.8519],[.5057,.7303,.8478],[.4936,.7226,.8436],[.4814,.7149,.8394],[.4693,.7072,.8353],[.4571,.6995,.8311],[.445,.6918,.827],[.4328,.6841,.8228],[.4207,.6764,.8187],[.4085,.6687,.8145],[.3964,.6611,.8104],[.3842,.6534,.8062],[.3721,.6457,.8021],[.3599,.638,.7979],[.3478,.6303,.7938],[.3356,.6226,.7896],[.3235,.6149,.7855],[.3113,.6072,.7813],[.2992,.5995,.7772],[.287,.5918,.773],[.2749,.5842,.7689],[.2627,.5765,.7647],[.2575,.5696,.7612],[.2523,.5626,.7576],[.2471,.5557,.7541],[.2418,.5488,.7506],[.2366,.5419,.747],[.2314,.5349,.7435],[.2261,.528,.7399],[.2209,.5211,.7364],[.2157,.5142,.7329],[.2105,.5073,.7293],[.2052,.5003,.7258],[.2,.4934,.7223],[.1948,.4865,.7187],[.1895,.4796,.7152],[.1843,.4727,.7116],[.1791,.4657,.7081],[.1739,.4588,.7046],[.1686,.4519,.701],[.1634,.445,.6975],[.1582,.4381,.694],[.1529,.4311,.6904],[.1477,.4242,.6869],[.1425,.4173,.6834],[.1373,.4104,.6798],[.132,.4035,.6763],[.1273,.3958,.6687],[.123,.3875,.6572],[.1186,.3792,.6457],[.1143,.3709,.6341],[.11,.3626,.6226],[.1057,.3543,.6111],[.1014,.346,.5995],[.0971,.3377,.588],[.0928,.3294,.5765],[.0885,.3211,.5649],[.0842,.3128,.5534],[.0799,.3045,.5419],[.0756,.2962,.5303],[.0713,.2879,.5188],[.067,.2796,.5073],[.0627,.2713,.4957],[.0584,.263,.4842],[.0541,.2547,.4727],[.0498,.2464,.4611],[.0454,.2381,.4496],[.0411,.2298,.4381],[.0368,.2215,.4265],[.0325,.2131,.415],[.0282,.2048,.4035],[.0239,.1965,.3919],[.0196,.1882,.3804]]},RdGy:{interpolate:!0,colors:[[.4039,0,.1216],[.4155,.0037,.1234],[.427,.0074,.1253],[.4385,.0111,.1271],[.4501,.0148,.129],[.4616,.0185,.1308],[.4731,.0221,.1326],[.4847,.0258,.1345],[.4962,.0295,.1363],[.5077,.0332,.1382],[.5193,.0369,.14],[.5308,.0406,.1419],[.5423,.0443,.1437],[.5539,.048,.1456],[.5654,.0517,.1474],[.5769,.0554,.1493],[.5885,.0591,.1511],[.6,.0627,.1529],[.6115,.0664,.1548],[.6231,.0701,.1566],[.6346,.0738,.1585],[.6461,.0775,.1603],[.6577,.0812,.1622],[.6692,.0849,.164],[.6807,.0886,.1659],[.6923,.0923,.1677],[.7008,.0997,.1712],[.7063,.1107,.1765],[.7119,.1218,.1817],[.7174,.1329,.1869],[.723,.1439,.1922],[.7285,.155,.1974],[.734,.1661,.2026],[.7396,.1772,.2078],[.7451,.1882,.2131],[.7506,.1993,.2183],[.7562,.2104,.2235],[.7617,.2215,.2288],[.7672,.2325,.234],[.7728,.2436,.2392],[.7783,.2547,.2444],[.7839,.2657,.2497],[.7894,.2768,.2549],[.7949,.2879,.2601],[.8005,.299,.2654],[.806,.31,.2706],[.8115,.3211,.2758],[.8171,.3322,.281],[.8226,.3433,.2863],[.8281,.3543,.2915],[.8337,.3654,.2967],[.8392,.3765,.302],[.8438,.3871,.3101],[.8484,.3977,.3183],[.8531,.4083,.3264],[.8577,.4189,.3346],[.8623,.4295,.3427],[.8669,.4401,.3509],[.8715,.4507,.359],[.8761,.4614,.3672],[.8807,.472,.3753],[.8854,.4826,.3835],[.89,.4932,.3916],[.8946,.5038,.3998],[.8992,.5144,.4079],[.9038,.525,.4161],[.9084,.5356,.4242],[.913,.5463,.4324],[.9176,.5569,.4405],[.9223,.5675,.4487],[.9269,.5781,.4568],[.9315,.5887,.465],[.9361,.5993,.4731],[.9407,.6099,.4813],[.9453,.6205,.4894],[.9499,.6311,.4976],[.9546,.6418,.5057],[.9576,.6512,.5151],[.9589,.6595,.5257],[.9603,.6678,.5363],[.9617,.6761,.5469],[.9631,.6844,.5576],[.9645,.6927,.5682],[.9659,.701,.5788],[.9672,.7093,.5894],[.9686,.7176,.6],[.97,.726,.6106],[.9714,.7343,.6212],[.9728,.7426,.6318],[.9742,.7509,.6424],[.9755,.7592,.6531],[.9769,.7675,.6637],[.9783,.7758,.6743],[.9797,.7841,.6849],[.9811,.7924,.6955],[.9825,.8007,.7061],[.9839,.809,.7167],[.9852,.8173,.7273],[.9866,.8256,.7379],[.988,.8339,.7486],[.9894,.8422,.7592],[.9908,.8505,.7698],[.9922,.8588,.7804],[.9925,.8644,.789],[.9928,.8699,.7976],[.9931,.8754,.8062],[.9934,.881,.8148],[.9937,.8865,.8235],[.994,.892,.8321],[.9943,.8976,.8407],[.9946,.9031,.8493],[.9949,.9087,.8579],[.9952,.9142,.8665],[.9955,.9197,.8751],[.9958,.9253,.8837],[.9962,.9308,.8923],[.9965,.9363,.901],[.9968,.9419,.9096],[.9971,.9474,.9182],[.9974,.9529,.9268],[.9977,.9585,.9354],[.998,.964,.944],[.9983,.9696,.9526],[.9986,.9751,.9612],[.9989,.9806,.9699],[.9992,.9862,.9785],[.9995,.9917,.9871],[.9998,.9972,.9957],[.9976,.9976,.9976],[.9928,.9928,.9928],[.9881,.9881,.9881],[.9833,.9833,.9833],[.9785,.9785,.9785],[.9738,.9738,.9738],[.969,.969,.969],[.9642,.9642,.9642],[.9595,.9595,.9595],[.9547,.9547,.9547],[.9499,.9499,.9499],[.9452,.9452,.9452],[.9404,.9404,.9404],[.9356,.9356,.9356],[.9309,.9309,.9309],[.9261,.9261,.9261],[.9213,.9213,.9213],[.9166,.9166,.9166],[.9118,.9118,.9118],[.907,.907,.907],[.9023,.9023,.9023],[.8975,.8975,.8975],[.8927,.8927,.8927],[.888,.888,.888],[.8832,.8832,.8832],[.8784,.8784,.8784],[.8726,.8726,.8726],[.8667,.8667,.8667],[.8609,.8609,.8609],[.8551,.8551,.8551],[.8492,.8492,.8492],[.8434,.8434,.8434],[.8375,.8375,.8375],[.8317,.8317,.8317],[.8258,.8258,.8258],[.82,.82,.82],[.8141,.8141,.8141],[.8083,.8083,.8083],[.8025,.8025,.8025],[.7966,.7966,.7966],[.7908,.7908,.7908],[.7849,.7849,.7849],[.7791,.7791,.7791],[.7732,.7732,.7732],[.7674,.7674,.7674],[.7616,.7616,.7616],[.7557,.7557,.7557],[.7499,.7499,.7499],[.744,.744,.744],[.7382,.7382,.7382],[.7323,.7323,.7323],[.7255,.7255,.7255],[.7176,.7176,.7176],[.7098,.7098,.7098],[.702,.702,.702],[.6941,.6941,.6941],[.6863,.6863,.6863],[.6784,.6784,.6784],[.6706,.6706,.6706],[.6627,.6627,.6627],[.6549,.6549,.6549],[.6471,.6471,.6471],[.6392,.6392,.6392],[.6314,.6314,.6314],[.6235,.6235,.6235],[.6157,.6157,.6157],[.6078,.6078,.6078],[.6,.6,.6],[.5922,.5922,.5922],[.5843,.5843,.5843],[.5765,.5765,.5765],[.5686,.5686,.5686],[.5608,.5608,.5608],[.5529,.5529,.5529],[.5451,.5451,.5451],[.5373,.5373,.5373],[.5294,.5294,.5294],[.5205,.5205,.5205],[.5116,.5116,.5116],[.5027,.5027,.5027],[.4937,.4937,.4937],[.4848,.4848,.4848],[.4759,.4759,.4759],[.467,.467,.467],[.4581,.4581,.4581],[.4491,.4491,.4491],[.4402,.4402,.4402],[.4313,.4313,.4313],[.4224,.4224,.4224],[.4135,.4135,.4135],[.4045,.4045,.4045],[.3956,.3956,.3956],[.3867,.3867,.3867],[.3778,.3778,.3778],[.3689,.3689,.3689],[.3599,.3599,.3599],[.351,.351,.351],[.3421,.3421,.3421],[.3332,.3332,.3332],[.3243,.3243,.3243],[.3153,.3153,.3153],[.3064,.3064,.3064],[.298,.298,.298],[.2902,.2902,.2902],[.2824,.2824,.2824],[.2745,.2745,.2745],[.2667,.2667,.2667],[.2588,.2588,.2588],[.251,.251,.251],[.2431,.2431,.2431],[.2353,.2353,.2353],[.2275,.2275,.2275],[.2196,.2196,.2196],[.2118,.2118,.2118],[.2039,.2039,.2039],[.1961,.1961,.1961],[.1882,.1882,.1882],[.1804,.1804,.1804],[.1725,.1725,.1725],[.1647,.1647,.1647],[.1569,.1569,.1569],[.149,.149,.149],[.1412,.1412,.1412],[.1333,.1333,.1333],[.1255,.1255,.1255],[.1176,.1176,.1176],[.1098,.1098,.1098],[.102,.102,.102]]},RdPu:{interpolate:!0,colors:[[1,.9686,.9529],[.9998,.9658,.9502],[.9995,.963,.9475],[.9993,.9601,.9448],[.999,.9573,.9421],[.9988,.9545,.9394],[.9985,.9516,.9367],[.9983,.9488,.934],[.998,.946,.9313],[.9978,.9432,.9286],[.9975,.9403,.9259],[.9973,.9375,.9232],[.997,.9347,.9205],[.9968,.9318,.9178],[.9966,.929,.915],[.9963,.9262,.9123],[.9961,.9234,.9096],[.9958,.9205,.9069],[.9956,.9177,.9042],[.9953,.9149,.9015],[.9951,.912,.8988],[.9948,.9092,.8961],[.9946,.9064,.8934],[.9943,.9035,.8907],[.9941,.9007,.888],[.9938,.8979,.8853],[.9936,.8951,.8826],[.9934,.8922,.8799],[.9931,.8894,.8772],[.9929,.8866,.8744],[.9926,.8837,.8717],[.9924,.8809,.869],[.9921,.878,.8662],[.992,.8747,.8627],[.9919,.8714,.8591],[.9918,.8681,.8555],[.9916,.8647,.8519],[.9915,.8614,.8484],[.9914,.8581,.8448],[.9913,.8548,.8412],[.9912,.8514,.8377],[.991,.8481,.8341],[.9909,.8448,.8305],[.9908,.8415,.827],[.9907,.8382,.8234],[.9905,.8348,.8198],[.9904,.8315,.8163],[.9903,.8282,.8127],[.9902,.8249,.8091],[.99,.8215,.8056],[.9899,.8182,.802],[.9898,.8149,.7984],[.9897,.8116,.7949],[.9896,.8083,.7913],[.9894,.8049,.7877],[.9893,.8016,.7842],[.9892,.7983,.7806],[.9891,.795,.777],[.9889,.7916,.7735],[.9888,.7883,.7699],[.9887,.785,.7663],[.9886,.7817,.7628],[.9885,.7784,.7592],[.9883,.775,.7556],[.9882,.7714,.7526],[.9879,.7667,.7512],[.9877,.762,.7499],[.9874,.7574,.7485],[.9872,.7527,.7472],[.9869,.748,.7458],[.9867,.7433,.7445],[.9865,.7387,.7431],[.9862,.734,.7418],[.986,.7293,.7404],[.9857,.7246,.7391],[.9855,.72,.7377],[.9852,.7153,.7364],[.985,.7106,.735],[.9847,.7059,.7337],[.9845,.7013,.7323],[.9842,.6966,.7309],[.984,.6919,.7296],[.9837,.6872,.7282],[.9835,.6826,.7269],[.9833,.6779,.7255],[.983,.6732,.7242],[.9828,.6685,.7228],[.9825,.6639,.7215],[.9823,.6592,.7201],[.982,.6545,.7188],[.9818,.6498,.7174],[.9815,.6452,.7161],[.9813,.6405,.7147],[.981,.6358,.7134],[.9808,.6311,.712],[.9805,.6265,.7106],[.9803,.621,.7089],[.9799,.6142,.7064],[.9795,.6075,.704],[.9791,.6007,.7015],[.9788,.5939,.699],[.9784,.5872,.6966],[.978,.5804,.6941],[.9777,.5736,.6917],[.9773,.5669,.6892],[.9769,.5601,.6867],[.9766,.5533,.6843],[.9762,.5466,.6818],[.9758,.5398,.6794],[.9755,.533,.6769],[.9751,.5263,.6744],[.9747,.5195,.672],[.9743,.5127,.6695],[.974,.506,.6671],[.9736,.4992,.6646],[.9732,.4924,.6621],[.9729,.4857,.6597],[.9725,.4789,.6572],[.9721,.4721,.6547],[.9718,.4654,.6523],[.9714,.4586,.6498],[.971,.4518,.6474],[.9707,.4451,.6449],[.9703,.4383,.6424],[.9699,.4315,.64],[.9696,.4248,.6375],[.9692,.418,.6351],[.9688,.4112,.6326],[.967,.4046,.6308],[.9638,.3982,.6295],[.9606,.3918,.6283],[.9574,.3855,.6271],[.9542,.3791,.6258],[.951,.3727,.6246],[.9478,.3663,.6234],[.9446,.3599,.6221],[.9414,.3535,.6209],[.9382,.3471,.6197],[.935,.3407,.6185],[.9318,.3343,.6172],[.9286,.3279,.616],[.9254,.3215,.6148],[.9222,.3151,.6135],[.919,.3087,.6123],[.9158,.3023,.6111],[.9126,.2959,.6098],[.9095,.2895,.6086],[.9063,.2831,.6074],[.9031,.2767,.6062],[.8999,.2703,.6049],[.8967,.2639,.6037],[.8935,.2575,.6025],[.8903,.2511,.6012],[.8871,.2447,.6],[.8839,.2383,.5988],[.8807,.2319,.5975],[.8775,.2255,.5963],[.8743,.2191,.5951],[.8711,.2127,.5938],[.8679,.2063,.5926],[.8631,.2,.5902],[.8573,.1937,.5872],[.8515,.1875,.5841],[.8457,.1812,.581],[.8399,.1749,.5779],[.8341,.1686,.5749],[.8284,.1624,.5718],[.8226,.1561,.5687],[.8168,.1498,.5656],[.811,.1435,.5626],[.8052,.1373,.5595],[.7994,.131,.5564],[.7937,.1247,.5533],[.7879,.1184,.5502],[.7821,.1122,.5472],[.7763,.1059,.5441],[.7705,.0996,.541],[.7648,.0933,.5379],[.759,.0871,.5349],[.7532,.0808,.5318],[.7474,.0745,.5287],[.7416,.0682,.5256],[.7358,.062,.5226],[.7301,.0557,.5195],[.7243,.0494,.5164],[.7185,.0431,.5133],[.7127,.0369,.5103],[.7069,.0306,.5072],[.7011,.0243,.5041],[.6954,.018,.501],[.6896,.0118,.498],[.6838,.0055,.4949],[.6776,.0039,.4935],[.6712,.0039,.4926],[.6648,.0039,.4917],[.6584,.0039,.4909],[.652,.0039,.49],[.6456,.0039,.4892],[.6392,.0039,.4883],[.6328,.0039,.4874],[.6264,.0039,.4866],[.62,.0039,.4857],[.6136,.0039,.4849],[.6072,.0039,.484],[.6008,.0039,.4831],[.5944,.0039,.4823],[.588,.0039,.4814],[.5816,.0039,.4806],[.5752,.0039,.4797],[.5688,.0039,.4788],[.5624,.0039,.478],[.556,.0039,.4771],[.5496,.0039,.4762],[.5432,.0039,.4754],[.5368,.0039,.4745],[.5304,.0039,.4737],[.524,.0039,.4728],[.5176,.0039,.4719],[.5112,.0039,.4711],[.5048,.0039,.4702],[.4984,.0039,.4694],[.492,.0039,.4685],[.4856,.0039,.4676],[.4792,.0039,.4668],[.4732,.0038,.4653],[.4671,.0037,.4637],[.4611,.0036,.4621],[.4551,.0034,.4605],[.449,.0033,.4589],[.443,.0032,.4573],[.437,.0031,.4557],[.431,.003,.4541],[.4249,.0028,.4525],[.4189,.0027,.4509],[.4129,.0026,.4493],[.4068,.0025,.4477],[.4008,.0023,.4461],[.3948,.0022,.4445],[.3888,.0021,.4429],[.3827,.002,.4413],[.3767,.0018,.4397],[.3707,.0017,.4381],[.3646,.0016,.4365],[.3586,.0015,.4349],[.3526,.0014,.4333],[.3466,.0012,.4317],[.3405,.0011,.4301],[.3345,.001,.4285],[.3285,9e-4,.4269],[.3224,7e-4,.4253],[.3164,6e-4,.4237],[.3104,5e-4,.4221],[.3044,4e-4,.4205],[.2983,2e-4,.4189],[.2923,1e-4,.4173],[.2863,0,.4157]]},RdYlBu:{interpolate:!0,colors:[[.6471,0,.149],[.6547,.0074,.1492],[.6624,.0148,.1493],[.6701,.0221,.1495],[.6778,.0295,.1496],[.6855,.0369,.1498],[.6932,.0443,.1499],[.7009,.0517,.1501],[.7086,.0591,.1502],[.7163,.0664,.1504],[.724,.0738,.1506],[.7316,.0812,.1507],[.7393,.0886,.1509],[.747,.096,.151],[.7547,.1033,.1512],[.7624,.1107,.1513],[.7701,.1181,.1515],[.7778,.1255,.1516],[.7855,.1329,.1518],[.7932,.1403,.1519],[.8008,.1476,.1521],[.8085,.155,.1522],[.8162,.1624,.1524],[.8239,.1698,.1526],[.8316,.1772,.1527],[.8393,.1845,.1529],[.8454,.1929,.1551],[.8498,.2023,.1594],[.8543,.2117,.1637],[.8587,.2211,.168],[.8632,.2304,.1723],[.8677,.2398,.1766],[.8721,.2492,.1809],[.8766,.2586,.1852],[.881,.268,.1895],[.8855,.2774,.1938],[.89,.2867,.1982],[.8944,.2961,.2025],[.8989,.3055,.2068],[.9033,.3149,.2111],[.9078,.3243,.2154],[.9123,.3336,.2197],[.9167,.343,.224],[.9212,.3524,.2283],[.9256,.3618,.2326],[.9301,.3712,.2369],[.9346,.3805,.2412],[.939,.3899,.2455],[.9435,.3993,.2498],[.9479,.4087,.2541],[.9524,.4181,.2584],[.9569,.4275,.2627],[.9582,.4374,.2674],[.9596,.4474,.272],[.961,.4574,.2766],[.9624,.4674,.2812],[.9638,.4774,.2858],[.9652,.4874,.2904],[.9666,.4974,.295],[.9679,.5074,.2997],[.9693,.5174,.3043],[.9707,.5274,.3089],[.9721,.5374,.3135],[.9735,.5474,.3181],[.9749,.5574,.3227],[.9762,.5674,.3273],[.9776,.5774,.3319],[.979,.5874,.3366],[.9804,.5974,.3412],[.9818,.6074,.3458],[.9832,.6174,.3504],[.9845,.6274,.355],[.9859,.6374,.3596],[.9873,.6474,.3642],[.9887,.6574,.3689],[.9901,.6674,.3735],[.9915,.6774,.3781],[.9922,.6862,.384],[.9924,.6939,.3912],[.9925,.7016,.3985],[.9927,.7093,.4057],[.9928,.717,.4129],[.993,.7246,.4201],[.9932,.7323,.4274],[.9933,.74,.4346],[.9935,.7477,.4418],[.9936,.7554,.4491],[.9938,.7631,.4563],[.9939,.7708,.4635],[.9941,.7785,.4707],[.9942,.7862,.478],[.9944,.7938,.4852],[.9945,.8015,.4924],[.9947,.8092,.4997],[.9948,.8169,.5069],[.995,.8246,.5141],[.9952,.8323,.5213],[.9953,.84,.5286],[.9955,.8477,.5358],[.9956,.8554,.543],[.9958,.8631,.5502],[.9959,.8707,.5575],[.9961,.8784,.5647],[.9962,.8832,.5719],[.9964,.888,.5792],[.9965,.8927,.5864],[.9967,.8975,.5936],[.9968,.9023,.6008],[.997,.907,.6081],[.9972,.9118,.6153],[.9973,.9166,.6225],[.9975,.9213,.6298],[.9976,.9261,.637],[.9978,.9309,.6442],[.9979,.9356,.6514],[.9981,.9404,.6587],[.9982,.9452,.6659],[.9984,.9499,.6731],[.9985,.9547,.6804],[.9987,.9595,.6876],[.9988,.9642,.6948],[.999,.969,.702],[.9992,.9738,.7093],[.9993,.9785,.7165],[.9995,.9833,.7237],[.9996,.9881,.7309],[.9998,.9928,.7382],[.9999,.9976,.7454],[.9976,.9991,.7534],[.9928,.9972,.7622],[.9881,.9954,.7709],[.9833,.9935,.7797],[.9785,.9917,.7885],[.9738,.9899,.7972],[.969,.988,.806],[.9642,.9862,.8148],[.9595,.9843,.8235],[.9547,.9825,.8323],[.9499,.9806,.8411],[.9452,.9788,.8498],[.9404,.9769,.8586],[.9356,.9751,.8674],[.9309,.9732,.8761],[.9261,.9714,.8849],[.9213,.9696,.8937],[.9166,.9677,.9024],[.9118,.9659,.9112],[.907,.964,.92],[.9023,.9622,.9287],[.8975,.9603,.9375],[.8927,.9585,.9463],[.888,.9566,.955],[.8832,.9548,.9638],[.8784,.9529,.9725],[.8703,.9489,.9702],[.8621,.9449,.9679],[.854,.9409,.9656],[.8458,.9369,.9633],[.8377,.9329,.961],[.8295,.929,.9587],[.8214,.925,.9564],[.8132,.921,.9541],[.8051,.917,.9518],[.7969,.913,.9495],[.7888,.909,.9472],[.7806,.905,.9449],[.7725,.901,.9426],[.7643,.897,.9403],[.7562,.893,.9379],[.748,.889,.9356],[.7399,.885,.9333],[.7317,.881,.931],[.7236,.877,.9287],[.7154,.873,.9264],[.7073,.869,.9241],[.6991,.865,.9218],[.691,.861,.9195],[.6828,.857,.9172],[.6747,.853,.9149],[.6664,.8476,.9119],[.6579,.8408,.9082],[.6494,.8341,.9045],[.641,.8273,.9008],[.6325,.8205,.8971],[.6241,.8138,.8934],[.6156,.807,.8897],[.6072,.8002,.886],[.5987,.7935,.8824],[.5902,.7867,.8787],[.5818,.7799,.875],[.5733,.7732,.8713],[.5649,.7664,.8676],[.5564,.7596,.8639],[.5479,.7529,.8602],[.5395,.7461,.8565],[.531,.7393,.8528],[.5226,.7326,.8491],[.5141,.7258,.8454],[.5057,.719,.8418],[.4972,.7123,.8381],[.4887,.7055,.8344],[.4803,.6987,.8307],[.4718,.692,.827],[.4634,.6852,.8233],[.4549,.6784,.8196],[.4477,.6698,.8151],[.4404,.6612,.8107],[.4332,.6526,.8062],[.426,.644,.8018],[.4188,.6354,.7973],[.4115,.6268,.7928],[.4043,.6181,.7884],[.3971,.6095,.7839],[.3899,.6009,.7795],[.3826,.5923,.775],[.3754,.5837,.7705],[.3682,.5751,.7661],[.3609,.5665,.7616],[.3537,.5579,.7572],[.3465,.5493,.7527],[.3393,.5406,.7483],[.332,.532,.7438],[.3248,.5234,.7393],[.3176,.5148,.7349],[.3103,.5062,.7304],[.3031,.4976,.726],[.2959,.489,.7215],[.2887,.4804,.717],[.2814,.4717,.7126],[.2742,.4631,.7081],[.2691,.454,.7035],[.266,.4443,.6987],[.2629,.4346,.694],[.2598,.4249,.6892],[.2567,.4152,.6844],[.2537,.4055,.6797],[.2506,.3958,.6749],[.2475,.3862,.6701],[.2444,.3765,.6654],[.2414,.3668,.6606],[.2383,.3571,.6558],[.2352,.3474,.6511],[.2321,.3377,.6463],[.2291,.328,.6415],[.226,.3183,.6368],[.2229,.3087,.632],[.2198,.299,.6272],[.2168,.2893,.6225],[.2137,.2796,.6177],[.2106,.2699,.6129],[.2075,.2602,.6082],[.2045,.2505,.6034],[.2014,.2408,.5986],[.1983,.2311,.5938],[.1952,.2215,.5891],[.1922,.2118,.5843]]},RdYlGn:{interpolate:!0,colors:[[.6471,0,.149],[.6547,.0074,.1492],[.6624,.0148,.1493],[.6701,.0221,.1495],[.6778,.0295,.1496],[.6855,.0369,.1498],[.6932,.0443,.1499],[.7009,.0517,.1501],[.7086,.0591,.1502],[.7163,.0664,.1504],[.724,.0738,.1506],[.7316,.0812,.1507],[.7393,.0886,.1509],[.747,.096,.151],[.7547,.1033,.1512],[.7624,.1107,.1513],[.7701,.1181,.1515],[.7778,.1255,.1516],[.7855,.1329,.1518],[.7932,.1403,.1519],[.8008,.1476,.1521],[.8085,.155,.1522],[.8162,.1624,.1524],[.8239,.1698,.1526],[.8316,.1772,.1527],[.8393,.1845,.1529],[.8454,.1929,.1551],[.8498,.2023,.1594],[.8543,.2117,.1637],[.8587,.2211,.168],[.8632,.2304,.1723],[.8677,.2398,.1766],[.8721,.2492,.1809],[.8766,.2586,.1852],[.881,.268,.1895],[.8855,.2774,.1938],[.89,.2867,.1982],[.8944,.2961,.2025],[.8989,.3055,.2068],[.9033,.3149,.2111],[.9078,.3243,.2154],[.9123,.3336,.2197],[.9167,.343,.224],[.9212,.3524,.2283],[.9256,.3618,.2326],[.9301,.3712,.2369],[.9346,.3805,.2412],[.939,.3899,.2455],[.9435,.3993,.2498],[.9479,.4087,.2541],[.9524,.4181,.2584],[.9569,.4275,.2627],[.9582,.4374,.2674],[.9596,.4474,.272],[.961,.4574,.2766],[.9624,.4674,.2812],[.9638,.4774,.2858],[.9652,.4874,.2904],[.9666,.4974,.295],[.9679,.5074,.2997],[.9693,.5174,.3043],[.9707,.5274,.3089],[.9721,.5374,.3135],[.9735,.5474,.3181],[.9749,.5574,.3227],[.9762,.5674,.3273],[.9776,.5774,.3319],[.979,.5874,.3366],[.9804,.5974,.3412],[.9818,.6074,.3458],[.9832,.6174,.3504],[.9845,.6274,.355],[.9859,.6374,.3596],[.9873,.6474,.3642],[.9887,.6574,.3689],[.9901,.6674,.3735],[.9915,.6774,.3781],[.9922,.6862,.3836],[.9924,.6939,.3901],[.9925,.7016,.3965],[.9927,.7093,.403],[.9928,.717,.4095],[.993,.7246,.4159],[.9932,.7323,.4224],[.9933,.74,.4288],[.9935,.7477,.4353],[.9936,.7554,.4418],[.9938,.7631,.4482],[.9939,.7708,.4547],[.9941,.7785,.4611],[.9942,.7862,.4676],[.9944,.7938,.474],[.9945,.8015,.4805],[.9947,.8092,.487],[.9948,.8169,.4934],[.995,.8246,.4999],[.9952,.8323,.5063],[.9953,.84,.5128],[.9955,.8477,.5193],[.9956,.8554,.5257],[.9958,.8631,.5322],[.9959,.8707,.5386],[.9961,.8784,.5451],[.9962,.8832,.5531],[.9964,.888,.5611],[.9965,.8927,.5691],[.9967,.8975,.5771],[.9968,.9023,.5851],[.997,.907,.5931],[.9972,.9118,.6011],[.9973,.9166,.6091],[.9975,.9213,.6171],[.9976,.9261,.6251],[.9978,.9309,.6331],[.9979,.9356,.6411],[.9981,.9404,.6491],[.9982,.9452,.6571],[.9984,.9499,.6651],[.9985,.9547,.673],[.9987,.9595,.681],[.9988,.9642,.689],[.999,.969,.697],[.9992,.9738,.705],[.9993,.9785,.713],[.9995,.9833,.721],[.9996,.9881,.729],[.9998,.9928,.737],[.9999,.9976,.745],[.9971,.9988,.745],[.9912,.9963,.737],[.9854,.9938,.729],[.9795,.9914,.721],[.9737,.9889,.713],[.9679,.9865,.705],[.962,.984,.697],[.9562,.9815,.689],[.9503,.9791,.681],[.9445,.9766,.673],[.9386,.9742,.6651],[.9328,.9717,.6571],[.927,.9692,.6491],[.9211,.9668,.6411],[.9153,.9643,.6331],[.9094,.9619,.6251],[.9036,.9594,.6171],[.8977,.9569,.6091],[.8919,.9545,.6011],[.886,.952,.5931],[.8802,.9496,.5851],[.8744,.9471,.5771],[.8685,.9446,.5691],[.8627,.9422,.5611],[.8568,.9397,.5531],[.851,.9373,.5451],[.8431,.9339,.54],[.8353,.9305,.5349],[.8275,.9271,.5299],[.8196,.9237,.5248],[.8118,.9203,.5197],[.8039,.917,.5146],[.7961,.9136,.5096],[.7882,.9102,.5045],[.7804,.9068,.4994],[.7725,.9034,.4943],[.7647,.9,.4893],[.7569,.8967,.4842],[.749,.8933,.4791],[.7412,.8899,.474],[.7333,.8865,.469],[.7255,.8831,.4639],[.7176,.8797,.4588],[.7098,.8764,.4537],[.702,.873,.4487],[.6941,.8696,.4436],[.6863,.8662,.4385],[.6784,.8628,.4334],[.6706,.8594,.4284],[.6627,.8561,.4233],[.6549,.8527,.4182],[.6461,.8488,.4151],[.6362,.8445,.4141],[.6264,.8402,.413],[.6165,.8359,.4119],[.6067,.8316,.4108],[.5968,.8273,.4098],[.587,.823,.4087],[.5772,.8187,.4076],[.5673,.8144,.4065],[.5575,.8101,.4055],[.5476,.8058,.4044],[.5378,.8015,.4033],[.528,.7972,.4022],[.5181,.7928,.4012],[.5083,.7885,.4001],[.4984,.7842,.399],[.4886,.7799,.3979],[.4787,.7756,.3968],[.4689,.7713,.3958],[.4591,.767,.3947],[.4492,.7627,.3936],[.4394,.7584,.3925],[.4295,.7541,.3915],[.4197,.7498,.3904],[.4098,.7455,.3893],[.4,.7412,.3882],[.3883,.7355,.3853],[.3766,.7298,.3824],[.3649,.7241,.3795],[.3532,.7184,.3765],[.3416,.7127,.3736],[.3299,.707,.3707],[.3182,.7013,.3678],[.3065,.6957,.3649],[.2948,.69,.3619],[.2831,.6843,.359],[.2714,.6786,.3561],[.2597,.6729,.3532],[.2481,.6672,.3502],[.2364,.6615,.3473],[.2247,.6558,.3444],[.213,.6501,.3415],[.2013,.6444,.3386],[.1896,.6388,.3356],[.1779,.6331,.3327],[.1662,.6274,.3298],[.1546,.6217,.3269],[.1429,.616,.324],[.1312,.6103,.321],[.1195,.6046,.3181],[.1078,.5989,.3152],[.1,.5924,.3118],[.096,.585,.308],[.092,.5776,.3041],[.088,.5702,.3003],[.084,.5629,.2964],[.08,.5555,.2926],[.076,.5481,.2887],[.072,.5407,.2849],[.068,.5333,.281],[.064,.526,.2772],[.06,.5186,.2734],[.056,.5112,.2695],[.052,.5038,.2657],[.048,.4964,.2618],[.044,.489,.258],[.04,.4817,.2541],[.036,.4743,.2503],[.032,.4669,.2464],[.028,.4595,.2426],[.024,.4521,.2388],[.02,.4448,.2349],[.016,.4374,.2311],[.012,.43,.2272],[.008,.4226,.2234],[.004,.4152,.2195],[0,.4078,.2157]]},Reds:{interpolate:!0,colors:[[1,.9608,.9412],[.9999,.9582,.9375],[.9998,.9556,.9338],[.9996,.953,.9301],[.9995,.9504,.9264],[.9994,.9479,.9227],[.9993,.9453,.919],[.9991,.9427,.9153],[.999,.9401,.9116],[.9989,.9375,.908],[.9988,.9349,.9043],[.9986,.9324,.9006],[.9985,.9298,.8969],[.9984,.9272,.8932],[.9983,.9246,.8895],[.9982,.922,.8858],[.998,.9194,.8821],[.9979,.9169,.8784],[.9978,.9143,.8747],[.9977,.9117,.871],[.9975,.9091,.8674],[.9974,.9065,.8637],[.9973,.9039,.86],[.9972,.9014,.8563],[.997,.8988,.8526],[.9969,.8962,.8489],[.9968,.8936,.8452],[.9967,.891,.8415],[.9966,.8884,.8378],[.9964,.8859,.8341],[.9963,.8833,.8304],[.9962,.8807,.8268],[.996,.8779,.8228],[.9958,.8733,.8167],[.9956,.8688,.8107],[.9953,.8642,.8047],[.9951,.8597,.7987],[.9948,.8551,.7926],[.9946,.8505,.7866],[.9943,.846,.7806],[.9941,.8414,.7745],[.9938,.8369,.7685],[.9936,.8323,.7625],[.9933,.8278,.7565],[.9931,.8232,.7504],[.9928,.8187,.7444],[.9926,.8141,.7384],[.9924,.8096,.7323],[.9921,.805,.7263],[.9919,.8005,.7203],[.9916,.7959,.7143],[.9914,.7914,.7082],[.9911,.7868,.7022],[.9909,.7823,.6962],[.9906,.7777,.6901],[.9904,.7732,.6841],[.9901,.7686,.6781],[.9899,.7641,.6721],[.9897,.7595,.666],[.9894,.755,.66],[.9892,.7504,.654],[.9889,.7459,.648],[.9887,.7413,.6419],[.9884,.7367,.6359],[.9882,.7321,.6299],[.9882,.727,.6241],[.9882,.722,.6184],[.9882,.7169,.6126],[.9882,.7119,.6068],[.9882,.7069,.601],[.9882,.7018,.5952],[.9882,.6968,.5895],[.9882,.6917,.5837],[.9882,.6867,.5779],[.9882,.6816,.5721],[.9882,.6766,.5663],[.9882,.6715,.5605],[.9882,.6665,.5548],[.9882,.6615,.549],[.9882,.6564,.5432],[.9882,.6514,.5374],[.9882,.6463,.5316],[.9882,.6413,.5258],[.9882,.6362,.5201],[.9882,.6312,.5143],[.9882,.6261,.5085],[.9882,.6211,.5027],[.9882,.6161,.4969],[.9882,.611,.4911],[.9882,.606,.4854],[.9882,.6009,.4796],[.9882,.5959,.4738],[.9882,.5908,.468],[.9882,.5858,.4622],[.9882,.5807,.4565],[.9882,.5757,.4507],[.9882,.5707,.4452],[.9881,.5658,.4403],[.9879,.5609,.4354],[.9878,.5559,.4304],[.9877,.551,.4255],[.9876,.5461,.4206],[.9875,.5412,.4157],[.9873,.5363,.4108],[.9872,.5313,.4058],[.9871,.5264,.4009],[.987,.5215,.396],[.9868,.5166,.3911],[.9867,.5116,.3862],[.9866,.5067,.3812],[.9865,.5018,.3763],[.9863,.4969,.3714],[.9862,.492,.3665],[.9861,.487,.3616],[.986,.4821,.3566],[.9859,.4772,.3517],[.9857,.4723,.3468],[.9856,.4674,.3419],[.9855,.4624,.3369],[.9854,.4575,.332],[.9852,.4526,.3271],[.9851,.4477,.3222],[.985,.4428,.3173],[.9849,.4378,.3123],[.9847,.4329,.3074],[.9846,.428,.3025],[.9845,.4231,.2976],[.9844,.4181,.2927],[.9836,.4128,.2884],[.9821,.407,.2847],[.9806,.4012,.281],[.9791,.3954,.2773],[.9777,.3897,.2736],[.9762,.3839,.2699],[.9747,.3781,.2662],[.9732,.3723,.2625],[.9718,.3665,.2588],[.9703,.3608,.2551],[.9688,.355,.2514],[.9673,.3492,.2478],[.9659,.3434,.2441],[.9644,.3376,.2404],[.9629,.3318,.2367],[.9614,.3261,.233],[.96,.3203,.2293],[.9585,.3145,.2256],[.957,.3087,.2219],[.9555,.3029,.2182],[.954,.2971,.2145],[.9526,.2914,.2108],[.9511,.2856,.2072],[.9496,.2798,.2035],[.9481,.274,.1998],[.9467,.2682,.1961],[.9452,.2625,.1924],[.9437,.2567,.1887],[.9422,.2509,.185],[.9408,.2451,.1813],[.9393,.2393,.1776],[.9378,.2335,.1739],[.9345,.2287,.1714],[.9301,.2244,.1696],[.9256,.2201,.1677],[.9212,.2158,.1659],[.9168,.2115,.164],[.9123,.2072,.1622],[.9079,.2028,.1603],[.9035,.1985,.1585],[.8991,.1942,.1566],[.8946,.1899,.1548],[.8902,.1856,.1529],[.8858,.1813,.1511],[.8813,.177,.1493],[.8769,.1727,.1474],[.8725,.1684,.1456],[.8681,.1641,.1437],[.8636,.1598,.1419],[.8592,.1555,.14],[.8548,.1512,.1382],[.8503,.1469,.1363],[.8459,.1426,.1345],[.8415,.1383,.1326],[.837,.1339,.1308],[.8326,.1296,.129],[.8282,.1253,.1271],[.8238,.121,.1253],[.8193,.1167,.1234],[.8149,.1124,.1216],[.8105,.1081,.1197],[.806,.1038,.1179],[.8016,.0995,.116],[.7972,.0952,.1142],[.7926,.0933,.113],[.7879,.0922,.112],[.7832,.0911,.111],[.7785,.09,.11],[.7739,.0889,.1091],[.7692,.0878,.1081],[.7645,.0866,.1071],[.7598,.0855,.1061],[.7552,.0844,.1051],[.7505,.0833,.1041],[.7458,.0822,.1031],[.7411,.0811,.1022],[.7365,.08,.1012],[.7318,.0789,.1002],[.7271,.0778,.0992],[.7224,.0767,.0982],[.7178,.0756,.0972],[.7131,.0745,.0963],[.7084,.0734,.0953],[.7037,.0722,.0943],[.6991,.0711,.0933],[.6944,.07,.0923],[.6897,.0689,.0913],[.685,.0678,.0903],[.6804,.0667,.0894],[.6757,.0656,.0884],[.671,.0645,.0874],[.6663,.0634,.0864],[.6617,.0623,.0854],[.657,.0612,.0844],[.6523,.0601,.0835],[.6476,.059,.0825],[.6404,.0572,.0815],[.6328,.0554,.0805],[.6251,.0535,.0795],[.6175,.0517,.0785],[.6099,.0498,.0776],[.6022,.048,.0766],[.5946,.0461,.0756],[.587,.0443,.0746],[.5794,.0424,.0736],[.5717,.0406,.0726],[.5641,.0388,.0716],[.5565,.0369,.0707],[.5489,.0351,.0697],[.5412,.0332,.0687],[.5336,.0314,.0677],[.526,.0295,.0667],[.5183,.0277,.0657],[.5107,.0258,.0648],[.5031,.024,.0638],[.4955,.0221,.0628],[.4878,.0203,.0618],[.4802,.0185,.0608],[.4726,.0166,.0598],[.4649,.0148,.0589],[.4573,.0129,.0579],[.4497,.0111,.0569],[.4421,.0092,.0559],[.4344,.0074,.0549],[.4268,.0055,.0539],[.4192,.0037,.0529],[.4115,.0018,.052],[.4039,0,.051]]},Set1:{interpolate:!1,colors:[[.8941,.102,.1098],[.2157,.4941,.7216],[.302,.6863,.2902],[.5961,.3059,.6392],[1,.498,0],[1,1,.2],[.651,.3373,.1569],[.9686,.5059,.749],[.6,.6,.6]]},Set2:{interpolate:!1,colors:[[.4,.7608,.6471],[.9882,.5529,.3843],[.5529,.6275,.7961],[.9059,.5412,.7647],[.651,.8471,.3294],[1,.851,.1843],[.898,.7686,.5804],[.702,.702,.702]]},Set3:{interpolate:!1,colors:[[.5529,.8275,.7804],[1,1,.702],[.7451,.7294,.8549],[.9843,.502,.4471],[.502,.6941,.8275],[.9922,.7059,.3843],[.702,.8706,.4118],[.9882,.8039,.898],[.851,.851,.851],[.7373,.502,.7412],[.8,.9216,.7725],[1,.9294,.4353]]},Spectral:{interpolate:!0,colors:[[.6196,.0039,.2588],[.6281,.0133,.2608],[.6365,.0227,.2628],[.645,.0321,.2648],[.6534,.0414,.2668],[.6619,.0508,.2688],[.6704,.0602,.2708],[.6788,.0696,.2728],[.6873,.079,.2748],[.6957,.0884,.2768],[.7042,.0977,.2788],[.7126,.1071,.2808],[.7211,.1165,.2828],[.7296,.1259,.2848],[.738,.1353,.2868],[.7465,.1446,.2888],[.7549,.154,.2908],[.7634,.1634,.2928],[.7719,.1728,.2948],[.7803,.1822,.2968],[.7888,.1915,.2988],[.7972,.2009,.3008],[.8057,.2103,.3028],[.8141,.2197,.3048],[.8226,.2291,.3068],[.8311,.2384,.3088],[.8377,.2468,.3089],[.8424,.254,.307],[.8472,.2612,.3052],[.852,.2684,.3033],[.8567,.2757,.3015],[.8615,.2829,.2997],[.8663,.2901,.2978],[.871,.2973,.296],[.8758,.3046,.2941],[.8806,.3118,.2923],[.8854,.319,.2904],[.8901,.3263,.2886],[.8949,.3335,.2867],[.8997,.3407,.2849],[.9044,.3479,.283],[.9092,.3552,.2812],[.914,.3624,.2794],[.9187,.3696,.2775],[.9235,.3769,.2757],[.9283,.3841,.2738],[.933,.3913,.272],[.9378,.3985,.2701],[.9426,.4058,.2683],[.9473,.413,.2664],[.9521,.4202,.2646],[.9569,.4275,.2627],[.9582,.4374,.2674],[.9596,.4474,.272],[.961,.4574,.2766],[.9624,.4674,.2812],[.9638,.4774,.2858],[.9652,.4874,.2904],[.9666,.4974,.295],[.9679,.5074,.2997],[.9693,.5174,.3043],[.9707,.5274,.3089],[.9721,.5374,.3135],[.9735,.5474,.3181],[.9749,.5574,.3227],[.9762,.5674,.3273],[.9776,.5774,.3319],[.979,.5874,.3366],[.9804,.5974,.3412],[.9818,.6074,.3458],[.9832,.6174,.3504],[.9845,.6274,.355],[.9859,.6374,.3596],[.9873,.6474,.3642],[.9887,.6574,.3689],[.9901,.6674,.3735],[.9915,.6774,.3781],[.9922,.6862,.3836],[.9924,.6939,.3901],[.9925,.7016,.3965],[.9927,.7093,.403],[.9928,.717,.4095],[.993,.7246,.4159],[.9932,.7323,.4224],[.9933,.74,.4288],[.9935,.7477,.4353],[.9936,.7554,.4418],[.9938,.7631,.4482],[.9939,.7708,.4547],[.9941,.7785,.4611],[.9942,.7862,.4676],[.9944,.7938,.474],[.9945,.8015,.4805],[.9947,.8092,.487],[.9948,.8169,.4934],[.995,.8246,.4999],[.9952,.8323,.5063],[.9953,.84,.5128],[.9955,.8477,.5193],[.9956,.8554,.5257],[.9958,.8631,.5322],[.9959,.8707,.5386],[.9961,.8784,.5451],[.9962,.8832,.5531],[.9964,.888,.5611],[.9965,.8927,.5691],[.9967,.8975,.5771],[.9968,.9023,.5851],[.997,.907,.5931],[.9972,.9118,.6011],[.9973,.9166,.6091],[.9975,.9213,.6171],[.9976,.9261,.6251],[.9978,.9309,.6331],[.9979,.9356,.6411],[.9981,.9404,.6491],[.9982,.9452,.6571],[.9984,.9499,.6651],[.9985,.9547,.673],[.9987,.9595,.681],[.9988,.9642,.689],[.999,.969,.697],[.9992,.9738,.705],[.9993,.9785,.713],[.9995,.9833,.721],[.9996,.9881,.729],[.9998,.9928,.737],[.9999,.9976,.745],[.9981,.9992,.746],[.9942,.9977,.74],[.9904,.9962,.734],[.9865,.9946,.728],[.9827,.9931,.722],[.9789,.9915,.716],[.975,.99,.71],[.9712,.9885,.704],[.9673,.9869,.698],[.9635,.9854,.692],[.9596,.9839,.686],[.9558,.9823,.68],[.9519,.9808,.674],[.9481,.9792,.6681],[.9443,.9777,.6621],[.9404,.9762,.6561],[.9366,.9746,.6501],[.9327,.9731,.6441],[.9289,.9715,.6381],[.925,.97,.6321],[.9212,.9685,.6261],[.9173,.9669,.6201],[.9135,.9654,.6141],[.9097,.9639,.6081],[.9058,.9623,.6021],[.902,.9608,.5961],[.8929,.9571,.5979],[.8838,.9534,.5998],[.8747,.9497,.6016],[.8657,.946,.6035],[.8566,.9423,.6053],[.8475,.9386,.6072],[.8384,.9349,.609],[.8294,.9313,.6108],[.8203,.9276,.6127],[.8112,.9239,.6145],[.8022,.9202,.6164],[.7931,.9165,.6182],[.784,.9128,.6201],[.7749,.9091,.6219],[.7659,.9054,.6238],[.7568,.9017,.6256],[.7477,.898,.6275],[.7386,.8943,.6293],[.7296,.8907,.6311],[.7205,.887,.633],[.7114,.8833,.6348],[.7023,.8796,.6367],[.6933,.8759,.6385],[.6842,.8722,.6404],[.6751,.8685,.6422],[.6653,.8646,.6432],[.6547,.8604,.6434],[.6441,.8563,.6435],[.6334,.8521,.6437],[.6228,.848,.6438],[.6122,.8438,.644],[.6016,.8397,.6441],[.591,.8355,.6443],[.5804,.8314,.6444],[.5698,.8272,.6446],[.5592,.8231,.6448],[.5486,.8189,.6449],[.5379,.8148,.6451],[.5273,.8106,.6452],[.5167,.8065,.6454],[.5061,.8023,.6455],[.4955,.7982,.6457],[.4849,.794,.6458],[.4743,.7899,.646],[.4637,.7857,.6461],[.4531,.7815,.6463],[.4424,.7774,.6464],[.4318,.7732,.6466],[.4212,.7691,.6468],[.4106,.7649,.6469],[.4,.7608,.6471],[.392,.7519,.6507],[.384,.7429,.6544],[.376,.734,.6581],[.368,.7251,.6618],[.36,.7162,.6655],[.352,.7073,.6692],[.344,.6983,.6729],[.336,.6894,.6766],[.328,.6805,.6803],[.32,.6716,.684],[.312,.6627,.6877],[.304,.6537,.6913],[.296,.6448,.695],[.288,.6359,.6987],[.28,.627,.7024],[.272,.6181,.7061],[.2641,.6092,.7098],[.2561,.6002,.7135],[.2481,.5913,.7172],[.2401,.5824,.7209],[.2321,.5735,.7246],[.2241,.5646,.7283],[.2161,.5556,.7319],[.2081,.5467,.7356],[.2001,.5378,.7393],[.1995,.529,.7391],[.2062,.5202,.7349],[.213,.5114,.7308],[.2198,.5027,.7266],[.2265,.4939,.7225],[.2333,.4851,.7183],[.2401,.4764,.7142],[.2468,.4676,.71],[.2536,.4588,.7059],[.2604,.4501,.7017],[.2671,.4413,.6976],[.2739,.4325,.6934],[.2807,.4238,.6893],[.2874,.415,.6851],[.2942,.4062,.681],[.301,.3975,.6768],[.3077,.3887,.6727],[.3145,.3799,.6685],[.3213,.3712,.6644],[.328,.3624,.6602],[.3348,.3536,.6561],[.3416,.3449,.6519],[.3483,.3361,.6478],[.3551,.3273,.6436],[.3619,.3186,.6394],[.3686,.3098,.6353]]},Wistia:{interpolate:!0,colors:[[.8941,1,.4784],[.8958,.9986,.4725],[.8974,.9972,.4666],[.8991,.9958,.4607],[.9008,.9943,.4548],[.9024,.9929,.4489],[.9041,.9915,.443],[.9057,.9901,.4371],[.9074,.9887,.4312],[.9091,.9873,.4253],[.9107,.9859,.4194],[.9124,.9844,.4135],[.914,.983,.4076],[.9157,.9816,.4017],[.9174,.9802,.3958],[.919,.9788,.3899],[.9207,.9774,.3839],[.9224,.9759,.378],[.924,.9745,.3721],[.9257,.9731,.3662],[.9273,.9717,.3603],[.929,.9703,.3544],[.9307,.9689,.3485],[.9323,.9675,.3426],[.934,.966,.3367],[.9356,.9646,.3308],[.9373,.9632,.3249],[.939,.9618,.319],[.9406,.9604,.3131],[.9423,.959,.3072],[.9439,.9576,.3013],[.9456,.9561,.2954],[.9473,.9547,.2895],[.9489,.9533,.2836],[.9506,.9519,.2776],[.9522,.9505,.2717],[.9539,.9491,.2658],[.9556,.9477,.2599],[.9572,.9462,.254],[.9589,.9448,.2481],[.9606,.9434,.2422],[.9622,.942,.2363],[.9639,.9406,.2304],[.9655,.9392,.2245],[.9672,.9377,.2186],[.9689,.9363,.2127],[.9705,.9349,.2068],[.9722,.9335,.2009],[.9738,.9321,.195],[.9755,.9307,.1891],[.9772,.9293,.1832],[.9788,.9278,.1773],[.9805,.9264,.1713],[.9821,.925,.1654],[.9838,.9236,.1595],[.9855,.9222,.1536],[.9871,.9208,.1477],[.9888,.9194,.1418],[.9904,.9179,.1359],[.9921,.9165,.13],[.9938,.9151,.1241],[.9954,.9137,.1182],[.9971,.9123,.1123],[.9988,.9109,.1064],[1,.9091,.1016],[1,.9065,.1],[1,.9039,.0984],[1,.9012,.0968],[1,.8986,.0952],[1,.8959,.0936],[1,.8933,.092],[1,.8906,.0904],[1,.888,.0888],[1,.8853,.0872],[1,.8827,.0856],[1,.88,.084],[1,.8774,.0824],[1,.8748,.0808],[1,.8721,.0792],[1,.8695,.0776],[1,.8668,.076],[1,.8642,.0744],[1,.8615,.0728],[1,.8589,.0712],[1,.8562,.0696],[1,.8536,.068],[1,.8509,.0664],[1,.8483,.0648],[1,.8457,.0632],[1,.843,.0616],[1,.8404,.06],[1,.8377,.0584],[1,.8351,.0568],[1,.8324,.0552],[1,.8298,.0536],[1,.8271,.052],[1,.8245,.0504],[1,.8219,.0488],[1,.8192,.0472],[1,.8166,.0456],[1,.8139,.044],[1,.8113,.0424],[1,.8086,.0408],[1,.806,.0392],[1,.8033,.0376],[1,.8007,.036],[1,.798,.0344],[1,.7954,.0328],[1,.7928,.0312],[1,.7901,.0296],[1,.7875,.028],[1,.7848,.0264],[1,.7822,.0248],[1,.7795,.0232],[1,.7769,.0216],[1,.7742,.02],[1,.7716,.0184],[1,.769,.0168],[1,.7663,.0152],[1,.7637,.0136],[1,.761,.012],[1,.7584,.0104],[1,.7557,.0088],[1,.7531,.0072],[1,.7504,.0056],[1,.7478,.004],[1,.7451,.0024],[1,.7425,8e-4],[1,.7403,0],[1,.7385,0],[1,.7367,0],[1,.7349,0],[1,.7331,0],[1,.7314,0],[1,.7296,0],[1,.7278,0],[1,.726,0],[1,.7242,0],[1,.7224,0],[1,.7207,0],[1,.7189,0],[1,.7171,0],[1,.7153,0],[1,.7135,0],[1,.7117,0],[1,.71,0],[1,.7082,0],[1,.7064,0],[1,.7046,0],[1,.7028,0],[1,.701,0],[1,.6993,0],[1,.6975,0],[1,.6957,0],[1,.6939,0],[1,.6921,0],[1,.6903,0],[1,.6886,0],[1,.6868,0],[1,.685,0],[1,.6832,0],[1,.6814,0],[1,.6796,0],[1,.6778,0],[1,.6761,0],[1,.6743,0],[1,.6725,0],[1,.6707,0],[1,.6689,0],[1,.6671,0],[1,.6654,0],[1,.6636,0],[1,.6618,0],[1,.66,0],[1,.6582,0],[1,.6564,0],[1,.6547,0],[1,.6529,0],[1,.6511,0],[1,.6493,0],[1,.6475,0],[1,.6457,0],[1,.644,0],[1,.6422,0],[1,.6404,0],[1,.6386,0],[1,.6368,0],[1,.635,0],[1,.6332,0],[1,.6315,0],[1,.6297,0],[1,.6279,0],[.9999,.6259,0],[.9997,.6239,0],[.9995,.6219,0],[.9993,.6198,0],[.9991,.6178,0],[.9989,.6158,0],[.9988,.6137,0],[.9986,.6117,0],[.9984,.6097,0],[.9982,.6077,0],[.998,.6056,0],[.9978,.6036,0],[.9976,.6016,0],[.9975,.5995,0],[.9973,.5975,0],[.9971,.5955,0],[.9969,.5934,0],[.9967,.5914,0],[.9965,.5894,0],[.9964,.5874,0],[.9962,.5853,0],[.996,.5833,0],[.9958,.5813,0],[.9956,.5792,0],[.9954,.5772,0],[.9952,.5752,0],[.9951,.5731,0],[.9949,.5711,0],[.9947,.5691,0],[.9945,.5671,0],[.9943,.565,0],[.9941,.563,0],[.994,.561,0],[.9938,.5589,0],[.9936,.5569,0],[.9934,.5549,0],[.9932,.5528,0],[.993,.5508,0],[.9928,.5488,0],[.9927,.5468,0],[.9925,.5447,0],[.9923,.5427,0],[.9921,.5407,0],[.9919,.5386,0],[.9917,.5366,0],[.9916,.5346,0],[.9914,.5325,0],[.9912,.5305,0],[.991,.5285,0],[.9908,.5265,0],[.9906,.5244,0],[.9904,.5224,0],[.9903,.5204,0],[.9901,.5183,0],[.9899,.5163,0],[.9897,.5143,0],[.9895,.5122,0],[.9893,.5102,0],[.9892,.5082,0],[.989,.5062,0],[.9888,.5041,0],[.9886,.5021,0],[.9884,.5001,0],[.9882,.498,0]]},YlGn:{interpolate:!0,colors:[[1,1,.898],[.999,.9996,.8926],[.998,.9993,.8872],[.997,.9989,.8818],[.9961,.9985,.8764],[.9951,.9982,.871],[.9941,.9978,.8656],[.9931,.9974,.8601],[.9921,.997,.8547],[.9911,.9967,.8493],[.9902,.9963,.8439],[.9892,.9959,.8385],[.9882,.9956,.8331],[.9872,.9952,.8277],[.9862,.9948,.8223],[.9852,.9945,.8168],[.9843,.9941,.8114],[.9833,.9937,.806],[.9823,.9934,.8006],[.9813,.993,.7952],[.9803,.9926,.7898],[.9793,.9922,.7844],[.9783,.9919,.7789],[.9774,.9915,.7735],[.9764,.9911,.7681],[.9754,.9908,.7627],[.9744,.9904,.7573],[.9734,.99,.7519],[.9724,.9897,.7465],[.9715,.9893,.7411],[.9705,.9889,.7356],[.9695,.9886,.7302],[.9682,.9881,.7252],[.9645,.9866,.7224],[.9608,.9851,.7197],[.9571,.9836,.717],[.9534,.9821,.7143],[.9497,.9807,.7116],[.946,.9792,.7089],[.9423,.9777,.7062],[.9386,.9762,.7035],[.9349,.9748,.7008],[.9313,.9733,.6981],[.9276,.9718,.6954],[.9239,.9703,.6927],[.9202,.9689,.69],[.9165,.9674,.6873],[.9128,.9659,.6846],[.9091,.9644,.6818],[.9054,.963,.6791],[.9017,.9615,.6764],[.898,.96,.6737],[.8943,.9585,.671],[.8907,.957,.6683],[.887,.9556,.6656],[.8833,.9541,.6629],[.8796,.9526,.6602],[.8759,.9511,.6575],[.8722,.9497,.6548],[.8685,.9482,.6521],[.8648,.9467,.6494],[.8611,.9452,.6467],[.8574,.9438,.644],[.8537,.9423,.6412],[.8496,.9406,.6386],[.8442,.9383,.636],[.8388,.9359,.6334],[.8334,.9336,.6308],[.828,.9312,.6282],[.8226,.9289,.6257],[.8171,.9266,.6231],[.8117,.9242,.6205],[.8063,.9219,.6179],[.8009,.9196,.6153],[.7955,.9172,.6127],[.7901,.9149,.6101],[.7847,.9125,.6076],[.7793,.9102,.605],[.7738,.9079,.6024],[.7684,.9055,.5998],[.763,.9032,.5972],[.7576,.9009,.5946],[.7522,.8985,.5921],[.7468,.8962,.5895],[.7414,.8938,.5869],[.7359,.8915,.5843],[.7305,.8892,.5817],[.7251,.8868,.5791],[.7197,.8845,.5766],[.7143,.8822,.574],[.7089,.8798,.5714],[.7035,.8775,.5688],[.6981,.8751,.5662],[.6926,.8728,.5636],[.6872,.8705,.5611],[.6818,.8681,.5585],[.676,.8656,.5559],[.6695,.8628,.5533],[.6629,.8599,.5507],[.6564,.8571,.5481],[.6499,.8543,.5456],[.6434,.8515,.543],[.6369,.8486,.5404],[.6303,.8458,.5378],[.6238,.843,.5352],[.6173,.8401,.5326],[.6108,.8373,.5301],[.6043,.8345,.5275],[.5977,.8316,.5249],[.5912,.8288,.5223],[.5847,.826,.5197],[.5782,.8232,.5171],[.5717,.8203,.5146],[.5651,.8175,.512],[.5586,.8147,.5094],[.5521,.8118,.5068],[.5456,.809,.5042],[.5391,.8062,.5016],[.5325,.8034,.4991],[.526,.8005,.4965],[.5195,.7977,.4939],[.513,.7949,.4913],[.5065,.792,.4887],[.4999,.7892,.4861],[.4934,.7864,.4836],[.4869,.7835,.481],[.4804,.7807,.4784],[.4738,.7779,.4758],[.4672,.7748,.4728],[.4604,.7715,.4693],[.4537,.7682,.4659],[.4469,.7648,.4625],[.4401,.7615,.459],[.4334,.7582,.4556],[.4266,.7549,.4521],[.4198,.7516,.4487],[.4131,.7482,.4452],[.4063,.7449,.4418],[.3995,.7416,.4383],[.3928,.7383,.4349],[.386,.7349,.4314],[.3792,.7316,.428],[.3725,.7283,.4246],[.3657,.725,.4211],[.3589,.7217,.4177],[.3522,.7183,.4142],[.3454,.715,.4108],[.3386,.7117,.4073],[.3319,.7084,.4039],[.3251,.7051,.4004],[.3183,.7017,.397],[.3116,.6984,.3936],[.3048,.6951,.3901],[.298,.6918,.3867],[.2913,.6884,.3832],[.2845,.6851,.3798],[.2777,.6818,.3763],[.271,.6785,.3729],[.2642,.6752,.3694],[.2574,.6718,.366],[.2526,.6676,.3627],[.2489,.6628,.3595],[.2452,.658,.3563],[.2415,.6532,.3531],[.2378,.6484,.3499],[.2341,.6436,.3467],[.2304,.6388,.3435],[.2268,.634,.3403],[.2231,.6292,.3371],[.2194,.6244,.3339],[.2157,.6196,.3307],[.212,.6148,.3275],[.2083,.61,.3243],[.2046,.6052,.3211],[.2009,.6004,.3179],[.1972,.5956,.3147],[.1935,.5908,.3115],[.1899,.586,.3083],[.1862,.5812,.3051],[.1825,.5764,.3019],[.1788,.5716,.2987],[.1751,.5668,.2955],[.1714,.562,.2923],[.1677,.5572,.2891],[.164,.5524,.2859],[.1603,.5476,.2827],[.1566,.5428,.2795],[.1529,.538,.2763],[.1493,.5332,.2731],[.1456,.5284,.2699],[.1419,.5236,.2667],[.1382,.5188,.2635],[.134,.5151,.2616],[.1297,.5116,.2602],[.1254,.5082,.2587],[.1211,.5047,.2572],[.1168,.5013,.2557],[.1125,.4978,.2543],[.1082,.4944,.2528],[.1039,.4909,.2513],[.0996,.4875,.2498],[.0953,.4841,.2484],[.091,.4806,.2469],[.0867,.4772,.2454],[.0824,.4737,.2439],[.078,.4703,.2424],[.0737,.4668,.241],[.0694,.4634,.2395],[.0651,.4599,.238],[.0608,.4565,.2365],[.0565,.4531,.2351],[.0522,.4496,.2336],[.0479,.4462,.2321],[.0436,.4427,.2306],[.0393,.4393,.2292],[.035,.4358,.2277],[.0307,.4324,.2262],[.0264,.4289,.2247],[.0221,.4255,.2233],[.0178,.4221,.2218],[.0135,.4186,.2203],[.0092,.4152,.2188],[.0048,.4117,.2173],[5e-4,.4083,.2159],[0,.4041,.2142],[0,.3998,.2125],[0,.3955,.2107],[0,.3912,.209],[0,.3869,.2073],[0,.3825,.2056],[0,.3782,.2038],[0,.3739,.2021],[0,.3696,.2004],[0,.3653,.1987],[0,.361,.197],[0,.3567,.1952],[0,.3524,.1935],[0,.3481,.1918],[0,.3438,.1901],[0,.3395,.1883],[0,.3352,.1866],[0,.3309,.1849],[0,.3266,.1832],[0,.3223,.1815],[0,.318,.1797],[0,.3136,.178],[0,.3093,.1763],[0,.305,.1746],[0,.3007,.1728],[0,.2964,.1711],[0,.2921,.1694],[0,.2878,.1677],[0,.2835,.166],[0,.2792,.1642],[0,.2749,.1625],[0,.2706,.1608]]},YlGnBu:{interpolate:!0,colors:[[1,1,.851],[.9978,.9991,.8461],[.9956,.9983,.8411],[.9934,.9974,.8362],[.9911,.9966,.8313],[.9889,.9957,.8264],[.9867,.9948,.8215],[.9845,.994,.8165],[.9823,.9931,.8116],[.9801,.9922,.8067],[.9779,.9914,.8018],[.9756,.9905,.7968],[.9734,.9897,.7919],[.9712,.9888,.787],[.969,.9879,.7821],[.9668,.9871,.7772],[.9646,.9862,.7722],[.9624,.9854,.7673],[.9601,.9845,.7624],[.9579,.9836,.7575],[.9557,.9828,.7526],[.9535,.9819,.7476],[.9513,.9811,.7427],[.9491,.9802,.7378],[.9469,.9793,.7329],[.9446,.9785,.728],[.9424,.9776,.723],[.9402,.9767,.7181],[.938,.9759,.7132],[.9358,.975,.7083],[.9336,.9742,.7033],[.9313,.9733,.6984],[.9288,.9723,.6942],[.9242,.9705,.6945],[.9195,.9686,.6949],[.9148,.9668,.6953],[.9101,.9649,.6956],[.9055,.9631,.696],[.9008,.9612,.6964],[.8961,.9594,.6967],[.8914,.9576,.6971],[.8868,.9557,.6975],[.8821,.9539,.6979],[.8774,.952,.6982],[.8727,.9502,.6986],[.8681,.9483,.699],[.8634,.9465,.6993],[.8587,.9446,.6997],[.854,.9428,.7001],[.8494,.9409,.7004],[.8447,.9391,.7008],[.84,.9373,.7012],[.8353,.9354,.7015],[.8306,.9336,.7019],[.826,.9317,.7023],[.8213,.9299,.7027],[.8166,.928,.703],[.8119,.9262,.7034],[.8073,.9243,.7038],[.8026,.9225,.7041],[.7979,.9206,.7045],[.7932,.9188,.7049],[.7886,.917,.7052],[.7839,.9151,.7056],[.7782,.9129,.7061],[.7693,.9094,.707],[.7605,.906,.7078],[.7516,.9025,.7087],[.7427,.8991,.7095],[.7339,.8956,.7104],[.725,.8922,.7113],[.7162,.8888,.7121],[.7073,.8853,.713],[.6985,.8819,.7138],[.6896,.8784,.7147],[.6807,.875,.7156],[.6719,.8715,.7164],[.663,.8681,.7173],[.6542,.8646,.7182],[.6453,.8612,.719],[.6364,.8577,.7199],[.6276,.8543,.7207],[.6187,.8509,.7216],[.6099,.8474,.7225],[.601,.844,.7233],[.5922,.8405,.7242],[.5833,.8371,.725],[.5744,.8336,.7259],[.5656,.8302,.7268],[.5567,.8267,.7276],[.5479,.8233,.7285],[.539,.8199,.7294],[.5301,.8164,.7302],[.5213,.813,.7311],[.5124,.8095,.7319],[.5036,.8061,.7328],[.4952,.8029,.7337],[.4876,.8,.7349],[.4799,.7972,.736],[.4723,.7944,.7371],[.4647,.7915,.7382],[.457,.7887,.7393],[.4494,.7859,.7404],[.4418,.7831,.7415],[.4342,.7802,.7426],[.4265,.7774,.7437],[.4189,.7746,.7448],[.4113,.7717,.7459],[.4036,.7689,.747],[.396,.7661,.7481],[.3884,.7632,.7493],[.3808,.7604,.7504],[.3731,.7576,.7515],[.3655,.7548,.7526],[.3579,.7519,.7537],[.3502,.7491,.7548],[.3426,.7463,.7559],[.335,.7434,.757],[.3274,.7406,.7581],[.3197,.7378,.7592],[.3121,.7349,.7603],[.3045,.7321,.7614],[.2969,.7293,.7625],[.2892,.7265,.7636],[.2816,.7236,.7648],[.274,.7208,.7659],[.2663,.718,.767],[.2587,.7151,.7681],[.2527,.7114,.7684],[.2483,.7069,.7679],[.2438,.7023,.7674],[.2394,.6978,.7669],[.235,.6932,.7664],[.2305,.6887,.7659],[.2261,.6841,.7654],[.2217,.6796,.7649],[.2173,.675,.7644],[.2128,.6705,.764],[.2084,.6659,.7635],[.204,.6614,.763],[.1995,.6568,.7625],[.1951,.6523,.762],[.1907,.6477,.7615],[.1863,.6432,.761],[.1818,.6386,.7605],[.1774,.6341,.76],[.173,.6295,.7595],[.1685,.625,.759],[.1641,.6204,.7585],[.1597,.6159,.758],[.1552,.6113,.7576],[.1508,.6068,.7571],[.1464,.6022,.7566],[.142,.5976,.7561],[.1375,.5931,.7556],[.1331,.5885,.7551],[.1287,.584,.7546],[.1242,.5794,.7541],[.1198,.5749,.7536],[.1154,.5703,.7531],[.1141,.5647,.7511],[.1147,.5584,.7481],[.1153,.5522,.7452],[.116,.5459,.7422],[.1166,.5396,.7393],[.1172,.5333,.7363],[.1178,.5271,.7334],[.1184,.5208,.7304],[.119,.5145,.7275],[.1196,.5082,.7245],[.1203,.502,.7216],[.1209,.4957,.7186],[.1215,.4894,.7157],[.1221,.4831,.7127],[.1227,.4769,.7098],[.1233,.4706,.7068],[.124,.4643,.7039],[.1246,.458,.7009],[.1252,.4518,.6979],[.1258,.4455,.695],[.1264,.4392,.692],[.127,.4329,.6891],[.1276,.4267,.6861],[.1283,.4204,.6832],[.1289,.4141,.6802],[.1295,.4078,.6773],[.1301,.4016,.6743],[.1307,.3953,.6714],[.1313,.389,.6684],[.1319,.3827,.6655],[.1326,.3765,.6625],[.1332,.3702,.6596],[.1336,.3648,.657],[.134,.3596,.6545],[.1343,.3544,.6521],[.1347,.3493,.6496],[.1351,.3441,.6471],[.1355,.3389,.6447],[.1358,.3337,.6422],[.1362,.3286,.6398],[.1366,.3234,.6373],[.1369,.3182,.6348],[.1373,.3131,.6324],[.1377,.3079,.6299],[.138,.3027,.6275],[.1384,.2976,.625],[.1388,.2924,.6225],[.1391,.2872,.6201],[.1395,.2821,.6176],[.1399,.2769,.6151],[.1403,.2717,.6127],[.1406,.2666,.6102],[.141,.2614,.6078],[.1414,.2562,.6053],[.1417,.2511,.6028],[.1421,.2459,.6004],[.1425,.2407,.5979],[.1428,.2356,.5955],[.1432,.2304,.593],[.1436,.2252,.5905],[.1439,.2201,.5881],[.1443,.2149,.5856],[.1447,.2097,.5832],[.1451,.2046,.5807],[.142,.2014,.5739],[.1384,.1986,.5666],[.1348,.1958,.5592],[.1313,.193,.5518],[.1277,.1901,.5444],[.1241,.1873,.537],[.1206,.1845,.5296],[.117,.1816,.5223],[.1134,.1788,.5149],[.1099,.176,.5075],[.1063,.1731,.5001],[.1027,.1703,.4927],[.0992,.1675,.4854],[.0956,.1647,.478],[.092,.1618,.4706],[.0885,.159,.4632],[.0849,.1562,.4558],[.0813,.1533,.4484],[.0778,.1505,.4411],[.0742,.1477,.4337],[.0706,.1449,.4263],[.0671,.142,.4189],[.0635,.1392,.4115],[.0599,.1364,.4042],[.0563,.1335,.3968],[.0528,.1307,.3894],[.0492,.1279,.382],[.0456,.125,.3746],[.0421,.1222,.3672],[.0385,.1194,.3599],[.0349,.1166,.3525],[.0314,.1137,.3451]]},YlOrBr:{interpolate:!0,colors:[[1,1,.898],[1,.999,.893],[1,.998,.888],[1,.997,.8829],[1,.9961,.8779],[1,.9951,.8728],[1,.9941,.8678],[1,.9931,.8627],[1,.9921,.8577],[1,.9911,.8526],[1,.9902,.8476],[1,.9892,.8426],[1,.9882,.8375],[1,.9872,.8325],[1,.9862,.8274],[1,.9852,.8224],[1,.9843,.8173],[1,.9833,.8123],[1,.9823,.8072],[1,.9813,.8022],[1,.9803,.7972],[1,.9793,.7921],[1,.9783,.7871],[1,.9774,.782],[1,.9764,.777],[1,.9754,.7719],[1,.9744,.7669],[1,.9734,.7618],[1,.9724,.7568],[1,.9715,.7518],[1,.9705,.7467],[1,.9695,.7417],[1,.9683,.7366],[.9999,.9659,.7313],[.9997,.9634,.726],[.9996,.9609,.7207],[.9995,.9585,.7154],[.9994,.956,.7101],[.9992,.9536,.7049],[.9991,.9511,.6996],[.999,.9486,.6943],[.9989,.9462,.689],[.9988,.9437,.6837],[.9986,.9413,.6784],[.9985,.9388,.6731],[.9984,.9363,.6678],[.9983,.9339,.6625],[.9981,.9314,.6572],[.998,.929,.6519],[.9979,.9265,.6467],[.9978,.924,.6414],[.9976,.9216,.6361],[.9975,.9191,.6308],[.9974,.9166,.6255],[.9973,.9142,.6202],[.9972,.9117,.6149],[.997,.9093,.6096],[.9969,.9068,.6043],[.9968,.9043,.599],[.9967,.9019,.5938],[.9965,.8994,.5885],[.9964,.897,.5832],[.9963,.8945,.5779],[.9962,.892,.5726],[.9961,.8892,.5666],[.9961,.8854,.5585],[.9961,.8816,.5504],[.9961,.8778,.5422],[.9961,.874,.5341],[.9961,.8702,.526],[.9961,.8664,.5179],[.9961,.8625,.5098],[.9961,.8587,.5016],[.9961,.8549,.4935],[.9961,.8511,.4854],[.9961,.8473,.4773],[.9961,.8435,.4692],[.9961,.8397,.461],[.9961,.8358,.4529],[.9961,.832,.4448],[.9961,.8282,.4367],[.9961,.8244,.4286],[.9961,.8206,.4204],[.9961,.8168,.4123],[.9961,.813,.4042],[.9961,.8092,.3961],[.9961,.8053,.388],[.9961,.8015,.3798],[.9961,.7977,.3717],[.9961,.7939,.3636],[.9961,.7901,.3555],[.9961,.7863,.3474],[.9961,.7825,.3392],[.9961,.7786,.3311],[.9961,.7748,.323],[.9961,.771,.3149],[.9961,.7666,.3081],[.9961,.7614,.3034],[.9961,.7561,.2987],[.9961,.7508,.294],[.9961,.7455,.2894],[.9961,.7402,.2847],[.9961,.7349,.28],[.9961,.7296,.2753],[.9961,.7243,.2706],[.9961,.719,.266],[.9961,.7137,.2613],[.9961,.7085,.2566],[.9961,.7032,.2519],[.9961,.6979,.2473],[.9961,.6926,.2426],[.9961,.6873,.2379],[.9961,.682,.2332],[.9961,.6767,.2286],[.9961,.6714,.2239],[.9961,.6661,.2192],[.9961,.6608,.2145],[.9961,.6555,.2099],[.9961,.6503,.2052],[.9961,.645,.2005],[.9961,.6397,.1958],[.9961,.6344,.1912],[.9961,.6291,.1865],[.9961,.6238,.1818],[.9961,.6185,.1771],[.9961,.6132,.1725],[.9961,.6079,.1678],[.9961,.6026,.1631],[.995,.5975,.1595],[.9928,.5924,.1569],[.9905,.5874,.1543],[.9883,.5823,.1517],[.9861,.5773,.1492],[.9839,.5723,.1466],[.9817,.5672,.144],[.9795,.5622,.1414],[.9773,.5571,.1388],[.975,.5521,.1362],[.9728,.547,.1337],[.9706,.542,.1311],[.9684,.5369,.1285],[.9662,.5319,.1259],[.964,.5269,.1233],[.9618,.5218,.1207],[.9595,.5168,.1182],[.9573,.5117,.1156],[.9551,.5067,.113],[.9529,.5016,.1104],[.9507,.4966,.1078],[.9485,.4915,.1052],[.9463,.4865,.1027],[.944,.4815,.1001],[.9418,.4764,.0975],[.9396,.4714,.0949],[.9374,.4663,.0923],[.9352,.4613,.0897],[.933,.4562,.0872],[.9307,.4512,.0846],[.9285,.4462,.082],[.9263,.4411,.0794],[.923,.4364,.077],[.9191,.432,.0748],[.9152,.4276,.0726],[.9112,.4232,.0704],[.9073,.4187,.0682],[.9033,.4143,.066],[.8994,.4099,.0638],[.8955,.4054,.0615],[.8915,.401,.0593],[.8876,.3966,.0571],[.8837,.3922,.0549],[.8797,.3877,.0527],[.8758,.3833,.0505],[.8718,.3789,.0483],[.8679,.3744,.046],[.864,.37,.0438],[.86,.3656,.0416],[.8561,.3612,.0394],[.8522,.3567,.0372],[.8482,.3523,.035],[.8443,.3479,.0328],[.8404,.3434,.0305],[.8364,.339,.0283],[.8325,.3346,.0261],[.8285,.3301,.0239],[.8246,.3257,.0217],[.8207,.3213,.0195],[.8167,.3169,.0173],[.8128,.3124,.015],[.8089,.308,.0128],[.8049,.3036,.0106],[.801,.2991,.0084],[.7953,.2958,.008],[.789,.2929,.0083],[.7827,.2899,.0085],[.7765,.287,.0088],[.7702,.284,.009],[.7639,.2811,.0093],[.7576,.2781,.0095],[.7514,.2752,.0098],[.7451,.2722,.01],[.7388,.2693,.0102],[.7325,.2663,.0105],[.7263,.2633,.0107],[.72,.2604,.011],[.7137,.2574,.0112],[.7075,.2545,.0115],[.7012,.2515,.0117],[.6949,.2486,.012],[.6886,.2456,.0122],[.6824,.2427,.0125],[.6761,.2397,.0127],[.6698,.2368,.0129],[.6635,.2338,.0132],[.6573,.2309,.0134],[.651,.2279,.0137],[.6447,.225,.0139],[.6384,.222,.0142],[.6322,.2191,.0144],[.6259,.2161,.0147],[.6196,.2131,.0149],[.6133,.2102,.0152],[.6071,.2072,.0154],[.6008,.2043,.0157],[.5945,.2023,.0159],[.5882,.2005,.0161],[.582,.1986,.0164],[.5757,.1968,.0166],[.5694,.1949,.0169],[.5631,.1931,.0171],[.5569,.1912,.0174],[.5506,.1894,.0176],[.5443,.1875,.0179],[.538,.1857,.0181],[.5318,.1839,.0184],[.5255,.182,.0186],[.5192,.1802,.0189],[.5129,.1783,.0191],[.5067,.1765,.0193],[.5004,.1746,.0196],[.4941,.1728,.0198],[.4878,.1709,.0201],[.4816,.1691,.0203],[.4753,.1672,.0206],[.469,.1654,.0208],[.4627,.1636,.0211],[.4565,.1617,.0213],[.4502,.1599,.0216],[.4439,.158,.0218],[.4376,.1562,.0221],[.4314,.1543,.0223],[.4251,.1525,.0225],[.4188,.1506,.0228],[.4125,.1488,.023],[.4063,.1469,.0233],[.4,.1451,.0235]]},YlOrRd:{interpolate:!0,colors:[[1,1,.8],[1,.9978,.7946],[1,.9956,.7892],[1,.9934,.7838],[1,.9911,.7783],[1,.9889,.7729],[1,.9867,.7675],[1,.9845,.7621],[1,.9823,.7567],[1,.9801,.7513],[1,.9779,.7459],[1,.9756,.7405],[1,.9734,.735],[1,.9712,.7296],[1,.969,.7242],[1,.9668,.7188],[1,.9646,.7134],[1,.9624,.708],[1,.9601,.7026],[1,.9579,.6971],[1,.9557,.6917],[1,.9535,.6863],[1,.9513,.6809],[1,.9491,.6755],[1,.9469,.6701],[1,.9446,.6647],[1,.9424,.6593],[1,.9402,.6538],[1,.938,.6484],[1,.9358,.643],[1,.9336,.6376],[1,.9313,.6322],[1,.9291,.6268],[.9999,.9266,.6216],[.9997,.9242,.6165],[.9996,.9217,.6113],[.9995,.9193,.6061],[.9994,.9168,.601],[.9992,.9143,.5958],[.9991,.9119,.5906],[.999,.9094,.5855],[.9989,.907,.5803],[.9988,.9045,.5751],[.9986,.902,.57],[.9985,.8996,.5648],[.9984,.8971,.5596],[.9983,.8947,.5545],[.9981,.8922,.5493],[.998,.8897,.5441],[.9979,.8873,.539],[.9978,.8848,.5338],[.9976,.8824,.5286],[.9975,.8799,.5235],[.9974,.8774,.5183],[.9973,.875,.5131],[.9972,.8725,.508],[.997,.87,.5028],[.9969,.8676,.4976],[.9968,.8651,.4925],[.9967,.8627,.4873],[.9965,.8602,.4821],[.9964,.8577,.477],[.9963,.8553,.4718],[.9962,.8528,.4666],[.9961,.8498,.4615],[.9961,.845,.4563],[.9961,.8402,.4511],[.9961,.8354,.446],[.9961,.8306,.4408],[.9961,.8258,.4356],[.9961,.821,.4304],[.9961,.8162,.4253],[.9961,.8114,.4201],[.9961,.8066,.4149],[.9961,.8018,.4098],[.9961,.797,.4046],[.9961,.7922,.3994],[.9961,.7874,.3943],[.9961,.7826,.3891],[.9961,.7778,.3839],[.9961,.773,.3788],[.9961,.7682,.3736],[.9961,.7634,.3684],[.9961,.7586,.3633],[.9961,.7538,.3581],[.9961,.749,.3529],[.9961,.7442,.3478],[.9961,.7394,.3426],[.9961,.7346,.3374],[.9961,.7298,.3323],[.9961,.725,.3271],[.9961,.7202,.3219],[.9961,.7154,.3168],[.9961,.7106,.3116],[.9961,.7058,.3064],[.9961,.701,.3013],[.996,.6963,.2973],[.9959,.6918,.2953],[.9958,.6872,.2934],[.9957,.6827,.2914],[.9955,.6781,.2894],[.9954,.6736,.2875],[.9953,.669,.2855],[.9952,.6645,.2835],[.995,.6599,.2816],[.9949,.6554,.2796],[.9948,.6508,.2776],[.9947,.6463,.2756],[.9946,.6417,.2737],[.9944,.6372,.2717],[.9943,.6326,.2697],[.9942,.6281,.2678],[.9941,.6235,.2658],[.9939,.6189,.2638],[.9938,.6144,.2619],[.9937,.6098,.2599],[.9936,.6053,.2579],[.9934,.6007,.256],[.9933,.5962,.254],[.9932,.5916,.252],[.9931,.5871,.2501],[.993,.5825,.2481],[.9928,.578,.2461],[.9927,.5734,.2442],[.9926,.5689,.2422],[.9925,.5643,.2402],[.9923,.5598,.2382],[.9922,.5552,.2363],[.9921,.5491,.2342],[.992,.5413,.232],[.9918,.5336,.2298],[.9917,.5258,.2275],[.9916,.5181,.2253],[.9915,.5103,.2231],[.9914,.5026,.2209],[.9912,.4948,.2187],[.9911,.4871,.2165],[.991,.4793,.2143],[.9909,.4716,.212],[.9907,.4638,.2098],[.9906,.4561,.2076],[.9905,.4483,.2054],[.9904,.4406,.2032],[.9902,.4328,.201],[.9901,.4251,.1988],[.99,.4173,.1965],[.9899,.4096,.1943],[.9898,.4018,.1921],[.9896,.394,.1899],[.9895,.3863,.1877],[.9894,.3785,.1855],[.9893,.3708,.1833],[.9891,.363,.181],[.989,.3553,.1788],[.9889,.3475,.1766],[.9888,.3398,.1744],[.9887,.332,.1722],[.9885,.3243,.17],[.9884,.3165,.1678],[.9883,.3088,.1655],[.9863,.3019,.1636],[.9832,.2955,.1619],[.9802,.2891,.1602],[.9771,.2827,.1585],[.974,.2763,.1567],[.9709,.2699,.155],[.9679,.2635,.1533],[.9648,.2571,.1516],[.9617,.2507,.1499],[.9586,.2443,.1481],[.9556,.2379,.1464],[.9525,.2315,.1447],[.9494,.2251,.143],[.9463,.2187,.1412],[.9433,.2123,.1395],[.9402,.2059,.1378],[.9371,.1995,.1361],[.934,.1931,.1343],[.9309,.1867,.1326],[.9279,.1803,.1309],[.9248,.1739,.1292],[.9217,.1675,.1275],[.9186,.1611,.1257],[.9156,.1547,.124],[.9125,.1483,.1223],[.9094,.1419,.1206],[.9063,.1355,.1188],[.9033,.1292,.1171],[.9002,.1228,.1154],[.8971,.1164,.1137],[.894,.11,.112],[.891,.1036,.1102],[.8867,.0996,.1107],[.882,.0964,.112],[.8773,.0932,.1132],[.8727,.09,.1144],[.868,.0868,.1156],[.8633,.0836,.1169],[.8586,.0804,.1181],[.854,.0772,.1193],[.8493,.074,.1206],[.8446,.0708,.1218],[.8399,.0676,.123],[.8353,.0644,.1243],[.8306,.0612,.1255],[.8259,.058,.1267],[.8212,.0548,.128],[.8166,.0516,.1292],[.8119,.0484,.1304],[.8072,.0452,.1316],[.8025,.042,.1329],[.7979,.0388,.1341],[.7932,.0356,.1353],[.7885,.0324,.1366],[.7838,.0292,.1378],[.7792,.026,.139],[.7745,.0228,.1403],[.7698,.0196,.1415],[.7651,.0164,.1427],[.7605,.0132,.1439],[.7558,.01,.1452],[.7511,.0068,.1464],[.7464,.0036,.1476],[.7418,4e-4,.1489],[.7346,0,.149],[.7271,0,.149],[.7196,0,.149],[.7121,0,.149],[.7046,0,.149],[.6971,0,.149],[.6896,0,.149],[.6821,0,.149],[.6746,0,.149],[.6671,0,.149],[.6596,0,.149],[.6521,0,.149],[.6446,0,.149],[.637,0,.149],[.6295,0,.149],[.622,0,.149],[.6145,0,.149],[.607,0,.149],[.5995,0,.149],[.592,0,.149],[.5845,0,.149],[.577,0,.149],[.5695,0,.149],[.562,0,.149],[.5545,0,.149],[.547,0,.149],[.5395,0,.149],[.532,0,.149],[.5245,0,.149],[.517,0,.149],[.5095,0,.149],[.502,0,.149]]},afmhot:{interpolate:!0,colors:[[0,0,0],[.0078,0,0],[.0157,0,0],[.0235,0,0],[.0314,0,0],[.0392,0,0],[.0471,0,0],[.0549,0,0],[.0627,0,0],[.0706,0,0],[.0784,0,0],[.0863,0,0],[.0941,0,0],[.102,0,0],[.1098,0,0],[.1176,0,0],[.1255,0,0],[.1333,0,0],[.1412,0,0],[.149,0,0],[.1569,0,0],[.1647,0,0],[.1725,0,0],[.1804,0,0],[.1882,0,0],[.1961,0,0],[.2039,0,0],[.2118,0,0],[.2196,0,0],[.2275,0,0],[.2353,0,0],[.2431,0,0],[.251,0,0],[.2588,0,0],[.2667,0,0],[.2745,0,0],[.2824,0,0],[.2902,0,0],[.298,0,0],[.3059,0,0],[.3137,0,0],[.3216,0,0],[.3294,0,0],[.3373,0,0],[.3451,0,0],[.3529,0,0],[.3608,0,0],[.3686,0,0],[.3765,0,0],[.3843,0,0],[.3922,0,0],[.4,0,0],[.4078,0,0],[.4157,0,0],[.4235,0,0],[.4314,0,0],[.4392,0,0],[.4471,0,0],[.4549,0,0],[.4627,0,0],[.4706,0,0],[.4784,0,0],[.4863,0,0],[.4941,0,0],[.502,.002,0],[.5098,.0098,0],[.5176,.0176,0],[.5255,.0255,0],[.5333,.0333,0],[.5412,.0412,0],[.549,.049,0],[.5569,.0569,0],[.5647,.0647,0],[.5725,.0725,0],[.5804,.0804,0],[.5882,.0882,0],[.5961,.0961,0],[.6039,.1039,0],[.6118,.1118,0],[.6196,.1196,0],[.6275,.1275,0],[.6353,.1353,0],[.6431,.1431,0],[.651,.151,0],[.6588,.1588,0],[.6667,.1667,0],[.6745,.1745,0],[.6824,.1824,0],[.6902,.1902,0],[.698,.198,0],[.7059,.2059,0],[.7137,.2137,0],[.7216,.2216,0],[.7294,.2294,0],[.7373,.2373,0],[.7451,.2451,0],[.7529,.2529,0],[.7608,.2608,0],[.7686,.2686,0],[.7765,.2765,0],[.7843,.2843,0],[.7922,.2922,0],[.8,.3,0],[.8078,.3078,0],[.8157,.3157,0],[.8235,.3235,0],[.8314,.3314,0],[.8392,.3392,0],[.8471,.3471,0],[.8549,.3549,0],[.8627,.3627,0],[.8706,.3706,0],[.8784,.3784,0],[.8863,.3863,0],[.8941,.3941,0],[.902,.402,0],[.9098,.4098,0],[.9176,.4176,0],[.9255,.4255,0],[.9333,.4333,0],[.9412,.4412,0],[.949,.449,0],[.9569,.4569,0],[.9647,.4647,0],[.9725,.4725,0],[.9804,.4804,0],[.9882,.4882,0],[.9961,.4961,0],[1,.5039,.0039],[1,.5118,.0118],[1,.5196,.0196],[1,.5275,.0275],[1,.5353,.0353],[1,.5431,.0431],[1,.551,.051],[1,.5588,.0588],[1,.5667,.0667],[1,.5745,.0745],[1,.5824,.0824],[1,.5902,.0902],[1,.598,.098],[1,.6059,.1059],[1,.6137,.1137],[1,.6216,.1216],[1,.6294,.1294],[1,.6373,.1373],[1,.6451,.1451],[1,.6529,.1529],[1,.6608,.1608],[1,.6686,.1686],[1,.6765,.1765],[1,.6843,.1843],[1,.6922,.1922],[1,.7,.2],[1,.7078,.2078],[1,.7157,.2157],[1,.7235,.2235],[1,.7314,.2314],[1,.7392,.2392],[1,.7471,.2471],[1,.7549,.2549],[1,.7627,.2627],[1,.7706,.2706],[1,.7784,.2784],[1,.7863,.2863],[1,.7941,.2941],[1,.802,.302],[1,.8098,.3098],[1,.8176,.3176],[1,.8255,.3255],[1,.8333,.3333],[1,.8412,.3412],[1,.849,.349],[1,.8569,.3569],[1,.8647,.3647],[1,.8725,.3725],[1,.8804,.3804],[1,.8882,.3882],[1,.8961,.3961],[1,.9039,.4039],[1,.9118,.4118],[1,.9196,.4196],[1,.9275,.4275],[1,.9353,.4353],[1,.9431,.4431],[1,.951,.451],[1,.9588,.4588],[1,.9667,.4667],[1,.9745,.4745],[1,.9824,.4824],[1,.9902,.4902],[1,.998,.498],[1,1,.5059],[1,1,.5137],[1,1,.5216],[1,1,.5294],[1,1,.5373],[1,1,.5451],[1,1,.5529],[1,1,.5608],[1,1,.5686],[1,1,.5765],[1,1,.5843],[1,1,.5922],[1,1,.6],[1,1,.6078],[1,1,.6157],[1,1,.6235],[1,1,.6314],[1,1,.6392],[1,1,.6471],[1,1,.6549],[1,1,.6627],[1,1,.6706],[1,1,.6784],[1,1,.6863],[1,1,.6941],[1,1,.702],[1,1,.7098],[1,1,.7176],[1,1,.7255],[1,1,.7333],[1,1,.7412],[1,1,.749],[1,1,.7569],[1,1,.7647],[1,1,.7725],[1,1,.7804],[1,1,.7882],[1,1,.7961],[1,1,.8039],[1,1,.8118],[1,1,.8196],[1,1,.8275],[1,1,.8353],[1,1,.8431],[1,1,.851],[1,1,.8588],[1,1,.8667],[1,1,.8745],[1,1,.8824],[1,1,.8902],[1,1,.898],[1,1,.9059],[1,1,.9137],[1,1,.9216],[1,1,.9294],[1,1,.9373],[1,1,.9451],[1,1,.9529],[1,1,.9608],[1,1,.9686],[1,1,.9765],[1,1,.9843],[1,1,.9922],[1,1,1]]},autumn:{interpolate:!0,colors:[[1,0,0],[1,.0039,0],[1,.0078,0],[1,.0118,0],[1,.0157,0],[1,.0196,0],[1,.0235,0],[1,.0275,0],[1,.0314,0],[1,.0353,0],[1,.0392,0],[1,.0431,0],[1,.0471,0],[1,.051,0],[1,.0549,0],[1,.0588,0],[1,.0627,0],[1,.0667,0],[1,.0706,0],[1,.0745,0],[1,.0784,0],[1,.0824,0],[1,.0863,0],[1,.0902,0],[1,.0941,0],[1,.098,0],[1,.102,0],[1,.1059,0],[1,.1098,0],[1,.1137,0],[1,.1176,0],[1,.1216,0],[1,.1255,0],[1,.1294,0],[1,.1333,0],[1,.1373,0],[1,.1412,0],[1,.1451,0],[1,.149,0],[1,.1529,0],[1,.1569,0],[1,.1608,0],[1,.1647,0],[1,.1686,0],[1,.1725,0],[1,.1765,0],[1,.1804,0],[1,.1843,0],[1,.1882,0],[1,.1922,0],[1,.1961,0],[1,.2,0],[1,.2039,0],[1,.2078,0],[1,.2118,0],[1,.2157,0],[1,.2196,0],[1,.2235,0],[1,.2275,0],[1,.2314,0],[1,.2353,0],[1,.2392,0],[1,.2431,0],[1,.2471,0],[1,.251,0],[1,.2549,0],[1,.2588,0],[1,.2627,0],[1,.2667,0],[1,.2706,0],[1,.2745,0],[1,.2784,0],[1,.2824,0],[1,.2863,0],[1,.2902,0],[1,.2941,0],[1,.298,0],[1,.302,0],[1,.3059,0],[1,.3098,0],[1,.3137,0],[1,.3176,0],[1,.3216,0],[1,.3255,0],[1,.3294,0],[1,.3333,0],[1,.3373,0],[1,.3412,0],[1,.3451,0],[1,.349,0],[1,.3529,0],[1,.3569,0],[1,.3608,0],[1,.3647,0],[1,.3686,0],[1,.3725,0],[1,.3765,0],[1,.3804,0],[1,.3843,0],[1,.3882,0],[1,.3922,0],[1,.3961,0],[1,.4,0],[1,.4039,0],[1,.4078,0],[1,.4118,0],[1,.4157,0],[1,.4196,0],[1,.4235,0],[1,.4275,0],[1,.4314,0],[1,.4353,0],[1,.4392,0],[1,.4431,0],[1,.4471,0],[1,.451,0],[1,.4549,0],[1,.4588,0],[1,.4627,0],[1,.4667,0],[1,.4706,0],[1,.4745,0],[1,.4784,0],[1,.4824,0],[1,.4863,0],[1,.4902,0],[1,.4941,0],[1,.498,0],[1,.502,0],[1,.5059,0],[1,.5098,0],[1,.5137,0],[1,.5176,0],[1,.5216,0],[1,.5255,0],[1,.5294,0],[1,.5333,0],[1,.5373,0],[1,.5412,0],[1,.5451,0],[1,.549,0],[1,.5529,0],[1,.5569,0],[1,.5608,0],[1,.5647,0],[1,.5686,0],[1,.5725,0],[1,.5765,0],[1,.5804,0],[1,.5843,0],[1,.5882,0],[1,.5922,0],[1,.5961,0],[1,.6,0],[1,.6039,0],[1,.6078,0],[1,.6118,0],[1,.6157,0],[1,.6196,0],[1,.6235,0],[1,.6275,0],[1,.6314,0],[1,.6353,0],[1,.6392,0],[1,.6431,0],[1,.6471,0],[1,.651,0],[1,.6549,0],[1,.6588,0],[1,.6627,0],[1,.6667,0],[1,.6706,0],[1,.6745,0],[1,.6784,0],[1,.6824,0],[1,.6863,0],[1,.6902,0],[1,.6941,0],[1,.698,0],[1,.702,0],[1,.7059,0],[1,.7098,0],[1,.7137,0],[1,.7176,0],[1,.7216,0],[1,.7255,0],[1,.7294,0],[1,.7333,0],[1,.7373,0],[1,.7412,0],[1,.7451,0],[1,.749,0],[1,.7529,0],[1,.7569,0],[1,.7608,0],[1,.7647,0],[1,.7686,0],[1,.7725,0],[1,.7765,0],[1,.7804,0],[1,.7843,0],[1,.7882,0],[1,.7922,0],[1,.7961,0],[1,.8,0],[1,.8039,0],[1,.8078,0],[1,.8118,0],[1,.8157,0],[1,.8196,0],[1,.8235,0],[1,.8275,0],[1,.8314,0],[1,.8353,0],[1,.8392,0],[1,.8431,0],[1,.8471,0],[1,.851,0],[1,.8549,0],[1,.8588,0],[1,.8627,0],[1,.8667,0],[1,.8706,0],[1,.8745,0],[1,.8784,0],[1,.8824,0],[1,.8863,0],[1,.8902,0],[1,.8941,0],[1,.898,0],[1,.902,0],[1,.9059,0],[1,.9098,0],[1,.9137,0],[1,.9176,0],[1,.9216,0],[1,.9255,0],[1,.9294,0],[1,.9333,0],[1,.9373,0],[1,.9412,0],[1,.9451,0],[1,.949,0],[1,.9529,0],[1,.9569,0],[1,.9608,0],[1,.9647,0],[1,.9686,0],[1,.9725,0],[1,.9765,0],[1,.9804,0],[1,.9843,0],[1,.9882,0],[1,.9922,0],[1,.9961,0],[1,1,0]]},binary:{interpolate:!0,colors:[[1,1,1],[.9961,.9961,.9961],[.9922,.9922,.9922],[.9882,.9882,.9882],[.9843,.9843,.9843],[.9804,.9804,.9804],[.9765,.9765,.9765],[.9725,.9725,.9725],[.9686,.9686,.9686],[.9647,.9647,.9647],[.9608,.9608,.9608],[.9569,.9569,.9569],[.9529,.9529,.9529],[.949,.949,.949],[.9451,.9451,.9451],[.9412,.9412,.9412],[.9373,.9373,.9373],[.9333,.9333,.9333],[.9294,.9294,.9294],[.9255,.9255,.9255],[.9216,.9216,.9216],[.9176,.9176,.9176],[.9137,.9137,.9137],[.9098,.9098,.9098],[.9059,.9059,.9059],[.902,.902,.902],[.898,.898,.898],[.8941,.8941,.8941],[.8902,.8902,.8902],[.8863,.8863,.8863],[.8824,.8824,.8824],[.8784,.8784,.8784],[.8745,.8745,.8745],[.8706,.8706,.8706],[.8667,.8667,.8667],[.8627,.8627,.8627],[.8588,.8588,.8588],[.8549,.8549,.8549],[.851,.851,.851],[.8471,.8471,.8471],[.8431,.8431,.8431],[.8392,.8392,.8392],[.8353,.8353,.8353],[.8314,.8314,.8314],[.8275,.8275,.8275],[.8235,.8235,.8235],[.8196,.8196,.8196],[.8157,.8157,.8157],[.8118,.8118,.8118],[.8078,.8078,.8078],[.8039,.8039,.8039],[.8,.8,.8],[.7961,.7961,.7961],[.7922,.7922,.7922],[.7882,.7882,.7882],[.7843,.7843,.7843],[.7804,.7804,.7804],[.7765,.7765,.7765],[.7725,.7725,.7725],[.7686,.7686,.7686],[.7647,.7647,.7647],[.7608,.7608,.7608],[.7569,.7569,.7569],[.7529,.7529,.7529],[.749,.749,.749],[.7451,.7451,.7451],[.7412,.7412,.7412],[.7373,.7373,.7373],[.7333,.7333,.7333],[.7294,.7294,.7294],[.7255,.7255,.7255],[.7216,.7216,.7216],[.7176,.7176,.7176],[.7137,.7137,.7137],[.7098,.7098,.7098],[.7059,.7059,.7059],[.702,.702,.702],[.698,.698,.698],[.6941,.6941,.6941],[.6902,.6902,.6902],[.6863,.6863,.6863],[.6824,.6824,.6824],[.6784,.6784,.6784],[.6745,.6745,.6745],[.6706,.6706,.6706],[.6667,.6667,.6667],[.6627,.6627,.6627],[.6588,.6588,.6588],[.6549,.6549,.6549],[.651,.651,.651],[.6471,.6471,.6471],[.6431,.6431,.6431],[.6392,.6392,.6392],[.6353,.6353,.6353],[.6314,.6314,.6314],[.6275,.6275,.6275],[.6235,.6235,.6235],[.6196,.6196,.6196],[.6157,.6157,.6157],[.6118,.6118,.6118],[.6078,.6078,.6078],[.6039,.6039,.6039],[.6,.6,.6],[.5961,.5961,.5961],[.5922,.5922,.5922],[.5882,.5882,.5882],[.5843,.5843,.5843],[.5804,.5804,.5804],[.5765,.5765,.5765],[.5725,.5725,.5725],[.5686,.5686,.5686],[.5647,.5647,.5647],[.5608,.5608,.5608],[.5569,.5569,.5569],[.5529,.5529,.5529],[.549,.549,.549],[.5451,.5451,.5451],[.5412,.5412,.5412],[.5373,.5373,.5373],[.5333,.5333,.5333],[.5294,.5294,.5294],[.5255,.5255,.5255],[.5216,.5216,.5216],[.5176,.5176,.5176],[.5137,.5137,.5137],[.5098,.5098,.5098],[.5059,.5059,.5059],[.502,.502,.502],[.498,.498,.498],[.4941,.4941,.4941],[.4902,.4902,.4902],[.4863,.4863,.4863],[.4824,.4824,.4824],[.4784,.4784,.4784],[.4745,.4745,.4745],[.4706,.4706,.4706],[.4667,.4667,.4667],[.4627,.4627,.4627],[.4588,.4588,.4588],[.4549,.4549,.4549],[.451,.451,.451],[.4471,.4471,.4471],[.4431,.4431,.4431],[.4392,.4392,.4392],[.4353,.4353,.4353],[.4314,.4314,.4314],[.4275,.4275,.4275],[.4235,.4235,.4235],[.4196,.4196,.4196],[.4157,.4157,.4157],[.4118,.4118,.4118],[.4078,.4078,.4078],[.4039,.4039,.4039],[.4,.4,.4],[.3961,.3961,.3961],[.3922,.3922,.3922],[.3882,.3882,.3882],[.3843,.3843,.3843],[.3804,.3804,.3804],[.3765,.3765,.3765],[.3725,.3725,.3725],[.3686,.3686,.3686],[.3647,.3647,.3647],[.3608,.3608,.3608],[.3569,.3569,.3569],[.3529,.3529,.3529],[.349,.349,.349],[.3451,.3451,.3451],[.3412,.3412,.3412],[.3373,.3373,.3373],[.3333,.3333,.3333],[.3294,.3294,.3294],[.3255,.3255,.3255],[.3216,.3216,.3216],[.3176,.3176,.3176],[.3137,.3137,.3137],[.3098,.3098,.3098],[.3059,.3059,.3059],[.302,.302,.302],[.298,.298,.298],[.2941,.2941,.2941],[.2902,.2902,.2902],[.2863,.2863,.2863],[.2824,.2824,.2824],[.2784,.2784,.2784],[.2745,.2745,.2745],[.2706,.2706,.2706],[.2667,.2667,.2667],[.2627,.2627,.2627],[.2588,.2588,.2588],[.2549,.2549,.2549],[.251,.251,.251],[.2471,.2471,.2471],[.2431,.2431,.2431],[.2392,.2392,.2392],[.2353,.2353,.2353],[.2314,.2314,.2314],[.2275,.2275,.2275],[.2235,.2235,.2235],[.2196,.2196,.2196],[.2157,.2157,.2157],[.2118,.2118,.2118],[.2078,.2078,.2078],[.2039,.2039,.2039],[.2,.2,.2],[.1961,.1961,.1961],[.1922,.1922,.1922],[.1882,.1882,.1882],[.1843,.1843,.1843],[.1804,.1804,.1804],[.1765,.1765,.1765],[.1725,.1725,.1725],[.1686,.1686,.1686],[.1647,.1647,.1647],[.1608,.1608,.1608],[.1569,.1569,.1569],[.1529,.1529,.1529],[.149,.149,.149],[.1451,.1451,.1451],[.1412,.1412,.1412],[.1373,.1373,.1373],[.1333,.1333,.1333],[.1294,.1294,.1294],[.1255,.1255,.1255],[.1216,.1216,.1216],[.1176,.1176,.1176],[.1137,.1137,.1137],[.1098,.1098,.1098],[.1059,.1059,.1059],[.102,.102,.102],[.098,.098,.098],[.0941,.0941,.0941],[.0902,.0902,.0902],[.0863,.0863,.0863],[.0824,.0824,.0824],[.0784,.0784,.0784],[.0745,.0745,.0745],[.0706,.0706,.0706],[.0667,.0667,.0667],[.0627,.0627,.0627],[.0588,.0588,.0588],[.0549,.0549,.0549],[.051,.051,.051],[.0471,.0471,.0471],[.0431,.0431,.0431],[.0392,.0392,.0392],[.0353,.0353,.0353],[.0314,.0314,.0314],[.0275,.0275,.0275],[.0235,.0235,.0235],[.0196,.0196,.0196],[.0157,.0157,.0157],[.0118,.0118,.0118],[.0078,.0078,.0078],[.0039,.0039,.0039],[0,0,0]]},bone:{interpolate:!0,colors:[[0,0,0],[.0034,.0034,.0048],[.0069,.0069,.0095],[.0103,.0103,.0143],[.0137,.0137,.0191],[.0172,.0172,.0239],[.0206,.0206,.0286],[.024,.024,.0334],[.0275,.0275,.0382],[.0309,.0309,.043],[.0343,.0343,.0477],[.0377,.0377,.0525],[.0412,.0412,.0573],[.0446,.0446,.0621],[.048,.048,.0668],[.0515,.0515,.0716],[.0549,.0549,.0764],[.0583,.0583,.0812],[.0618,.0618,.0859],[.0652,.0652,.0907],[.0686,.0686,.0955],[.0721,.0721,.1003],[.0755,.0755,.105],[.0789,.0789,.1098],[.0824,.0824,.1146],[.0858,.0858,.1194],[.0892,.0892,.1241],[.0926,.0926,.1289],[.0961,.0961,.1337],[.0995,.0995,.1384],[.1029,.1029,.1432],[.1064,.1064,.148],[.1098,.1098,.1528],[.1132,.1132,.1575],[.1167,.1167,.1623],[.1201,.1201,.1671],[.1235,.1235,.1719],[.127,.127,.1766],[.1304,.1304,.1814],[.1338,.1338,.1862],[.1373,.1373,.191],[.1407,.1407,.1957],[.1441,.1441,.2005],[.1475,.1475,.2053],[.151,.151,.2101],[.1544,.1544,.2148],[.1578,.1578,.2196],[.1613,.1613,.2244],[.1647,.1647,.2292],[.1681,.1681,.2339],[.1716,.1716,.2387],[.175,.175,.2435],[.1784,.1784,.2483],[.1819,.1819,.253],[.1853,.1853,.2578],[.1887,.1887,.2626],[.1922,.1922,.2673],[.1956,.1956,.2721],[.199,.199,.2769],[.2025,.2025,.2817],[.2059,.2059,.2864],[.2093,.2093,.2912],[.2127,.2127,.296],[.2162,.2162,.3008],[.2196,.2196,.3055],[.223,.223,.3103],[.2265,.2265,.3151],[.2299,.2299,.3199],[.2333,.2333,.3246],[.2368,.2368,.3294],[.2402,.2402,.3342],[.2436,.2436,.339],[.2471,.2471,.3437],[.2505,.2505,.3485],[.2539,.2539,.3533],[.2574,.2574,.3581],[.2608,.2608,.3628],[.2642,.2642,.3676],[.2676,.2676,.3724],[.2711,.2711,.3772],[.2745,.2745,.3819],[.2779,.2779,.3867],[.2814,.2814,.3915],[.2848,.2848,.3962],[.2882,.2882,.401],[.2917,.2917,.4058],[.2951,.2951,.4106],[.2985,.2985,.4153],[.302,.302,.4201],[.3054,.3054,.4249],[.3088,.3088,.4297],[.3123,.3123,.4344],[.3157,.3157,.4392],[.3191,.3191,.444],[.3225,.3237,.4475],[.326,.3284,.451],[.3294,.3331,.4544],[.3328,.3379,.4578],[.3363,.3426,.4613],[.3397,.3473,.4647],[.3431,.352,.4681],[.3466,.3567,.4716],[.35,.3615,.475],[.3534,.3662,.4784],[.3569,.3709,.4819],[.3603,.3756,.4853],[.3637,.3803,.4887],[.3672,.385,.4922],[.3706,.3898,.4956],[.374,.3945,.499],[.3775,.3992,.5025],[.3809,.4039,.5059],[.3843,.4086,.5093],[.3877,.4134,.5127],[.3912,.4181,.5162],[.3946,.4228,.5196],[.398,.4275,.523],[.4015,.4322,.5265],[.4049,.4369,.5299],[.4083,.4417,.5333],[.4118,.4464,.5368],[.4152,.4511,.5402],[.4186,.4558,.5436],[.4221,.4605,.5471],[.4255,.4653,.5505],[.4289,.47,.5539],[.4324,.4747,.5574],[.4358,.4794,.5608],[.4392,.4841,.5642],[.4426,.4888,.5676],[.4461,.4936,.5711],[.4495,.4983,.5745],[.4529,.503,.5779],[.4564,.5077,.5814],[.4598,.5124,.5848],[.4632,.5172,.5882],[.4667,.5219,.5917],[.4701,.5266,.5951],[.4735,.5313,.5985],[.477,.536,.602],[.4804,.5407,.6054],[.4838,.5455,.6088],[.4873,.5502,.6123],[.4907,.5549,.6157],[.4941,.5596,.6191],[.4975,.5643,.6225],[.501,.5691,.626],[.5044,.5738,.6294],[.5078,.5785,.6328],[.5113,.5832,.6363],[.5147,.5879,.6397],[.5181,.5926,.6431],[.5216,.5974,.6466],[.525,.6021,.65],[.5284,.6068,.6534],[.5319,.6115,.6569],[.5353,.6162,.6603],[.5387,.621,.6637],[.5422,.6257,.6672],[.5456,.6304,.6706],[.549,.6351,.674],[.5525,.6398,.6775],[.5559,.6445,.6809],[.5593,.6493,.6843],[.5627,.654,.6877],[.5662,.6587,.6912],[.5696,.6634,.6946],[.573,.6681,.698],[.5765,.6729,.7015],[.5799,.6776,.7049],[.5833,.6823,.7083],[.5868,.687,.7118],[.5902,.6917,.7152],[.5936,.6964,.7186],[.5971,.7012,.7221],[.6005,.7059,.7255],[.6039,.7106,.7289],[.6074,.7153,.7324],[.6108,.72,.7358],[.6142,.7248,.7392],[.6176,.7295,.7426],[.6211,.7342,.7461],[.6245,.7389,.7495],[.6279,.7436,.7529],[.6314,.7483,.7564],[.6348,.7531,.7598],[.6382,.7578,.7632],[.6417,.7625,.7667],[.6451,.7672,.7701],[.6485,.7719,.7735],[.652,.7767,.777],[.6569,.7804,.7804],[.6622,.7838,.7838],[.6676,.7873,.7873],[.6729,.7907,.7907],[.6783,.7941,.7941],[.6837,.7975,.7975],[.689,.801,.801],[.6944,.8044,.8044],[.6998,.8078,.8078],[.7051,.8113,.8113],[.7105,.8147,.8147],[.7158,.8181,.8181],[.7212,.8216,.8216],[.7266,.825,.825],[.7319,.8284,.8284],[.7373,.8319,.8319],[.7426,.8353,.8353],[.748,.8387,.8387],[.7534,.8422,.8422],[.7587,.8456,.8456],[.7641,.849,.849],[.7695,.8525,.8525],[.7748,.8559,.8559],[.7802,.8593,.8593],[.7855,.8627,.8627],[.7909,.8662,.8662],[.7963,.8696,.8696],[.8016,.873,.873],[.807,.8765,.8765],[.8123,.8799,.8799],[.8177,.8833,.8833],[.8231,.8868,.8868],[.8284,.8902,.8902],[.8338,.8936,.8936],[.8392,.8971,.8971],[.8445,.9005,.9005],[.8499,.9039,.9039],[.8552,.9074,.9074],[.8606,.9108,.9108],[.866,.9142,.9142],[.8713,.9176,.9176],[.8767,.9211,.9211],[.882,.9245,.9245],[.8874,.9279,.9279],[.8928,.9314,.9314],[.8981,.9348,.9348],[.9035,.9382,.9382],[.9089,.9417,.9417],[.9142,.9451,.9451],[.9196,.9485,.9485],[.9249,.952,.952],[.9303,.9554,.9554],[.9357,.9588,.9588],[.941,.9623,.9623],[.9464,.9657,.9657],[.9517,.9691,.9691],[.9571,.9725,.9725],[.9625,.976,.976],[.9678,.9794,.9794],[.9732,.9828,.9828],[.9786,.9863,.9863],[.9839,.9897,.9897],[.9893,.9931,.9931],[.9946,.9966,.9966],[1,1,1]]},brg:{interpolate:!0,colors:[[0,0,1],[.0078,0,.9922],[.0157,0,.9843],[.0235,0,.9765],[.0314,0,.9686],[.0392,0,.9608],[.0471,0,.9529],[.0549,0,.9451],[.0627,0,.9373],[.0706,0,.9294],[.0784,0,.9216],[.0863,0,.9137],[.0941,0,.9059],[.102,0,.898],[.1098,0,.8902],[.1176,0,.8824],[.1255,0,.8745],[.1333,0,.8667],[.1412,0,.8588],[.149,0,.851],[.1569,0,.8431],[.1647,0,.8353],[.1725,0,.8275],[.1804,0,.8196],[.1882,0,.8118],[.1961,0,.8039],[.2039,0,.7961],[.2118,0,.7882],[.2196,0,.7804],[.2275,0,.7725],[.2353,0,.7647],[.2431,0,.7569],[.251,0,.749],[.2588,0,.7412],[.2667,0,.7333],[.2745,0,.7255],[.2824,0,.7176],[.2902,0,.7098],[.298,0,.702],[.3059,0,.6941],[.3137,0,.6863],[.3216,0,.6784],[.3294,0,.6706],[.3373,0,.6627],[.3451,0,.6549],[.3529,0,.6471],[.3608,0,.6392],[.3686,0,.6314],[.3765,0,.6235],[.3843,0,.6157],[.3922,0,.6078],[.4,0,.6],[.4078,0,.5922],[.4157,0,.5843],[.4235,0,.5765],[.4314,0,.5686],[.4392,0,.5608],[.4471,0,.5529],[.4549,0,.5451],[.4627,0,.5373],[.4706,0,.5294],[.4784,0,.5216],[.4863,0,.5137],[.4941,0,.5059],[.502,0,.498],[.5098,0,.4902],[.5176,0,.4824],[.5255,0,.4745],[.5333,0,.4667],[.5412,0,.4588],[.549,0,.451],[.5569,0,.4431],[.5647,0,.4353],[.5725,0,.4275],[.5804,0,.4196],[.5882,0,.4118],[.5961,0,.4039],[.6039,0,.3961],[.6118,0,.3882],[.6196,0,.3804],[.6275,0,.3725],[.6353,0,.3647],[.6431,0,.3569],[.651,0,.349],[.6588,0,.3412],[.6667,0,.3333],[.6745,0,.3255],[.6824,0,.3176],[.6902,0,.3098],[.698,0,.302],[.7059,0,.2941],[.7137,0,.2863],[.7216,0,.2784],[.7294,0,.2706],[.7373,0,.2627],[.7451,0,.2549],[.7529,0,.2471],[.7608,0,.2392],[.7686,0,.2314],[.7765,0,.2235],[.7843,0,.2157],[.7922,0,.2078],[.8,0,.2],[.8078,0,.1922],[.8157,0,.1843],[.8235,0,.1765],[.8314,0,.1686],[.8392,0,.1608],[.8471,0,.1529],[.8549,0,.1451],[.8627,0,.1373],[.8706,0,.1294],[.8784,0,.1216],[.8863,0,.1137],[.8941,0,.1059],[.902,0,.098],[.9098,0,.0902],[.9176,0,.0824],[.9255,0,.0745],[.9333,0,.0667],[.9412,0,.0588],[.949,0,.051],[.9569,0,.0431],[.9647,0,.0353],[.9725,0,.0275],[.9804,0,.0196],[.9882,0,.0118],[.9961,0,.0039],[.9961,.0039,0],[.9882,.0118,0],[.9804,.0196,0],[.9725,.0275,0],[.9647,.0353,0],[.9569,.0431,0],[.949,.051,0],[.9412,.0588,0],[.9333,.0667,0],[.9255,.0745,0],[.9176,.0824,0],[.9098,.0902,0],[.902,.098,0],[.8941,.1059,0],[.8863,.1137,0],[.8784,.1216,0],[.8706,.1294,0],[.8627,.1373,0],[.8549,.1451,0],[.8471,.1529,0],[.8392,.1608,0],[.8314,.1686,0],[.8235,.1765,0],[.8157,.1843,0],[.8078,.1922,0],[.8,.2,0],[.7922,.2078,0],[.7843,.2157,0],[.7765,.2235,0],[.7686,.2314,0],[.7608,.2392,0],[.7529,.2471,0],[.7451,.2549,0],[.7373,.2627,0],[.7294,.2706,0],[.7216,.2784,0],[.7137,.2863,0],[.7059,.2941,0],[.698,.302,0],[.6902,.3098,0],[.6824,.3176,0],[.6745,.3255,0],[.6667,.3333,0],[.6588,.3412,0],[.651,.349,0],[.6431,.3569,0],[.6353,.3647,0],[.6275,.3725,0],[.6196,.3804,0],[.6118,.3882,0],[.6039,.3961,0],[.5961,.4039,0],[.5882,.4118,0],[.5804,.4196,0],[.5725,.4275,0],[.5647,.4353,0],[.5569,.4431,0],[.549,.451,0],[.5412,.4588,0],[.5333,.4667,0],[.5255,.4745,0],[.5176,.4824,0],[.5098,.4902,0],[.502,.498,0],[.4941,.5059,0],[.4863,.5137,0],[.4784,.5216,0],[.4706,.5294,0],[.4627,.5373,0],[.4549,.5451,0],[.4471,.5529,0],[.4392,.5608,0],[.4314,.5686,0],[.4235,.5765,0],[.4157,.5843,0],[.4078,.5922,0],[.4,.6,0],[.3922,.6078,0],[.3843,.6157,0],[.3765,.6235,0],[.3686,.6314,0],[.3608,.6392,0],[.3529,.6471,0],[.3451,.6549,0],[.3373,.6627,0],[.3294,.6706,0],[.3216,.6784,0],[.3137,.6863,0],[.3059,.6941,0],[.298,.702,0],[.2902,.7098,0],[.2824,.7176,0],[.2745,.7255,0],[.2667,.7333,0],[.2588,.7412,0],[.251,.749,0],[.2431,.7569,0],[.2353,.7647,0],[.2275,.7725,0],[.2196,.7804,0],[.2118,.7882,0],[.2039,.7961,0],[.1961,.8039,0],[.1882,.8118,0],[.1804,.8196,0],[.1725,.8275,0],[.1647,.8353,0],[.1569,.8431,0],[.149,.851,0],[.1412,.8588,0],[.1333,.8667,0],[.1255,.8745,0],[.1176,.8824,0],[.1098,.8902,0],[.102,.898,0],[.0941,.9059,0],[.0863,.9137,0],[.0784,.9216,0],[.0706,.9294,0],[.0627,.9373,0],[.0549,.9451,0],[.0471,.9529,0],[.0392,.9608,0],[.0314,.9686,0],[.0235,.9765,0],[.0157,.9843,0],[.0078,.9922,0],[0,1,0]]},bwr:{interpolate:!0,colors:[[0,0,1],[.0078,.0078,1],[.0157,.0157,1],[.0235,.0235,1],[.0314,.0314,1],[.0392,.0392,1],[.0471,.0471,1],[.0549,.0549,1],[.0627,.0627,1],[.0706,.0706,1],[.0784,.0784,1],[.0863,.0863,1],[.0941,.0941,1],[.102,.102,1],[.1098,.1098,1],[.1176,.1176,1],[.1255,.1255,1],[.1333,.1333,1],[.1412,.1412,1],[.149,.149,1],[.1569,.1569,1],[.1647,.1647,1],[.1725,.1725,1],[.1804,.1804,1],[.1882,.1882,1],[.1961,.1961,1],[.2039,.2039,1],[.2118,.2118,1],[.2196,.2196,1],[.2275,.2275,1],[.2353,.2353,1],[.2431,.2431,1],[.251,.251,1],[.2588,.2588,1],[.2667,.2667,1],[.2745,.2745,1],[.2824,.2824,1],[.2902,.2902,1],[.298,.298,1],[.3059,.3059,1],[.3137,.3137,1],[.3216,.3216,1],[.3294,.3294,1],[.3373,.3373,1],[.3451,.3451,1],[.3529,.3529,1],[.3608,.3608,1],[.3686,.3686,1],[.3765,.3765,1],[.3843,.3843,1],[.3922,.3922,1],[.4,.4,1],[.4078,.4078,1],[.4157,.4157,1],[.4235,.4235,1],[.4314,.4314,1],[.4392,.4392,1],[.4471,.4471,1],[.4549,.4549,1],[.4627,.4627,1],[.4706,.4706,1],[.4784,.4784,1],[.4863,.4863,1],[.4941,.4941,1],[.502,.502,1],[.5098,.5098,1],[.5176,.5176,1],[.5255,.5255,1],[.5333,.5333,1],[.5412,.5412,1],[.549,.549,1],[.5569,.5569,1],[.5647,.5647,1],[.5725,.5725,1],[.5804,.5804,1],[.5882,.5882,1],[.5961,.5961,1],[.6039,.6039,1],[.6118,.6118,1],[.6196,.6196,1],[.6275,.6275,1],[.6353,.6353,1],[.6431,.6431,1],[.651,.651,1],[.6588,.6588,1],[.6667,.6667,1],[.6745,.6745,1],[.6824,.6824,1],[.6902,.6902,1],[.698,.698,1],[.7059,.7059,1],[.7137,.7137,1],[.7216,.7216,1],[.7294,.7294,1],[.7373,.7373,1],[.7451,.7451,1],[.7529,.7529,1],[.7608,.7608,1],[.7686,.7686,1],[.7765,.7765,1],[.7843,.7843,1],[.7922,.7922,1],[.8,.8,1],[.8078,.8078,1],[.8157,.8157,1],[.8235,.8235,1],[.8314,.8314,1],[.8392,.8392,1],[.8471,.8471,1],[.8549,.8549,1],[.8627,.8627,1],[.8706,.8706,1],[.8784,.8784,1],[.8863,.8863,1],[.8941,.8941,1],[.902,.902,1],[.9098,.9098,1],[.9176,.9176,1],[.9255,.9255,1],[.9333,.9333,1],[.9412,.9412,1],[.949,.949,1],[.9569,.9569,1],[.9647,.9647,1],[.9725,.9725,1],[.9804,.9804,1],[.9882,.9882,1],[.9961,.9961,1],[1,.9961,.9961],[1,.9882,.9882],[1,.9804,.9804],[1,.9725,.9725],[1,.9647,.9647],[1,.9569,.9569],[1,.949,.949],[1,.9412,.9412],[1,.9333,.9333],[1,.9255,.9255],[1,.9176,.9176],[1,.9098,.9098],[1,.902,.902],[1,.8941,.8941],[1,.8863,.8863],[1,.8784,.8784],[1,.8706,.8706],[1,.8627,.8627],[1,.8549,.8549],[1,.8471,.8471],[1,.8392,.8392],[1,.8314,.8314],[1,.8235,.8235],[1,.8157,.8157],[1,.8078,.8078],[1,.8,.8],[1,.7922,.7922],[1,.7843,.7843],[1,.7765,.7765],[1,.7686,.7686],[1,.7608,.7608],[1,.7529,.7529],[1,.7451,.7451],[1,.7373,.7373],[1,.7294,.7294],[1,.7216,.7216],[1,.7137,.7137],[1,.7059,.7059],[1,.698,.698],[1,.6902,.6902],[1,.6824,.6824],[1,.6745,.6745],[1,.6667,.6667],[1,.6588,.6588],[1,.651,.651],[1,.6431,.6431],[1,.6353,.6353],[1,.6275,.6275],[1,.6196,.6196],[1,.6118,.6118],[1,.6039,.6039],[1,.5961,.5961],[1,.5882,.5882],[1,.5804,.5804],[1,.5725,.5725],[1,.5647,.5647],[1,.5569,.5569],[1,.549,.549],[1,.5412,.5412],[1,.5333,.5333],[1,.5255,.5255],[1,.5176,.5176],[1,.5098,.5098],[1,.502,.502],[1,.4941,.4941],[1,.4863,.4863],[1,.4784,.4784],[1,.4706,.4706],[1,.4627,.4627],[1,.4549,.4549],[1,.4471,.4471],[1,.4392,.4392],[1,.4314,.4314],[1,.4235,.4235],[1,.4157,.4157],[1,.4078,.4078],[1,.4,.4],[1,.3922,.3922],[1,.3843,.3843],[1,.3765,.3765],[1,.3686,.3686],[1,.3608,.3608],[1,.3529,.3529],[1,.3451,.3451],[1,.3373,.3373],[1,.3294,.3294],[1,.3216,.3216],[1,.3137,.3137],[1,.3059,.3059],[1,.298,.298],[1,.2902,.2902],[1,.2824,.2824],[1,.2745,.2745],[1,.2667,.2667],[1,.2588,.2588],[1,.251,.251],[1,.2431,.2431],[1,.2353,.2353],[1,.2275,.2275],[1,.2196,.2196],[1,.2118,.2118],[1,.2039,.2039],[1,.1961,.1961],[1,.1882,.1882],[1,.1804,.1804],[1,.1725,.1725],[1,.1647,.1647],[1,.1569,.1569],[1,.149,.149],[1,.1412,.1412],[1,.1333,.1333],[1,.1255,.1255],[1,.1176,.1176],[1,.1098,.1098],[1,.102,.102],[1,.0941,.0941],[1,.0863,.0863],[1,.0784,.0784],[1,.0706,.0706],[1,.0627,.0627],[1,.0549,.0549],[1,.0471,.0471],[1,.0392,.0392],[1,.0314,.0314],[1,.0235,.0235],[1,.0157,.0157],[1,.0078,.0078],[1,0,0]]},cividis:{interpolate:!0,colors:[[0,.1351,.3048],[0,.1381,.3111],[0,.141,.3176],[0,.144,.324],[0,.1469,.3305],[0,.1498,.3371],[0,.1527,.3437],[0,.1554,.3505],[0,.1579,.3575],[0,.1605,.3645],[0,.1631,.3716],[0,.1656,.3788],[0,.1682,.3859],[0,.1708,.3931],[0,.1734,.4004],[0,.1761,.4076],[0,.1788,.4148],[0,.1816,.4219],[0,.1846,.4288],[0,.1869,.4355],[0,.1888,.4396],[0,.191,.4411],[0,.1934,.4416],[.0036,.1959,.4416],[.0179,.1985,.4412],[.0321,.2012,.4408],[.0462,.2039,.4402],[.0584,.2066,.4395],[.069,.2094,.4389],[.0786,.2121,.4381],[.0875,.2149,.4373],[.0956,.2176,.4366],[.1034,.2204,.4358],[.1107,.2232,.4351],[.1176,.2259,.4343],[.1243,.2287,.4335],[.1307,.2315,.4328],[.1368,.2342,.4321],[.1429,.237,.4314],[.1486,.2397,.4308],[.1543,.2425,.4301],[.1597,.2452,.4295],[.1651,.248,.4289],[.1704,.2507,.4283],[.1755,.2534,.4278],[.1805,.2562,.4273],[.1855,.2589,.4268],[.1903,.2616,.4263],[.1951,.2644,.4259],[.1998,.2671,.4255],[.2044,.2698,.4251],[.2089,.2725,.4248],[.2134,.2753,.4245],[.2179,.278,.4242],[.2223,.2807,.4239],[.2266,.2834,.4237],[.2309,.2861,.4235],[.2351,.2888,.4233],[.2393,.2916,.4232],[.2435,.2943,.423],[.2476,.297,.4229],[.2517,.2997,.4229],[.2557,.3024,.4228],[.2597,.3051,.4228],[.2637,.3078,.4228],[.2677,.3105,.4228],[.2716,.3133,.4228],[.2755,.316,.423],[.2794,.3187,.423],[.2832,.3214,.4232],[.2871,.3241,.4234],[.2909,.3268,.4235],[.2947,.3295,.4237],[.2984,.3322,.424],[.3022,.335,.4242],[.3059,.3377,.4245],[.3096,.3404,.4248],[.3133,.3431,.4251],[.3169,.3458,.4255],[.3206,.3486,.4259],[.3242,.3513,.4262],[.3279,.354,.4267],[.3315,.3567,.4271],[.3351,.3595,.4276],[.3387,.3622,.4281],[.3422,.3649,.4286],[.3458,.3677,.4291],[.3493,.3704,.4297],[.3529,.3732,.4302],[.3564,.3759,.4308],[.3599,.3786,.4315],[.3634,.3814,.4321],[.3669,.3841,.4328],[.3704,.3869,.4334],[.3739,.3896,.4342],[.3774,.3924,.4349],[.3808,.3952,.4357],[.3843,.3979,.4365],[.3877,.4007,.4373],[.3912,.4035,.4381],[.3946,.4062,.439],[.398,.409,.4398],[.4014,.4118,.4407],[.4048,.4146,.4416],[.4082,.4174,.4426],[.4116,.4201,.4436],[.415,.4229,.4446],[.4184,.4257,.4456],[.4217,.4285,.4466],[.4251,.4313,.4477],[.4285,.4341,.4489],[.4318,.437,.45],[.4352,.4398,.4511],[.4385,.4426,.4523],[.4418,.4454,.4537],[.4451,.4482,.4549],[.4484,.4511,.4563],[.4518,.4539,.4576],[.4551,.4567,.459],[.4584,.4596,.4605],[.4616,.4624,.462],[.4649,.4652,.4634],[.4683,.4681,.4649],[.4715,.471,.4664],[.4748,.4738,.4677],[.4782,.4767,.4688],[.4816,.4796,.4698],[.4851,.4825,.4704],[.4887,.4853,.471],[.4923,.4882,.4715],[.4959,.4911,.4718],[.4996,.494,.472],[.5032,.4969,.4723],[.5069,.4997,.4724],[.5105,.5026,.4726],[.5142,.5055,.4726],[.5179,.5085,.4727],[.5216,.5114,.4726],[.5253,.5143,.4727],[.5291,.5172,.4725],[.5328,.5201,.4724],[.5366,.5231,.4724],[.5403,.526,.4722],[.5441,.5289,.4719],[.5478,.5319,.4717],[.5516,.5348,.4714],[.5554,.5378,.4711],[.5592,.5408,.4708],[.563,.5437,.4705],[.5668,.5467,.47],[.5706,.5497,.4696],[.5744,.5527,.4692],[.5782,.5557,.4687],[.5821,.5587,.4681],[.5859,.5617,.4676],[.5898,.5647,.4671],[.5936,.5677,.4664],[.5975,.5707,.4658],[.6014,.5737,.4651],[.6052,.5768,.4644],[.6091,.5798,.4636],[.613,.5829,.463],[.6169,.5859,.4622],[.6208,.589,.4614],[.6247,.592,.4606],[.6286,.5951,.4596],[.6325,.5982,.4587],[.6364,.6013,.4578],[.6404,.6044,.4568],[.6443,.6074,.4559],[.6482,.6106,.4548],[.6522,.6137,.4537],[.6561,.6168,.4527],[.6601,.6199,.4515],[.6641,.623,.4503],[.668,.6262,.4493],[.672,.6293,.448],[.676,.6325,.4467],[.68,.6356,.4454],[.6839,.6388,.4443],[.688,.642,.4429],[.692,.6451,.4415],[.696,.6483,.4401],[.7,.6515,.4386],[.704,.6547,.4371],[.7081,.6579,.4356],[.7121,.6612,.4341],[.7162,.6644,.4324],[.7202,.6676,.4308],[.7243,.6709,.4292],[.7283,.6741,.4276],[.7324,.6774,.4257],[.7365,.6806,.424],[.7406,.6839,.4221],[.7447,.6872,.4204],[.7488,.6905,.4184],[.7529,.6938,.4165],[.757,.6971,.4147],[.7611,.7004,.4126],[.7652,.7037,.4106],[.7694,.707,.4085],[.7735,.7104,.4064],[.7777,.7137,.4041],[.7818,.7171,.402],[.786,.7204,.3996],[.7901,.7238,.3974],[.7943,.7272,.395],[.7985,.7306,.3926],[.8027,.734,.3902],[.8069,.7374,.3877],[.8111,.7408,.3852],[.8153,.7442,.3825],[.8195,.7477,.3798],[.8237,.7511,.377],[.828,.7546,.3743],[.8322,.758,.3715],[.8364,.7615,.3687],[.8407,.765,.3657],[.845,.7684,.3627],[.8492,.7719,.3597],[.8535,.7755,.3565],[.8578,.779,.3533],[.8621,.7825,.35],[.8664,.786,.3466],[.8707,.7896,.3433],[.8751,.7931,.3397],[.8794,.7967,.3362],[.8837,.8003,.3326],[.8881,.8038,.3288],[.8924,.8074,.325],[.8968,.811,.321],[.9012,.8146,.317],[.9056,.8183,.3129],[.91,.8219,.3086],[.9144,.8255,.3043],[.9188,.8292,.3],[.9233,.8328,.2952],[.9277,.8365,.2906],[.9322,.8402,.2859],[.9367,.8438,.2809],[.9411,.8475,.2758],[.9457,.8512,.2705],[.9502,.8549,.2651],[.9547,.8586,.2594],[.9593,.8624,.2536],[.9639,.8661,.2474],[.9685,.8698,.2413],[.9731,.8736,.2347],[.9778,.8773,.228],[.9825,.881,.2209],[.9873,.8847,.2133],[.9922,.8884,.2055],[.9948,.893,.2034],[.9952,.8984,.2076],[.9955,.9039,.2124],[.9957,.9093,.2178]]},cool:{interpolate:!0,colors:[[0,1,1],[.0039,.9961,1],[.0078,.9922,1],[.0118,.9882,1],[.0157,.9843,1],[.0196,.9804,1],[.0235,.9765,1],[.0275,.9725,1],[.0314,.9686,1],[.0353,.9647,1],[.0392,.9608,1],[.0431,.9569,1],[.0471,.9529,1],[.051,.949,1],[.0549,.9451,1],[.0588,.9412,1],[.0627,.9373,1],[.0667,.9333,1],[.0706,.9294,1],[.0745,.9255,1],[.0784,.9216,1],[.0824,.9176,1],[.0863,.9137,1],[.0902,.9098,1],[.0941,.9059,1],[.098,.902,1],[.102,.898,1],[.1059,.8941,1],[.1098,.8902,1],[.1137,.8863,1],[.1176,.8824,1],[.1216,.8784,1],[.1255,.8745,1],[.1294,.8706,1],[.1333,.8667,1],[.1373,.8627,1],[.1412,.8588,1],[.1451,.8549,1],[.149,.851,1],[.1529,.8471,1],[.1569,.8431,1],[.1608,.8392,1],[.1647,.8353,1],[.1686,.8314,1],[.1725,.8275,1],[.1765,.8235,1],[.1804,.8196,1],[.1843,.8157,1],[.1882,.8118,1],[.1922,.8078,1],[.1961,.8039,1],[.2,.8,1],[.2039,.7961,1],[.2078,.7922,1],[.2118,.7882,1],[.2157,.7843,1],[.2196,.7804,1],[.2235,.7765,1],[.2275,.7725,1],[.2314,.7686,1],[.2353,.7647,1],[.2392,.7608,1],[.2431,.7569,1],[.2471,.7529,1],[.251,.749,1],[.2549,.7451,1],[.2588,.7412,1],[.2627,.7373,1],[.2667,.7333,1],[.2706,.7294,1],[.2745,.7255,1],[.2784,.7216,1],[.2824,.7176,1],[.2863,.7137,1],[.2902,.7098,1],[.2941,.7059,1],[.298,.702,1],[.302,.698,1],[.3059,.6941,1],[.3098,.6902,1],[.3137,.6863,1],[.3176,.6824,1],[.3216,.6784,1],[.3255,.6745,1],[.3294,.6706,1],[.3333,.6667,1],[.3373,.6627,1],[.3412,.6588,1],[.3451,.6549,1],[.349,.651,1],[.3529,.6471,1],[.3569,.6431,1],[.3608,.6392,1],[.3647,.6353,1],[.3686,.6314,1],[.3725,.6275,1],[.3765,.6235,1],[.3804,.6196,1],[.3843,.6157,1],[.3882,.6118,1],[.3922,.6078,1],[.3961,.6039,1],[.4,.6,1],[.4039,.5961,1],[.4078,.5922,1],[.4118,.5882,1],[.4157,.5843,1],[.4196,.5804,1],[.4235,.5765,1],[.4275,.5725,1],[.4314,.5686,1],[.4353,.5647,1],[.4392,.5608,1],[.4431,.5569,1],[.4471,.5529,1],[.451,.549,1],[.4549,.5451,1],[.4588,.5412,1],[.4627,.5373,1],[.4667,.5333,1],[.4706,.5294,1],[.4745,.5255,1],[.4784,.5216,1],[.4824,.5176,1],[.4863,.5137,1],[.4902,.5098,1],[.4941,.5059,1],[.498,.502,1],[.502,.498,1],[.5059,.4941,1],[.5098,.4902,1],[.5137,.4863,1],[.5176,.4824,1],[.5216,.4784,1],[.5255,.4745,1],[.5294,.4706,1],[.5333,.4667,1],[.5373,.4627,1],[.5412,.4588,1],[.5451,.4549,1],[.549,.451,1],[.5529,.4471,1],[.5569,.4431,1],[.5608,.4392,1],[.5647,.4353,1],[.5686,.4314,1],[.5725,.4275,1],[.5765,.4235,1],[.5804,.4196,1],[.5843,.4157,1],[.5882,.4118,1],[.5922,.4078,1],[.5961,.4039,1],[.6,.4,1],[.6039,.3961,1],[.6078,.3922,1],[.6118,.3882,1],[.6157,.3843,1],[.6196,.3804,1],[.6235,.3765,1],[.6275,.3725,1],[.6314,.3686,1],[.6353,.3647,1],[.6392,.3608,1],[.6431,.3569,1],[.6471,.3529,1],[.651,.349,1],[.6549,.3451,1],[.6588,.3412,1],[.6627,.3373,1],[.6667,.3333,1],[.6706,.3294,1],[.6745,.3255,1],[.6784,.3216,1],[.6824,.3176,1],[.6863,.3137,1],[.6902,.3098,1],[.6941,.3059,1],[.698,.302,1],[.702,.298,1],[.7059,.2941,1],[.7098,.2902,1],[.7137,.2863,1],[.7176,.2824,1],[.7216,.2784,1],[.7255,.2745,1],[.7294,.2706,1],[.7333,.2667,1],[.7373,.2627,1],[.7412,.2588,1],[.7451,.2549,1],[.749,.251,1],[.7529,.2471,1],[.7569,.2431,1],[.7608,.2392,1],[.7647,.2353,1],[.7686,.2314,1],[.7725,.2275,1],[.7765,.2235,1],[.7804,.2196,1],[.7843,.2157,1],[.7882,.2118,1],[.7922,.2078,1],[.7961,.2039,1],[.8,.2,1],[.8039,.1961,1],[.8078,.1922,1],[.8118,.1882,1],[.8157,.1843,1],[.8196,.1804,1],[.8235,.1765,1],[.8275,.1725,1],[.8314,.1686,1],[.8353,.1647,1],[.8392,.1608,1],[.8431,.1569,1],[.8471,.1529,1],[.851,.149,1],[.8549,.1451,1],[.8588,.1412,1],[.8627,.1373,1],[.8667,.1333,1],[.8706,.1294,1],[.8745,.1255,1],[.8784,.1216,1],[.8824,.1176,1],[.8863,.1137,1],[.8902,.1098,1],[.8941,.1059,1],[.898,.102,1],[.902,.098,1],[.9059,.0941,1],[.9098,.0902,1],[.9137,.0863,1],[.9176,.0824,1],[.9216,.0784,1],[.9255,.0745,1],[.9294,.0706,1],[.9333,.0667,1],[.9373,.0627,1],[.9412,.0588,1],[.9451,.0549,1],[.949,.051,1],[.9529,.0471,1],[.9569,.0431,1],[.9608,.0392,1],[.9647,.0353,1],[.9686,.0314,1],[.9725,.0275,1],[.9765,.0235,1],[.9804,.0196,1],[.9843,.0157,1],[.9882,.0118,1],[.9922,.0078,1],[.9961,.0039,1],[1,0,1]]},coolwarm:{interpolate:!0,colors:[[.2298,.2987,.7537],[.2344,.3055,.7597],[.2389,.3124,.7657],[.2435,.3192,.7717],[.2481,.326,.7777],[.2527,.3328,.7837],[.2572,.3397,.7897],[.2618,.3465,.7957],[.2664,.3533,.8016],[.2711,.36,.8071],[.2758,.3667,.8126],[.2805,.3734,.818],[.2853,.3801,.8235],[.29,.3868,.8289],[.2947,.3935,.8344],[.2994,.4002,.8398],[.3042,.4069,.8453],[.3091,.4135,.8501],[.3139,.4201,.855],[.3188,.4266,.8599],[.3237,.4332,.8647],[.3286,.4397,.8696],[.3335,.4463,.8745],[.3384,.4528,.8793],[.3433,.4594,.8841],[.3483,.4657,.8883],[.3534,.4721,.8926],[.3584,.4784,.8968],[.3635,.4848,.901],[.3685,.4911,.9052],[.3736,.4975,.9095],[.3786,.5039,.9137],[.3837,.5102,.9178],[.3889,.5163,.9214],[.394,.5224,.9249],[.3992,.5285,.9285],[.4044,.5346,.932],[.4096,.5408,.9355],[.4148,.5469,.9391],[.42,.553,.9426],[.4252,.5591,.9461],[.4305,.5649,.9489],[.4358,.5707,.9517],[.4411,.5765,.9545],[.4464,.5824,.9574],[.4517,.5882,.9602],[.457,.594,.963],[.4624,.5998,.9659],[.4677,.6056,.9685],[.4731,.6111,.9706],[.4785,.6166,.9727],[.4839,.622,.9748],[.4892,.6275,.9769],[.4946,.633,.979],[.5,.6385,.9811],[.5054,.644,.9832],[.5108,.6494,.9851],[.5163,.6545,.9864],[.5217,.6596,.9877],[.5271,.6647,.9891],[.5326,.6698,.9904],[.538,.6749,.9917],[.5434,.68,.9931],[.5489,.6851,.9944],[.5543,.6901,.9955],[.5597,.6948,.9961],[.5652,.6994,.9966],[.5706,.7041,.9972],[.5761,.7088,.9978],[.5815,.7135,.9983],[.5869,.7181,.9989],[.5924,.7228,.9994],[.5978,.7273,.9998],[.6032,.7315,.9996],[.6085,.7357,.9994],[.6139,.7399,.9991],[.6193,.7441,.9989],[.6247,.7483,.9987],[.6301,.7525,.9985],[.6355,.7567,.9983],[.6408,.7608,.9978],[.6461,.7644,.9969],[.6514,.7681,.9959],[.6567,.7718,.9949],[.662,.7755,.9939],[.6673,.7792,.993],[.6725,.7829,.992],[.6778,.7865,.991],[.6831,.79,.9898],[.6882,.7932,.988],[.6933,.7963,.9863],[.6985,.7994,.9846],[.7036,.8026,.9828],[.7087,.8057,.9811],[.7139,.8089,.9794],[.719,.812,.9777],[.724,.8149,.9757],[.729,.8175,.9732],[.7339,.82,.9707],[.7388,.8226,.9683],[.7438,.8251,.9658],[.7487,.8277,.9633],[.7536,.8302,.9609],[.7585,.8328,.9584],[.7634,.8351,.9557],[.768,.837,.9525],[.7727,.839,.9493],[.7774,.8409,.9461],[.782,.8429,.943],[.7867,.8448,.9398],[.7914,.8468,.9366],[.7961,.8487,.9335],[.8006,.8504,.93],[.805,.8517,.9262],[.8093,.853,.9223],[.8137,.8543,.9185],[.8181,.8556,.9146],[.8224,.8569,.9108],[.8268,.8582,.907],[.8311,.8595,.9031],[.8353,.8605,.899],[.8394,.8612,.8945],[.8434,.8618,.89],[.8474,.8625,.8855],[.8514,.8631,.8811],[.8554,.8638,.8766],[.8594,.8644,.8721],[.8634,.8651,.8676],[.8674,.8644,.8626],[.8715,.8623,.857],[.8756,.8602,.8514],[.8796,.8582,.8458],[.8837,.8561,.8403],[.8878,.854,.8347],[.8918,.852,.8291],[.8959,.8499,.8235],[.8995,.8475,.8178],[.9028,.8448,.812],[.9062,.8421,.8062],[.9095,.8394,.8003],[.9128,.8367,.7945],[.9161,.834,.7887],[.9194,.8313,.7829],[.9227,.8286,.7771],[.9256,.8255,.7711],[.9281,.8222,.7651],[.9307,.8189,.7591],[.9332,.8156,.7532],[.9358,.8122,.7472],[.9383,.8089,.7412],[.9409,.8056,.7352],[.9434,.8023,.7292],[.9455,.7986,.7231],[.9473,.7947,.717],[.9492,.7908,.7109],[.951,.7869,.7048],[.9528,.783,.6986],[.9546,.7791,.6925],[.9564,.7751,.6864],[.9582,.7712,.6803],[.9595,.767,.6741],[.9606,.7625,.668],[.9616,.758,.6618],[.9627,.7536,.6556],[.9638,.7491,.6494],[.9648,.7446,.6432],[.9659,.7401,.6371],[.967,.7357,.6309],[.9675,.7308,.6247],[.9679,.7258,.6185],[.9682,.7208,.6123],[.9685,.7158,.6061],[.9689,.7108,.5999],[.9692,.7058,.5937],[.9695,.7008,.5875],[.9699,.6958,.5813],[.9697,.6905,.5751],[.9693,.685,.569],[.9689,.6795,.5628],[.9685,.674,.5566],[.9681,.6685,.5505],[.9677,.663,.5443],[.9673,.6575,.5382],[.9669,.652,.532],[.966,.6461,.5259],[.9649,.6402,.5198],[.9638,.6342,.5137],[.9627,.6282,.5076],[.9616,.6222,.5016],[.9605,.6163,.4955],[.9594,.6103,.4894],[.9583,.6043,.4833],[.9567,.598,.4773],[.9549,.5916,.4713],[.9531,.5852,.4654],[.9513,.5788,.4594],[.9495,.5724,.4534],[.9477,.566,.4475],[.9459,.5596,.4415],[.9441,.5532,.4355],[.9417,.5464,.4297],[.9393,.5396,.4239],[.9368,.5327,.4181],[.9343,.5259,.4123],[.9318,.5191,.4065],[.9294,.5123,.4007],[.9269,.5054,.3949],[.9244,.4986,.3891],[.9214,.4914,.3834],[.9183,.4842,.3778],[.9152,.4769,.3722],[.912,.4697,.3666],[.9089,.4624,.361],[.9058,.4552,.3553],[.9027,.4479,.3497],[.8995,.4407,.3441],[.8959,.4331,.3387],[.8921,.4254,.3333],[.8884,.4177,.3279],[.8846,.41,.3225],[.8809,.4023,.3171],[.8771,.3946,.3117],[.8734,.387,.3063],[.8697,.3793,.3009],[.8654,.3711,.2958],[.8611,.3629,.2906],[.8567,.3547,.2855],[.8524,.3465,.2803],[.848,.3383,.2752],[.8437,.3301,.2701],[.8394,.3219,.2649],[.835,.3136,.2598],[.8302,.3047,.2549],[.8253,.2957,.25],[.8204,.2868,.2452],[.8155,.2778,.2403],[.8106,.2688,.2354],[.8057,.2598,.2306],[.8008,.2508,.2257],[.7959,.2418,.2208],[.7906,.2314,.2162],[.7852,.2209,.2117],[.7797,.2103,.2071],[.7743,.1998,.2025],[.7689,.1892,.198],[.7635,.1787,.1934],[.7581,.1681,.1888],[.7527,.1576,.1843],[.7468,.14,.18],[.741,.1222,.1757],[.7351,.1045,.1715],[.7292,.0867,.1672],[.7233,.0689,.163],[.7174,.0511,.1587],[.7116,.0333,.1545],[.7057,.0156,.1502]]},copper:{interpolate:!0,colors:[[0,0,0],[.0048,.0031,.002],[.0097,.0061,.0039],[.0145,.0092,.0059],[.0194,.0123,.0078],[.0242,.0153,.0098],[.0291,.0184,.0117],[.0339,.0214,.0137],[.0388,.0245,.0156],[.0436,.0276,.0176],[.0484,.0306,.0195],[.0533,.0337,.0215],[.0581,.0368,.0234],[.063,.0398,.0254],[.0678,.0429,.0273],[.0727,.046,.0293],[.0775,.049,.0312],[.0824,.0521,.0332],[.0872,.0551,.0351],[.092,.0582,.0371],[.0969,.0613,.039],[.1017,.0643,.041],[.1066,.0674,.0429],[.1114,.0705,.0449],[.1163,.0735,.0468],[.1211,.0766,.0488],[.126,.0797,.0507],[.1308,.0827,.0527],[.1356,.0858,.0546],[.1405,.0888,.0566],[.1453,.0919,.0585],[.1502,.095,.0605],[.155,.098,.0624],[.1599,.1011,.0644],[.1647,.1042,.0663],[.1696,.1072,.0683],[.1744,.1103,.0702],[.1792,.1134,.0722],[.1841,.1164,.0741],[.1889,.1195,.0761],[.1938,.1225,.078],[.1986,.1256,.08],[.2035,.1287,.0819],[.2083,.1317,.0839],[.2131,.1348,.0858],[.218,.1379,.0878],[.2228,.1409,.0897],[.2277,.144,.0917],[.2325,.147,.0936],[.2374,.1501,.0956],[.2422,.1532,.0975],[.2471,.1562,.0995],[.2519,.1593,.1015],[.2567,.1624,.1034],[.2616,.1654,.1054],[.2664,.1685,.1073],[.2713,.1716,.1093],[.2761,.1746,.1112],[.281,.1777,.1132],[.2858,.1807,.1151],[.2907,.1838,.1171],[.2955,.1869,.119],[.3003,.1899,.121],[.3052,.193,.1229],[.31,.1961,.1249],[.3149,.1991,.1268],[.3197,.2022,.1288],[.3246,.2053,.1307],[.3294,.2083,.1327],[.3343,.2114,.1346],[.3391,.2144,.1366],[.3439,.2175,.1385],[.3488,.2206,.1405],[.3536,.2236,.1424],[.3585,.2267,.1444],[.3633,.2298,.1463],[.3682,.2328,.1483],[.373,.2359,.1502],[.3779,.239,.1522],[.3827,.242,.1541],[.3875,.2451,.1561],[.3924,.2481,.158],[.3972,.2512,.16],[.4021,.2543,.1619],[.4069,.2573,.1639],[.4118,.2604,.1658],[.4166,.2635,.1678],[.4215,.2665,.1697],[.4263,.2696,.1717],[.4311,.2727,.1736],[.436,.2757,.1756],[.4408,.2788,.1775],[.4457,.2818,.1795],[.4505,.2849,.1814],[.4554,.288,.1834],[.4602,.291,.1853],[.4651,.2941,.1873],[.4699,.2972,.1892],[.4747,.3002,.1912],[.4796,.3033,.1931],[.4844,.3064,.1951],[.4893,.3094,.197],[.4941,.3125,.199],[.499,.3155,.201],[.5038,.3186,.2029],[.5087,.3217,.2049],[.5135,.3247,.2068],[.5183,.3278,.2088],[.5232,.3309,.2107],[.528,.3339,.2127],[.5329,.337,.2146],[.5377,.3401,.2166],[.5426,.3431,.2185],[.5474,.3462,.2205],[.5522,.3492,.2224],[.5571,.3523,.2244],[.5619,.3554,.2263],[.5668,.3584,.2283],[.5716,.3615,.2302],[.5765,.3646,.2322],[.5813,.3676,.2341],[.5862,.3707,.2361],[.591,.3738,.238],[.5958,.3768,.24],[.6007,.3799,.2419],[.6055,.3829,.2439],[.6104,.386,.2458],[.6152,.3891,.2478],[.6201,.3921,.2497],[.6249,.3952,.2517],[.6298,.3983,.2536],[.6346,.4013,.2556],[.6394,.4044,.2575],[.6443,.4074,.2595],[.6491,.4105,.2614],[.654,.4136,.2634],[.6588,.4166,.2653],[.6637,.4197,.2673],[.6685,.4228,.2692],[.6734,.4258,.2712],[.6782,.4289,.2731],[.683,.432,.2751],[.6879,.435,.277],[.6927,.4381,.279],[.6976,.4411,.2809],[.7024,.4442,.2829],[.7073,.4473,.2848],[.7121,.4503,.2868],[.717,.4534,.2887],[.7218,.4565,.2907],[.7266,.4595,.2926],[.7315,.4626,.2946],[.7363,.4657,.2965],[.7412,.4687,.2985],[.746,.4718,.3005],[.7509,.4748,.3024],[.7557,.4779,.3044],[.7606,.481,.3063],[.7654,.484,.3083],[.7702,.4871,.3102],[.7751,.4902,.3122],[.7799,.4932,.3141],[.7848,.4963,.3161],[.7896,.4994,.318],[.7945,.5024,.32],[.7993,.5055,.3219],[.8042,.5085,.3239],[.809,.5116,.3258],[.8138,.5147,.3278],[.8187,.5177,.3297],[.8235,.5208,.3317],[.8284,.5239,.3336],[.8332,.5269,.3356],[.8381,.53,.3375],[.8429,.5331,.3395],[.8478,.5361,.3414],[.8526,.5392,.3434],[.8574,.5422,.3453],[.8623,.5453,.3473],[.8671,.5484,.3492],[.872,.5514,.3512],[.8768,.5545,.3531],[.8817,.5576,.3551],[.8865,.5606,.357],[.8913,.5637,.359],[.8962,.5668,.3609],[.901,.5698,.3629],[.9059,.5729,.3648],[.9107,.5759,.3668],[.9156,.579,.3687],[.9204,.5821,.3707],[.9253,.5851,.3726],[.9301,.5882,.3746],[.9349,.5913,.3765],[.9398,.5943,.3785],[.9446,.5974,.3804],[.9495,.6005,.3824],[.9543,.6035,.3843],[.9592,.6066,.3863],[.964,.6096,.3882],[.9689,.6127,.3902],[.9737,.6158,.3921],[.9785,.6188,.3941],[.9834,.6219,.396],[.9882,.625,.398],[.9931,.628,.4],[.9979,.6311,.4019],[1,.6342,.4039],[1,.6372,.4058],[1,.6403,.4078],[1,.6433,.4097],[1,.6464,.4117],[1,.6495,.4136],[1,.6525,.4156],[1,.6556,.4175],[1,.6587,.4195],[1,.6617,.4214],[1,.6648,.4234],[1,.6678,.4253],[1,.6709,.4273],[1,.674,.4292],[1,.677,.4312],[1,.6801,.4331],[1,.6832,.4351],[1,.6862,.437],[1,.6893,.439],[1,.6924,.4409],[1,.6954,.4429],[1,.6985,.4448],[1,.7015,.4468],[1,.7046,.4487],[1,.7077,.4507],[1,.7107,.4526],[1,.7138,.4546],[1,.7169,.4565],[1,.7199,.4585],[1,.723,.4604],[1,.7261,.4624],[1,.7291,.4643],[1,.7322,.4663],[1,.7352,.4682],[1,.7383,.4702],[1,.7414,.4721],[1,.7444,.4741],[1,.7475,.476],[1,.7506,.478],[1,.7536,.4799],[1,.7567,.4819],[1,.7598,.4838],[1,.7628,.4858],[1,.7659,.4877],[1,.7689,.4897],[1,.772,.4916],[1,.7751,.4936],[1,.7781,.4955],[1,.7812,.4975]]},cubehelix:{interpolate:!0,colors:[[0,0,0],[.0067,.0021,.006],[.0133,.0043,.0122],[.0196,.0065,.0186],[.0257,.0088,.0252],[.0317,.0112,.0319],[.0374,.0136,.0389],[.0429,.0161,.046],[.0482,.0187,.0533],[.0533,.0214,.0607],[.0581,.0242,.0682],[.0627,.0271,.0758],[.067,.0301,.0835],[.0711,.0332,.0912],[.0749,.0365,.0991],[.0785,.0398,.1069],[.0819,.0433,.1148],[.085,.0469,.1227],[.0879,.0506,.1306],[.0905,.0545,.1385],[.0928,.0584,.1464],[.095,.0625,.1542],[.0969,.0668,.1619],[.0985,.0712,.1696],[.1,.0757,.1771],[.1012,.0803,.1846],[.1022,.0851,.192],[.103,.09,.1992],[.1036,.095,.2062],[.104,.1001,.2131],[.1043,.1054,.2199],[.1043,.1108,.2264],[.1042,.1163,.2328],[.1039,.122,.2389],[.1035,.1277,.2448],[.103,.1336,.2505],[.1023,.1395,.256],[.1015,.1456,.2612],[.1007,.1518,.2662],[.0997,.158,.2709],[.0987,.1644,.2754],[.0976,.1708,.2796],[.0964,.1773,.2835],[.0952,.1839,.2871],[.094,.1905,.2904],[.0928,.1972,.2935],[.0916,.2039,.2962],[.0904,.2107,.2987],[.0892,.2176,.3009],[.0881,.2244,.3027],[.0871,.2313,.3043],[.0861,.2382,.3056],[.0851,.2452,.3066],[.0843,.2521,.3073],[.0836,.259,.3077],[.083,.2659,.3079],[.0826,.2728,.3077],[.0823,.2797,.3073],[.0821,.2866,.3066],[.0822,.2934,.3057],[.0824,.3001,.3045],[.0828,.3069,.303],[.0834,.3135,.3014],[.0842,.3201,.2994],[.0852,.3266,.2973],[.0865,.3331,.295],[.088,.3394,.2924],[.0898,.3457,.2897],[.0918,.3518,.2868],[.0941,.3579,.2838],[.0966,.3638,.2806],[.0994,.3697,.2772],[.1025,.3754,.2737],[.1059,.381,.2702],[.1096,.3864,.2665],[.1136,.3918,.2627],[.1179,.3969,.2589],[.1225,.402,.255],[.1274,.4069,.2511],[.1325,.4116,.2471],[.138,.4162,.2431],[.1438,.4207,.2392],[.1499,.4249,.2352],[.1563,.4291,.2313],[.163,.433,.2275],[.17,.4368,.2237],[.1773,.4404,.22],[.1849,.4439,.2164],[.1928,.4472,.2129],[.201,.4503,.2096],[.2094,.4533,.2064],[.2181,.4561,.2033],[.2271,.4587,.2004],[.2363,.4611,.1977],[.2457,.4634,.1952],[.2555,.4656,.1929],[.2654,.4676,.1908],[.2755,.4694,.189],[.2859,.4711,.1874],[.2965,.4726,.1861],[.3072,.474,.185],[.3182,.4752,.1842],[.3293,.4763,.1837],[.3405,.4772,.1835],[.3519,.4781,.1836],[.3635,.4788,.1841],[.3751,.4794,.1848],[.3869,.4798,.1859],[.3987,.4802,.1873],[.4106,.4804,.1891],[.4226,.4806,.1912],[.4346,.4807,.1937],[.4467,.4807,.1965],[.4588,.4806,.1997],[.4709,.4804,.2033],[.4829,.4802,.2072],[.495,.4799,.2115],[.507,.4796,.2161],[.519,.4792,.2211],[.5309,.4788,.2265],[.5427,.4784,.2322],[.5544,.4779,.2383],[.5661,.4774,.2448],[.5776,.477,.2516],[.5889,.4765,.2587],[.6002,.476,.2662],[.6112,.4756,.2741],[.6221,.4752,.2822],[.6328,.4748,.2907],[.6434,.4745,.2995],[.6537,.4742,.3086],[.6638,.4739,.318],[.6736,.4738,.3277],[.6832,.4737,.3376],[.6926,.4736,.3478],[.7017,.4737,.3583],[.7106,.4738,.369],[.7192,.4741,.38],[.7274,.4744,.3912],[.7355,.4749,.4025],[.7432,.4755,.4141],[.7506,.4761,.4258],[.7577,.477,.4378],[.7645,.4779,.4498],[.7709,.479,.462],[.7771,.4802,.4743],[.7829,.4816,.4867],[.7884,.4831,.4992],[.7936,.4848,.5118],[.7985,.4866,.5244],[.803,.4886,.5371],[.8072,.4907,.5498],[.8111,.493,.5625],[.8146,.4955,.5753],[.8179,.4981,.5879],[.8208,.5009,.6006],[.8234,.5039,.6132],[.8256,.5071,.6257],[.8276,.5104,.6382],[.8293,.5139,.6506],[.8307,.5175,.6628],[.8318,.5213,.6749],[.8326,.5253,.6869],[.8331,.5295,.6988],[.8334,.5338,.7104],[.8334,.5383,.7219],[.8332,.543,.7332],[.8327,.5478,.7443],[.832,.5528,.7552],[.8311,.5579,.7659],[.83,.5632,.7763],[.8286,.5686,.7864],[.8271,.5742,.7964],[.8254,.5799,.806],[.8236,.5857,.8154],[.8216,.5917,.8245],[.8195,.5978,.8333],[.8172,.604,.8418],[.8149,.6103,.85],[.8124,.6167,.8579],[.8099,.6233,.8654],[.8073,.6299,.8727],[.8046,.6366,.8797],[.8019,.6434,.8863],[.7992,.6502,.8926],[.7964,.6571,.8986],[.7937,.6641,.9042],[.791,.6712,.9096],[.7883,.6783,.9146],[.7856,.6854,.9193],[.783,.6926,.9236],[.7804,.6997,.9277],[.778,.7069,.9314],[.7756,.7142,.9349],[.7733,.7214,.938],[.7711,.7286,.9409],[.7691,.7358,.9434],[.7672,.743,.9457],[.7655,.7501,.9477],[.7639,.7573,.9494],[.7625,.7644,.9509],[.7613,.7714,.9521],[.7602,.7784,.9531],[.7594,.7853,.9538],[.7587,.7922,.9544],[.7583,.799,.9547],[.7581,.8057,.9549],[.7581,.8124,.9548],[.7584,.8189,.9546],[.7588,.8254,.9543],[.7596,.8318,.9538],[.7606,.838,.9531],[.7618,.8442,.9524],[.7633,.8502,.9516],[.765,.8562,.9506],[.767,.862,.9496],[.7693,.8677,.9486],[.7718,.8733,.9475],[.7745,.8787,.9463],[.7776,.884,.9452],[.7808,.8892,.9441],[.7844,.8943,.9429],[.7882,.8992,.9419],[.7922,.904,.9408],[.7965,.9087,.9398],[.801,.9132,.9389],[.8057,.9176,.9381],[.8107,.9218,.9374],[.8158,.926,.9368],[.8212,.93,.9363],[.8268,.9338,.936],[.8326,.9376,.9358],[.8386,.9412,.9358],[.8447,.9447,.9359],[.851,.9481,.9363],[.8575,.9513,.9368],[.8641,.9545,.9376],[.8708,.9575,.9386],[.8777,.9604,.9397],[.8847,.9633,.9412],[.8917,.966,.9429],[.8989,.9687,.9448],[.9061,.9712,.947],[.9134,.9737,.9494],[.9207,.9761,.9521],[.928,.9785,.9551],[.9354,.9808,.9583],[.9428,.983,.9619],[.9501,.9852,.9657],[.9574,.9874,.9697],[.9647,.9895,.9741],[.9719,.9917,.9787],[.9791,.9937,.9836],[.9862,.9958,.9888],[.9931,.9979,.9943],[1,1,1]]},flag:{interpolate:!0,colors:[[1,0,0],[1,.3784,.2098],[1,.7005,.4931],[1,.9185,.7774],[1,.9998,1],[.8029,.9325,1],[.5208,.7264,1],[.2355,.4124,1],[0,.037,1],[0,0,.8156],[0,0,.5346],[0,0,.2486],[0,0,0],[.1719,0,0],[.4515,0,0],[.7383,0,0],[.9897,0,0],[1,.309,.1595],[1,.6459,.4377],[1,.8868,.7252],[1,.9957,.9791],[.8528,.9566,1],[.5761,.7752,1],[.2881,.4785,1],[.0316,.1107,1],[0,0,.865],[0,0,.5899],[0,0,.3014],[0,0,.0425],[.123,0,0],[.3964,0,0],[.6852,0,0],[.9464,0,0],[1,.2379,.1111],[1,.5878,.3827],[1,.8502,.6717],[1,.9862,.9352],[.9007,.9755,1],[.631,.8197,1],[.3418,.5421,1],[.0761,.1837,1],[0,0,.9123],[0,0,.6446],[0,0,.3554],[0,0,.0877],[.0761,0,0],[.3418,0,0],[.631,0,0],[.9007,0,0],[1,.1656,.0648],[1,.5264,.3283],[1,.809,.6173],[1,.9713,.8889],[.9464,.9891,1],[.6852,.8598,1],[.3964,.6026,1],[.123,.2558,1],[0,0,.9575],[0,0,.6986],[0,0,.4101],[0,0,.135],[.0316,0,0],[.2881,0,0],[.5761,0,0],[.8528,0,0],[1,.0923,.0209],[1,.4622,.2748],[1,.7634,.5623],[1,.9511,.8405],[.9897,.9973,1],[.7383,.8952,1],[.4515,.6599,1],[.1719,.3265,1],[0,0,1],[0,0,.7514],[0,0,.4654],[0,0,.1844],[0,0,0],[.2355,0,0],[.5208,0,0],[.8029,0,0],[1,.0185,0],[1,.3955,.2226],[1,.7136,.5069],[1,.9256,.7902],[1,1,1],[.7902,.9256,1],[.5069,.7136,1],[.2226,.3955,1],[0,.0185,1],[0,0,.8029],[0,0,.5208],[0,0,.2355],[0,0,0],[.1844,0,0],[.4654,0,0],[.7514,0,0],[1,0,0],[1,.3265,.1719],[1,.6599,.4515],[1,.8952,.7383],[1,.9973,.9897],[.8405,.9511,1],[.5623,.7634,1],[.2748,.4622,1],[.0209,.0923,1],[0,0,.8528],[0,0,.5761],[0,0,.2881],[0,0,.0316],[.135,0,0],[.4101,0,0],[.6986,0,0],[.9575,0,0],[1,.2558,.123],[1,.6026,.3964],[1,.8598,.6852],[1,.9891,.9464],[.8889,.9713,1],[.6173,.809,1],[.3283,.5264,1],[.0648,.1656,1],[0,0,.9007],[0,0,.631],[0,0,.3418],[0,0,.0761],[.0877,0,0],[.3554,0,0],[.6446,0,0],[.9123,0,0],[1,.1837,.0761],[1,.5421,.3418],[1,.8197,.631],[1,.9755,.9007],[.9352,.9862,1],[.6717,.8502,1],[.3827,.5878,1],[.1111,.2379,1],[0,0,.9464],[0,0,.6852],[0,0,.3964],[0,0,.123],[.0425,0,0],[.3014,0,0],[.5899,0,0],[.865,0,0],[1,.1107,.0316],[1,.4785,.2881],[1,.7752,.5761],[1,.9566,.8528],[.9791,.9957,1],[.7252,.8868,1],[.4377,.6459,1],[.1595,.309,1],[0,0,.9897],[0,0,.7383],[0,0,.4515],[0,0,.1719],[0,0,0],[.2486,0,0],[.5346,0,0],[.8156,0,0],[1,.037,0],[1,.4124,.2355],[1,.7264,.5208],[1,.9325,.8029],[1,.9998,1],[.7774,.9185,1],[.4931,.7005,1],[.2098,.3784,1],[0,0,1],[0,0,.7902],[0,0,.5069],[0,0,.2226],[0,0,0],[.1971,0,0],[.4792,0,0],[.7645,0,0],[1,0,0],[1,.3439,.1844],[1,.6737,.4654],[1,.9032,.7514],[1,.9985,1],[.8281,.9452,1],[.5485,.7513,1],[.2617,.4457,1],[.0103,.0739,1],[0,0,.8405],[0,0,.5623],[0,0,.2748],[0,0,.0209],[.1472,0,0],[.4239,0,0],[.7119,0,0],[.9684,0,0],[1,.2737,.135],[1,.6173,.4101],[1,.8691,.6986],[1,.9916,.9575],[.877,.9667,1],[.6036,.798,1],[.3148,.5106,1],[.0536,.1473,1],[0,0,.8889],[0,0,.6173],[0,0,.3283],[0,0,.0648],[.0993,0,0],[.369,0,0],[.6582,0,0],[.9239,0,0],[1,.2019,.0877],[1,.5575,.3554],[1,.8302,.6446],[1,.9794,.9123],[.9239,.983,1],[.6582,.8403,1],[.369,.5727,1],[.0993,.2199,1],[0,0,.9352],[0,0,.6717],[0,0,.3827],[0,0,.1111],[.0536,0,0],[.3148,0,0],[.6036,0,0],[.877,0,0],[1,.129,.0425],[1,.4947,.3014],[1,.7867,.5899],[1,.9618,.865],[.9684,.9939,1],[.7119,.8781,1],[.4239,.6317,1],[.1472,.2914,1],[0,0,.9791],[0,0,.7252],[0,0,.4377],[0,0,.1595],[.0103,0,0],[.2617,0,0],[.5485,0,0],[.8281,0,0],[1,.0554,0],[1,.4291,.2486],[1,.739,.5346],[1,.939,.8156],[1,.9993,1],[.7645,.911,1],[.4792,.6872,1],[.1971,.3612,1],[0,0,1],[0,0,.7774],[0,0,.4931],[0,0,.2098],[0,0,0]]},gist_earth:{interpolate:!0,colors:[[0,0,0],[.0026,0,.1687],[.0052,0,.2217],[.0078,0,.2638],[.0105,0,.3059],[.0131,0,.3481],[.0157,0,.3902],[.0183,0,.4324],[.0209,.0089,.4547],[.0235,.0179,.4556],[.0261,.0269,.4563],[.0287,.036,.457],[.0314,.045,.4577],[.034,.054,.4584],[.0366,.063,.4592],[.0392,.072,.4599],[.0418,.0811,.4606],[.0444,.0901,.4613],[.047,.0991,.462],[.0497,.1081,.4627],[.0523,.1171,.4634],[.0549,.1262,.4641],[.0575,.1352,.4648],[.0601,.1442,.4656],[.0627,.1532,.4663],[.0653,.1622,.467],[.0679,.1713,.4677],[.0706,.1803,.4684],[.0732,.1893,.4691],[.0758,.1975,.4698],[.0784,.2056,.4705],[.081,.2138,.4712],[.0836,.2219,.472],[.0862,.2301,.4727],[.0889,.2383,.4734],[.0915,.2464,.4741],[.0941,.2546,.4748],[.0967,.2627,.4755],[.0993,.2709,.4762],[.1019,.279,.4769],[.1045,.2872,.4776],[.1072,.2954,.4784],[.1098,.3035,.4791],[.1124,.3108,.4798],[.115,.3182,.4805],[.1176,.3255,.4812],[.1202,.3328,.4819],[.1228,.3402,.4826],[.1254,.3475,.4833],[.1281,.3548,.484],[.1307,.3622,.4848],[.1333,.3695,.4855],[.1359,.3768,.4862],[.1385,.3842,.4869],[.1411,.3904,.4876],[.1437,.3966,.4883],[.1464,.4028,.489],[.149,.409,.4897],[.1516,.4152,.4904],[.1542,.4214,.4912],[.1568,.4276,.4919],[.1594,.4338,.4926],[.162,.4399,.4933],[.1646,.4461,.494],[.1673,.4523,.4947],[.1699,.4585,.4954],[.1725,.4647,.4961],[.1751,.4709,.4968],[.1777,.4771,.4975],[.1803,.4833,.4983],[.1829,.4895,.499],[.1856,.4957,.4997],[.1882,.5019,.5004],[.19,.5042,.4957],[.1919,.5065,.4909],[.1937,.5087,.4861],[.1956,.511,.4813],[.1974,.5133,.4765],[.1993,.5155,.4717],[.2011,.5178,.4669],[.203,.52,.4621],[.2048,.5223,.4573],[.2067,.5245,.4525],[.2085,.5268,.4477],[.2104,.5291,.4429],[.2122,.5313,.4381],[.2141,.5336,.4333],[.2159,.5358,.4285],[.2178,.5381,.4237],[.2196,.5404,.4189],[.2215,.5426,.4141],[.2233,.5449,.4093],[.2252,.5471,.4045],[.227,.5494,.3997],[.2289,.5516,.3948],[.2307,.5539,.39],[.2326,.5562,.3852],[.2344,.5584,.3804],[.2363,.5607,.3756],[.2381,.5629,.3708],[.24,.5652,.366],[.2418,.5674,.3612],[.2437,.5697,.3564],[.2455,.572,.3516],[.2474,.5742,.3468],[.2492,.5765,.342],[.2511,.5787,.3372],[.2529,.581,.3324],[.2548,.5832,.3276],[.2566,.5855,.3228],[.2585,.5878,.318],[.2603,.59,.3132],[.2622,.5923,.3084],[.264,.5945,.3036],[.2659,.5968,.2988],[.2677,.599,.294],[.2696,.6013,.2892],[.2715,.6036,.2844],[.2802,.6058,.2796],[.2889,.6081,.2748],[.2976,.6103,.2771],[.3063,.6126,.2794],[.315,.6148,.2816],[.3238,.6171,.2839],[.3325,.6194,.2862],[.3412,.6216,.2885],[.3499,.6239,.2908],[.3586,.6261,.2931],[.3673,.6284,.2954],[.3761,.6307,.2976],[.3848,.6329,.2999],[.3935,.6352,.3022],[.4022,.6374,.3045],[.4109,.6397,.3068],[.4196,.6414,.3091],[.4284,.6431,.3114],[.4371,.6448,.3136],[.4458,.6466,.3159],[.4545,.6483,.3182],[.4632,.65,.3205],[.4719,.6517,.3217],[.4784,.6535,.323],[.4849,.6552,.3242],[.4913,.6569,.3255],[.4978,.6586,.3267],[.5043,.6603,.3279],[.5107,.6621,.3292],[.5172,.6638,.3304],[.5237,.6655,.3317],[.5301,.6672,.3329],[.5366,.6689,.3341],[.5431,.6707,.3354],[.5495,.6724,.3366],[.556,.6741,.3379],[.5625,.6758,.3391],[.5689,.6775,.3403],[.5754,.6793,.3416],[.5819,.681,.3428],[.5883,.6827,.344],[.5948,.6844,.3453],[.6013,.6861,.3465],[.6077,.6879,.3478],[.6142,.6896,.349],[.6207,.6913,.3502],[.6271,.693,.3515],[.6336,.6947,.3527],[.6401,.6965,.354],[.6465,.6982,.3552],[.653,.6999,.3564],[.6595,.7016,.3577],[.6659,.7034,.3589],[.6724,.7051,.3602],[.6789,.7068,.3614],[.6853,.7085,.3626],[.6918,.7102,.3639],[.6983,.712,.3651],[.7047,.7137,.3664],[.7112,.7154,.3676],[.7176,.7171,.3688],[.7193,.7137,.3701],[.7209,.7103,.3713],[.7225,.7069,.3726],[.7242,.7035,.3738],[.7258,.7001,.375],[.7275,.6967,.3763],[.7291,.6934,.3775],[.7307,.69,.3788],[.7324,.6866,.38],[.734,.6832,.3812],[.7356,.6798,.3825],[.7373,.6764,.3837],[.7389,.673,.3849],[.7406,.6697,.3862],[.7422,.6663,.3874],[.7438,.6629,.3887],[.7455,.6595,.3899],[.7471,.6561,.3911],[.7488,.6527,.3924],[.7504,.6493,.3936],[.752,.6459,.3949],[.7537,.6426,.3961],[.7553,.6392,.4057],[.7597,.6413,.4153],[.7641,.643,.425],[.7685,.6447,.4346],[.7729,.6464,.4442],[.7773,.6481,.4538],[.7817,.6515,.4634],[.786,.6549,.473],[.7904,.6583,.4826],[.7948,.6617,.4922],[.7992,.6651,.5018],[.8036,.6685,.5114],[.808,.6719,.521],[.8124,.6753,.5306],[.8167,.6787,.5402],[.8211,.6821,.5499],[.8255,.6855,.5595],[.8299,.6889,.5691],[.8343,.6923,.5787],[.8387,.6957,.5883],[.8431,.6991,.5979],[.8475,.7047,.6075],[.8518,.7103,.6171],[.8562,.7159,.6267],[.8606,.7215,.6363],[.865,.7269,.6459],[.8694,.7323,.6555],[.8738,.7377,.6652],[.8782,.7431,.677],[.8825,.7507,.6888],[.8869,.7584,.7006],[.8913,.7661,.7124],[.8957,.7738,.7243],[.9001,.7814,.7361],[.9045,.7891,.7479],[.9089,.7968,.7597],[.9132,.8044,.7715],[.9176,.8121,.7834],[.922,.8198,.7952],[.9264,.8275,.807],[.9308,.8364,.8188],[.9352,.8454,.8306],[.9396,.8544,.8425],[.944,.8634,.8543],[.9483,.8725,.8661],[.9527,.8816,.8779],[.9571,.8931,.8897],[.9615,.9045,.9016],[.9659,.916,.9134],[.9703,.9274,.9252],[.9747,.9389,.937],[.979,.9503,.9488],[.9834,.9618,.9607],[.9878,.9732,.9725],[.9922,.9843,.9843]]},gist_gray:{interpolate:!0,colors:[[0,0,0],[.0039,.0039,.0039],[.0078,.0078,.0078],[.0118,.0118,.0118],[.0157,.0157,.0157],[.0196,.0196,.0196],[.0235,.0235,.0235],[.0275,.0275,.0275],[.0314,.0314,.0314],[.0353,.0353,.0353],[.0392,.0392,.0392],[.0431,.0431,.0431],[.0471,.0471,.0471],[.051,.051,.051],[.0549,.0549,.0549],[.0588,.0588,.0588],[.0627,.0627,.0627],[.0667,.0667,.0667],[.0706,.0706,.0706],[.0745,.0745,.0745],[.0784,.0784,.0784],[.0824,.0824,.0824],[.0863,.0863,.0863],[.0902,.0902,.0902],[.0941,.0941,.0941],[.098,.098,.098],[.102,.102,.102],[.1059,.1059,.1059],[.1098,.1098,.1098],[.1137,.1137,.1137],[.1176,.1176,.1176],[.1216,.1216,.1216],[.1255,.1255,.1255],[.1294,.1294,.1294],[.1333,.1333,.1333],[.1373,.1373,.1373],[.1412,.1412,.1412],[.1451,.1451,.1451],[.149,.149,.149],[.1529,.1529,.1529],[.1569,.1569,.1569],[.1608,.1608,.1608],[.1647,.1647,.1647],[.1686,.1686,.1686],[.1725,.1725,.1725],[.1765,.1765,.1765],[.1804,.1804,.1804],[.1843,.1843,.1843],[.1882,.1882,.1882],[.1922,.1922,.1922],[.1961,.1961,.1961],[.2,.2,.2],[.2039,.2039,.2039],[.2078,.2078,.2078],[.2118,.2118,.2118],[.2157,.2157,.2157],[.2196,.2196,.2196],[.2235,.2235,.2235],[.2275,.2275,.2275],[.2314,.2314,.2314],[.2353,.2353,.2353],[.2392,.2392,.2392],[.2431,.2431,.2431],[.2471,.2471,.2471],[.251,.251,.251],[.2549,.2549,.2549],[.2588,.2588,.2588],[.2627,.2627,.2627],[.2667,.2667,.2667],[.2706,.2706,.2706],[.2745,.2745,.2745],[.2784,.2784,.2784],[.2824,.2824,.2824],[.2863,.2863,.2863],[.2902,.2902,.2902],[.2941,.2941,.2941],[.298,.298,.298],[.302,.302,.302],[.3059,.3059,.3059],[.3098,.3098,.3098],[.3137,.3137,.3137],[.3176,.3176,.3176],[.3216,.3216,.3216],[.3255,.3255,.3255],[.3294,.3294,.3294],[.3333,.3333,.3333],[.3373,.3373,.3373],[.3412,.3412,.3412],[.3451,.3451,.3451],[.349,.349,.349],[.3529,.3529,.3529],[.3569,.3569,.3569],[.3608,.3608,.3608],[.3647,.3647,.3647],[.3686,.3686,.3686],[.3725,.3725,.3725],[.3765,.3765,.3765],[.3804,.3804,.3804],[.3843,.3843,.3843],[.3882,.3882,.3882],[.3922,.3922,.3922],[.3961,.3961,.3961],[.4,.4,.4],[.4039,.4039,.4039],[.4078,.4078,.4078],[.4118,.4118,.4118],[.4157,.4157,.4157],[.4196,.4196,.4196],[.4235,.4235,.4235],[.4275,.4275,.4275],[.4314,.4314,.4314],[.4353,.4353,.4353],[.4392,.4392,.4392],[.4431,.4431,.4431],[.4471,.4471,.4471],[.451,.451,.451],[.4549,.4549,.4549],[.4588,.4588,.4588],[.4627,.4627,.4627],[.4667,.4667,.4667],[.4706,.4706,.4706],[.4745,.4745,.4745],[.4784,.4784,.4784],[.4824,.4824,.4824],[.4863,.4863,.4863],[.4902,.4902,.4902],[.4941,.4941,.4941],[.498,.498,.498],[.502,.502,.502],[.5059,.5059,.5059],[.5098,.5098,.5098],[.5137,.5137,.5137],[.5176,.5176,.5176],[.5216,.5216,.5216],[.5255,.5255,.5255],[.5294,.5294,.5294],[.5333,.5333,.5333],[.5373,.5373,.5373],[.5412,.5412,.5412],[.5451,.5451,.5451],[.549,.549,.549],[.5529,.5529,.5529],[.5569,.5569,.5569],[.5608,.5608,.5608],[.5647,.5647,.5647],[.5686,.5686,.5686],[.5725,.5725,.5725],[.5765,.5765,.5765],[.5804,.5804,.5804],[.5843,.5843,.5843],[.5882,.5882,.5882],[.5922,.5922,.5922],[.5961,.5961,.5961],[.6,.6,.6],[.6039,.6039,.6039],[.6078,.6078,.6078],[.6118,.6118,.6118],[.6157,.6157,.6157],[.6196,.6196,.6196],[.6235,.6235,.6235],[.6275,.6275,.6275],[.6314,.6314,.6314],[.6353,.6353,.6353],[.6392,.6392,.6392],[.6431,.6431,.6431],[.6471,.6471,.6471],[.651,.651,.651],[.6549,.6549,.6549],[.6588,.6588,.6588],[.6627,.6627,.6627],[.6667,.6667,.6667],[.6706,.6706,.6706],[.6745,.6745,.6745],[.6784,.6784,.6784],[.6824,.6824,.6824],[.6863,.6863,.6863],[.6902,.6902,.6902],[.6941,.6941,.6941],[.698,.698,.698],[.702,.702,.702],[.7059,.7059,.7059],[.7098,.7098,.7098],[.7137,.7137,.7137],[.7176,.7176,.7176],[.7216,.7216,.7216],[.7255,.7255,.7255],[.7294,.7294,.7294],[.7333,.7333,.7333],[.7373,.7373,.7373],[.7412,.7412,.7412],[.7451,.7451,.7451],[.749,.749,.749],[.7529,.7529,.7529],[.7569,.7569,.7569],[.7608,.7608,.7608],[.7647,.7647,.7647],[.7686,.7686,.7686],[.7725,.7725,.7725],[.7765,.7765,.7765],[.7804,.7804,.7804],[.7843,.7843,.7843],[.7882,.7882,.7882],[.7922,.7922,.7922],[.7961,.7961,.7961],[.8,.8,.8],[.8039,.8039,.8039],[.8078,.8078,.8078],[.8118,.8118,.8118],[.8157,.8157,.8157],[.8196,.8196,.8196],[.8235,.8235,.8235],[.8275,.8275,.8275],[.8314,.8314,.8314],[.8353,.8353,.8353],[.8392,.8392,.8392],[.8431,.8431,.8431],[.8471,.8471,.8471],[.851,.851,.851],[.8549,.8549,.8549],[.8588,.8588,.8588],[.8627,.8627,.8627],[.8667,.8667,.8667],[.8706,.8706,.8706],[.8745,.8745,.8745],[.8784,.8784,.8784],[.8824,.8824,.8824],[.8863,.8863,.8863],[.8902,.8902,.8902],[.8941,.8941,.8941],[.898,.898,.898],[.902,.902,.902],[.9059,.9059,.9059],[.9098,.9098,.9098],[.9137,.9137,.9137],[.9176,.9176,.9176],[.9216,.9216,.9216],[.9255,.9255,.9255],[.9294,.9294,.9294],[.9333,.9333,.9333],[.9373,.9373,.9373],[.9412,.9412,.9412],[.9451,.9451,.9451],[.949,.949,.949],[.9529,.9529,.9529],[.9569,.9569,.9569],[.9608,.9608,.9608],[.9647,.9647,.9647],[.9686,.9686,.9686],[.9725,.9725,.9725],[.9765,.9765,.9765],[.9804,.9804,.9804],[.9843,.9843,.9843],[.9882,.9882,.9882],[.9922,.9922,.9922],[.9961,.9961,.9961],[1,1,1]]},gist_heat:{interpolate:!0,colors:[[0,0,0],[.0059,0,0],[.0118,0,0],[.0176,0,0],[.0235,0,0],[.0294,0,0],[.0353,0,0],[.0412,0,0],[.0471,0,0],[.0529,0,0],[.0588,0,0],[.0647,0,0],[.0706,0,0],[.0765,0,0],[.0824,0,0],[.0882,0,0],[.0941,0,0],[.1,0,0],[.1059,0,0],[.1118,0,0],[.1176,0,0],[.1235,0,0],[.1294,0,0],[.1353,0,0],[.1412,0,0],[.1471,0,0],[.1529,0,0],[.1588,0,0],[.1647,0,0],[.1706,0,0],[.1765,0,0],[.1824,0,0],[.1882,0,0],[.1941,0,0],[.2,0,0],[.2059,0,0],[.2118,0,0],[.2176,0,0],[.2235,0,0],[.2294,0,0],[.2353,0,0],[.2412,0,0],[.2471,0,0],[.2529,0,0],[.2588,0,0],[.2647,0,0],[.2706,0,0],[.2765,0,0],[.2824,0,0],[.2882,0,0],[.2941,0,0],[.3,0,0],[.3059,0,0],[.3118,0,0],[.3176,0,0],[.3235,0,0],[.3294,0,0],[.3353,0,0],[.3412,0,0],[.3471,0,0],[.3529,0,0],[.3588,0,0],[.3647,0,0],[.3706,0,0],[.3765,0,0],[.3824,0,0],[.3882,0,0],[.3941,0,0],[.4,0,0],[.4059,0,0],[.4118,0,0],[.4176,0,0],[.4235,0,0],[.4294,0,0],[.4353,0,0],[.4412,0,0],[.4471,0,0],[.4529,0,0],[.4588,0,0],[.4647,0,0],[.4706,0,0],[.4765,0,0],[.4824,0,0],[.4882,0,0],[.4941,0,0],[.5,0,0],[.5059,0,0],[.5118,0,0],[.5176,0,0],[.5235,0,0],[.5294,0,0],[.5353,0,0],[.5412,0,0],[.5471,0,0],[.5529,0,0],[.5588,0,0],[.5647,0,0],[.5706,0,0],[.5765,0,0],[.5824,0,0],[.5882,0,0],[.5941,0,0],[.6,0,0],[.6059,0,0],[.6118,0,0],[.6176,0,0],[.6235,0,0],[.6294,0,0],[.6353,0,0],[.6412,0,0],[.6471,0,0],[.6529,0,0],[.6588,0,0],[.6647,0,0],[.6706,0,0],[.6765,0,0],[.6824,0,0],[.6882,0,0],[.6941,0,0],[.7,0,0],[.7059,0,0],[.7118,0,0],[.7176,0,0],[.7235,0,0],[.7294,0,0],[.7353,0,0],[.7412,0,0],[.7471,0,0],[.7529,.0039,0],[.7588,.0118,0],[.7647,.0196,0],[.7706,.0275,0],[.7765,.0353,0],[.7824,.0431,0],[.7882,.051,0],[.7941,.0588,0],[.8,.0667,0],[.8059,.0745,0],[.8118,.0824,0],[.8176,.0902,0],[.8235,.098,0],[.8294,.1059,0],[.8353,.1137,0],[.8412,.1216,0],[.8471,.1294,0],[.8529,.1373,0],[.8588,.1451,0],[.8647,.1529,0],[.8706,.1608,0],[.8765,.1686,0],[.8824,.1765,0],[.8882,.1843,0],[.8941,.1922,0],[.9,.2,0],[.9059,.2078,0],[.9118,.2157,0],[.9176,.2235,0],[.9235,.2314,0],[.9294,.2392,0],[.9353,.2471,0],[.9412,.2549,0],[.9471,.2627,0],[.9529,.2706,0],[.9588,.2784,0],[.9647,.2863,0],[.9706,.2941,0],[.9765,.302,0],[.9824,.3098,0],[.9882,.3176,0],[.9941,.3255,0],[1,.3333,0],[1,.3412,0],[1,.349,0],[1,.3569,0],[1,.3647,0],[1,.3725,0],[1,.3804,0],[1,.3882,0],[1,.3961,0],[1,.4039,0],[1,.4118,0],[1,.4196,0],[1,.4275,0],[1,.4353,0],[1,.4431,0],[1,.451,0],[1,.4588,0],[1,.4667,0],[1,.4745,0],[1,.4824,0],[1,.4902,0],[1,.498,0],[1,.5059,.0118],[1,.5137,.0275],[1,.5216,.0431],[1,.5294,.0588],[1,.5373,.0745],[1,.5451,.0902],[1,.5529,.1059],[1,.5608,.1216],[1,.5686,.1373],[1,.5765,.1529],[1,.5843,.1686],[1,.5922,.1843],[1,.6,.2],[1,.6078,.2157],[1,.6157,.2314],[1,.6235,.2471],[1,.6314,.2627],[1,.6392,.2784],[1,.6471,.2941],[1,.6549,.3098],[1,.6627,.3255],[1,.6706,.3412],[1,.6784,.3569],[1,.6863,.3725],[1,.6941,.3882],[1,.702,.4039],[1,.7098,.4196],[1,.7176,.4353],[1,.7255,.451],[1,.7333,.4667],[1,.7412,.4824],[1,.749,.498],[1,.7569,.5137],[1,.7647,.5294],[1,.7725,.5451],[1,.7804,.5608],[1,.7882,.5765],[1,.7961,.5922],[1,.8039,.6078],[1,.8118,.6235],[1,.8196,.6392],[1,.8275,.6549],[1,.8353,.6706],[1,.8431,.6863],[1,.851,.702],[1,.8588,.7176],[1,.8667,.7333],[1,.8745,.749],[1,.8824,.7647],[1,.8902,.7804],[1,.898,.7961],[1,.9059,.8118],[1,.9137,.8275],[1,.9216,.8431],[1,.9294,.8588],[1,.9373,.8745],[1,.9451,.8902],[1,.9529,.9059],[1,.9608,.9216],[1,.9686,.9373],[1,.9765,.9529],[1,.9843,.9686],[1,.9922,.9843],[1,1,1]]},gist_ncar:{interpolate:!0,colors:[[0,0,.502],[0,.0286,.4651],[0,.0572,.4282],[0,.0859,.3913],[0,.1145,.3544],[0,.1431,.3175],[0,.1717,.2806],[0,.2003,.2437],[0,.229,.2069],[0,.2576,.17],[0,.2862,.1331],[0,.3148,.0962],[0,.3434,.0593],[0,.3721,.0224],[0,.3457,.0871],[0,.3192,.1523],[0,.2926,.2175],[0,.266,.2827],[0,.2394,.3479],[0,.2128,.4132],[0,.1862,.4784],[0,.1596,.5436],[0,.1331,.6088],[0,.1065,.674],[0,.0799,.7392],[0,.0533,.8044],[0,.0267,.8696],[0,1e-4,.9349],[0,.0551,1],[0,.1105,1],[0,.1659,1],[0,.2213,1],[0,.2766,1],[0,.332,1],[0,.3874,1],[0,.4428,1],[0,.4982,1],[0,.5535,1],[0,.6089,1],[0,.6643,1],[0,.7197,1],[0,.7536,1],[0,.7752,1],[0,.7925,1],[0,.8098,1],[0,.8271,1],[0,.8444,1],[0,.8617,1],[0,.8789,1],[0,.8962,1],[0,.9135,1],[0,.9308,1],[0,.9481,.9999],[0,.9654,.9741],[0,.9827,.9484],[0,.9999,.9227],[0,.9982,.897],[0,.9964,.8713],[0,.9947,.8456],[0,.9929,.8199],[0,.9911,.7942],[0,.9893,.7685],[0,.9875,.7428],[0,.9857,.717],[0,.984,.6913],[0,.9822,.6656],[0,.9804,.6399],[0,.9804,.614],[0,.9804,.5731],[0,.9804,.5322],[0,.982,.4913],[0,.9837,.4504],[0,.9853,.4095],[0,.9869,.3685],[0,.9886,.3276],[0,.9902,.2867],[0,.9918,.2458],[0,.9935,.2049],[0,.9951,.164],[0,.9967,.1231],[.025,.9984,.0822],[.05,.9998,.0412],[.0749,.9851,3e-4],[.0999,.9703,0],[.1249,.9556,0],[.1499,.9408,0],[.1748,.926,0],[.1998,.9113,0],[.2248,.8965,0],[.2498,.8818,0],[.2747,.867,0],[.2997,.8523,0],[.3247,.8375,0],[.3497,.8228,0],[.3746,.8082,0],[.3994,.821,0],[.4072,.8337,0],[.4149,.8465,0],[.4227,.8593,0],[.4305,.8721,0],[.4382,.8848,0],[.446,.8976,0],[.4538,.9104,0],[.4615,.9232,0],[.4693,.936,0],[.4771,.9487,0],[.4848,.9615,0],[.4926,.9743,.0156],[.5004,.9871,.0312],[.5183,.9998,.0468],[.5361,1,.0624],[.554,1,.078],[.5718,1,.0937],[.5897,1,.1093],[.6075,1,.1249],[.6254,1,.1405],[.6432,1,.1561],[.6611,1,.1718],[.6789,1,.1874],[.6968,1,.203],[.7146,1,.2186],[.7324,1,.2342],[.7503,1,.2185],[.7681,1,.2029],[.786,1,.1873],[.8038,1,.1717],[.8217,1,.1561],[.8395,1,.1404],[.8574,1,.1248],[.8752,1,.1092],[.8931,1,.0936],[.9109,1,.078],[.9288,1,.0623],[.9466,1,.0467],[.9645,.9904,.0311],[.9823,.9807,.0155],[1,.9711,0],[1,.9614,0],[1,.9517,0],[1,.942,0],[1,.9324,0],[1,.9227,0],[1,.913,0],[1,.9034,0],[1,.8937,0],[1,.884,0],[1,.8743,0],[1,.8647,0],[1,.855,0],[1,.8453,.0042],[1,.8357,.0084],[1,.826,.0127],[1,.8163,.0169],[1,.8066,.0211],[1,.797,.0253],[1,.7873,.0295],[1,.7776,.0338],[1,.768,.038],[1,.7583,.0422],[1,.7486,.0464],[1,.7389,.0506],[1,.7293,.0549],[1,.6973,.0513],[1,.6652,.0476],[1,.6331,.0439],[1,.601,.0403],[1,.5688,.0366],[1,.5367,.033],[1,.5046,.0293],[1,.4725,.0256],[1,.4404,.022],[1,.4083,.0183],[1,.3762,.0146],[1,.344,.011],[1,.3119,.0073],[1,.2798,.0037],[1,.2611,0],[1,.2424,0],[1,.2238,0],[1,.2051,0],[1,.1865,0],[1,.1678,0],[1,.1492,0],[1,.1305,0],[1,.1119,0],[1,.0932,0],[1,.0746,0],[1,.056,0],[1,.0373,0],[1,.0187,.0688],[1,0,.1383],[1,0,.2079],[1,0,.2774],[1,0,.347],[1,0,.4166],[1,0,.4861],[1,0,.5557],[1,0,.6252],[1,0,.6948],[1,0,.7644],[1,0,.8339],[1,0,.9035],[1,0,.973],[.9733,.0134,.9868],[.9463,.0269,1],[.9193,.0404,1],[.8922,.0539,1],[.8652,.0674,1],[.8382,.0809,1],[.8112,.0944,1],[.7842,.1079,1],[.7572,.1214,1],[.7301,.1349,1],[.7031,.1484,1],[.6761,.1619,1],[.6491,.1755,1],[.6221,.1987,.9952],[.6448,.2219,.9905],[.668,.2451,.9858],[.6913,.2683,.9811],[.7145,.2915,.9764],[.7378,.3147,.9717],[.761,.3379,.967],[.7843,.3611,.9623],[.8075,.3843,.9576],[.8308,.4075,.9529],[.854,.4307,.9482],[.8772,.4538,.9435],[.9005,.477,.9388],[.9235,.5002,.9341],[.9263,.5183,.9365],[.9291,.5365,.9389],[.9319,.5547,.9413],[.9347,.5728,.9437],[.9375,.591,.946],[.9403,.6092,.9484],[.9431,.6273,.9508],[.9459,.6455,.9532],[.9486,.6637,.9556],[.9514,.6818,.958],[.9542,.7,.9603],[.957,.7182,.9627],[.9598,.7363,.9651],[.9626,.7545,.9675],[.9654,.7727,.9699],[.9682,.7908,.9723],[.971,.809,.9746],[.9738,.8272,.977],[.9766,.8453,.9794],[.9794,.8635,.9818],[.9821,.8817,.9842],[.9849,.8998,.9866],[.9877,.918,.9889],[.9905,.9362,.9913],[.9933,.9543,.9937],[.9961,.9725,.9961]]},gist_rainbow:{interpolate:!0,colors:[[1,0,.16],[1,0,.1391],[1,0,.1182],[1,0,.0973],[1,0,.0763],[1,0,.0554],[1,0,.0345],[1,0,.0136],[1,.0074,0],[1,.0286,0],[1,.0498,0],[1,.071,0],[1,.0922,0],[1,.1134,0],[1,.1346,0],[1,.1558,0],[1,.177,0],[1,.1982,0],[1,.2194,0],[1,.2406,0],[1,.2618,0],[1,.283,0],[1,.3042,0],[1,.3254,0],[1,.3466,0],[1,.3678,0],[1,.389,0],[1,.4102,0],[1,.4314,0],[1,.4526,0],[1,.4738,0],[1,.495,0],[1,.5162,0],[1,.5374,0],[1,.5586,0],[1,.5798,0],[1,.601,0],[1,.6222,0],[1,.6433,0],[1,.6645,0],[1,.6857,0],[1,.7069,0],[1,.7281,0],[1,.7493,0],[1,.7705,0],[1,.7917,0],[1,.8129,0],[1,.8341,0],[1,.8553,0],[1,.8765,0],[1,.8977,0],[1,.9189,0],[1,.9401,0],[1,.9613,0],[1,.9825,0],[.9963,1,0],[.9751,1,0],[.9539,1,0],[.9327,1,0],[.9115,1,0],[.8903,1,0],[.8691,1,0],[.8479,1,0],[.8267,1,0],[.8055,1,0],[.7843,1,0],[.7631,1,0],[.7419,1,0],[.7207,1,0],[.6995,1,0],[.6783,1,0],[.6571,1,0],[.6359,1,0],[.6147,1,0],[.5935,1,0],[.5723,1,0],[.5511,1,0],[.5299,1,0],[.5087,1,0],[.4875,1,0],[.4663,1,0],[.4452,1,0],[.424,1,0],[.4028,1,0],[.3816,1,0],[.3604,1,0],[.3392,1,0],[.318,1,0],[.2968,1,0],[.2756,1,0],[.2544,1,0],[.2332,1,0],[.212,1,0],[.1908,1,0],[.1696,1,0],[.1484,1,0],[.1272,1,0],[.106,1,0],[.0848,1,0],[.0636,1,0],[.0424,1,0],[.0212,1,0],[0,1,0],[0,1,.0211],[0,1,.0422],[0,1,.0633],[0,1,.0843],[0,1,.1054],[0,1,.1265],[0,1,.1476],[0,1,.1687],[0,1,.1898],[0,1,.2108],[0,1,.2319],[0,1,.253],[0,1,.2741],[0,1,.2952],[0,1,.3163],[0,1,.3373],[0,1,.3584],[0,1,.3795],[0,1,.4006],[0,1,.4217],[0,1,.4428],[0,1,.4638],[0,1,.4849],[0,1,.506],[0,1,.5271],[0,1,.5482],[0,1,.5693],[0,1,.5903],[0,1,.6114],[0,1,.6325],[0,1,.6536],[0,1,.6747],[0,1,.6958],[0,1,.7168],[0,1,.7379],[0,1,.759],[0,1,.7801],[0,1,.8012],[0,1,.8223],[0,1,.8433],[0,1,.8644],[0,1,.8855],[0,1,.9066],[0,1,.9277],[0,1,.9488],[0,1,.9699],[0,1,.9909],[0,.9879,1],[0,.9665,1],[0,.9452,1],[0,.9239,1],[0,.9026,1],[0,.8813,1],[0,.86,1],[0,.8387,1],[0,.8173,1],[0,.796,1],[0,.7747,1],[0,.7534,1],[0,.7321,1],[0,.7108,1],[0,.6895,1],[0,.6682,1],[0,.6468,1],[0,.6255,1],[0,.6042,1],[0,.5829,1],[0,.5616,1],[0,.5403,1],[0,.519,1],[0,.4977,1],[0,.4763,1],[0,.455,1],[0,.4337,1],[0,.4124,1],[0,.3911,1],[0,.3698,1],[0,.3485,1],[0,.3272,1],[0,.3058,1],[0,.2845,1],[0,.2632,1],[0,.2419,1],[0,.2206,1],[0,.1993,1],[0,.178,1],[0,.1566,1],[0,.1353,1],[0,.114,1],[0,.0927,1],[0,.0714,1],[0,.0501,1],[0,.0288,1],[0,.0075,1],[.0139,0,1],[.0352,0,1],[.0565,0,1],[.0778,0,1],[.0991,0,1],[.1204,0,1],[.1417,0,1],[.163,0,1],[.1844,0,1],[.2057,0,1],[.227,0,1],[.2483,0,1],[.2696,0,1],[.2909,0,1],[.3122,0,1],[.3335,0,1],[.3549,0,1],[.3762,0,1],[.3975,0,1],[.4188,0,1],[.4401,0,1],[.4614,0,1],[.4827,0,1],[.504,0,1],[.5254,0,1],[.5467,0,1],[.568,0,1],[.5893,0,1],[.6106,0,1],[.6319,0,1],[.6532,0,1],[.6746,0,1],[.6959,0,1],[.7172,0,1],[.7385,0,1],[.7598,0,1],[.7811,0,1],[.8024,0,1],[.8237,0,1],[.8451,0,1],[.8664,0,1],[.8877,0,1],[.909,0,1],[.9303,0,1],[.9516,0,1],[.9729,0,1],[.9942,0,1],[1,0,.9844],[1,0,.9631],[1,0,.9418],[1,0,.9205],[1,0,.8992],[1,0,.8779],[1,0,.8566],[1,0,.8353],[1,0,.8139],[1,0,.7926],[1,0,.7713],[1,0,.75]]},gist_stern:{interpolate:!0,colors:[[0,0,0],[.0717,.0039,.0078],[.1434,.0078,.0157],[.2151,.0118,.0235],[.2868,.0157,.0314],[.3585,.0196,.0392],[.4302,.0235,.0471],[.5018,.0275,.0549],[.5735,.0314,.0627],[.6452,.0353,.0706],[.7169,.0392,.0784],[.7886,.0431,.0863],[.8603,.0471,.0941],[.932,.051,.102],[.999,.0549,.1098],[.9795,.0588,.1176],[.9599,.0627,.1255],[.9404,.0667,.1333],[.9208,.0706,.1412],[.9013,.0745,.149],[.8818,.0784,.1569],[.8622,.0824,.1647],[.8427,.0863,.1725],[.8232,.0902,.1804],[.8036,.0941,.1882],[.7841,.098,.1961],[.7645,.102,.2039],[.745,.1059,.2118],[.7255,.1098,.2196],[.7059,.1137,.2275],[.6864,.1176,.2353],[.6669,.1216,.2431],[.6473,.1255,.251],[.6278,.1294,.2588],[.6082,.1333,.2667],[.5887,.1373,.2745],[.5692,.1412,.2824],[.5496,.1451,.2902],[.5301,.149,.298],[.5106,.1529,.3059],[.491,.1569,.3137],[.4715,.1608,.3216],[.4519,.1647,.3294],[.4324,.1686,.3373],[.4129,.1725,.3451],[.3933,.1765,.3529],[.3738,.1804,.3608],[.3543,.1843,.3686],[.3347,.1882,.3765],[.3152,.1922,.3843],[.2956,.1961,.3922],[.2761,.2,.4],[.2566,.2039,.4078],[.237,.2078,.4157],[.2175,.2118,.4235],[.198,.2157,.4314],[.1784,.2196,.4392],[.1589,.2235,.4471],[.1393,.2275,.4549],[.1198,.2314,.4627],[.1003,.2353,.4706],[.0807,.2392,.4784],[.0612,.2431,.4863],[.0417,.2471,.4941],[.251,.251,.502],[.2549,.2549,.5098],[.2588,.2588,.5176],[.2627,.2627,.5255],[.2667,.2667,.5333],[.2706,.2706,.5412],[.2745,.2745,.549],[.2784,.2784,.5569],[.2824,.2824,.5647],[.2863,.2863,.5725],[.2902,.2902,.5804],[.2941,.2941,.5882],[.298,.298,.5961],[.302,.302,.6039],[.3059,.3059,.6118],[.3098,.3098,.6196],[.3137,.3137,.6275],[.3176,.3176,.6353],[.3216,.3216,.6431],[.3255,.3255,.651],[.3294,.3294,.6588],[.3333,.3333,.6667],[.3373,.3373,.6745],[.3412,.3412,.6824],[.3451,.3451,.6902],[.349,.349,.698],[.3529,.3529,.7059],[.3569,.3569,.7137],[.3608,.3608,.7216],[.3647,.3647,.7294],[.3686,.3686,.7373],[.3725,.3725,.7451],[.3765,.3765,.7529],[.3804,.3804,.7608],[.3843,.3843,.7686],[.3882,.3882,.7765],[.3922,.3922,.7843],[.3961,.3961,.7922],[.4,.4,.8],[.4039,.4039,.8078],[.4078,.4078,.8157],[.4118,.4118,.8235],[.4157,.4157,.8314],[.4196,.4196,.8392],[.4235,.4235,.8471],[.4275,.4275,.8549],[.4314,.4314,.8627],[.4353,.4353,.8706],[.4392,.4392,.8784],[.4431,.4431,.8863],[.4471,.4471,.8941],[.451,.451,.902],[.4549,.4549,.9098],[.4588,.4588,.9176],[.4627,.4627,.9255],[.4667,.4667,.9333],[.4706,.4706,.9412],[.4745,.4745,.949],[.4784,.4784,.9569],[.4824,.4824,.9647],[.4863,.4863,.9725],[.4902,.4902,.9804],[.4941,.4941,.9882],[.498,.498,.9961],[.502,.502,.9917],[.5059,.5059,.975],[.5098,.5098,.9583],[.5137,.5137,.9416],[.5176,.5176,.9249],[.5216,.5216,.9082],[.5255,.5255,.8915],[.5294,.5294,.8748],[.5333,.5333,.8582],[.5373,.5373,.8415],[.5412,.5412,.8248],[.5451,.5451,.8081],[.549,.549,.7914],[.5529,.5529,.7747],[.5569,.5569,.758],[.5608,.5608,.7413],[.5647,.5647,.7247],[.5686,.5686,.708],[.5725,.5725,.6913],[.5765,.5765,.6746],[.5804,.5804,.6579],[.5843,.5843,.6412],[.5882,.5882,.6245],[.5922,.5922,.6078],[.5961,.5961,.5912],[.6,.6,.5745],[.6039,.6039,.5578],[.6078,.6078,.5411],[.6118,.6118,.5244],[.6157,.6157,.5077],[.6196,.6196,.491],[.6235,.6235,.4743],[.6275,.6275,.4577],[.6314,.6314,.441],[.6353,.6353,.4243],[.6392,.6392,.4076],[.6431,.6431,.3909],[.6471,.6471,.3742],[.651,.651,.3575],[.6549,.6549,.3408],[.6588,.6588,.3242],[.6627,.6627,.3075],[.6667,.6667,.2908],[.6706,.6706,.2741],[.6745,.6745,.2574],[.6784,.6784,.2407],[.6824,.6824,.224],[.6863,.6863,.2073],[.6902,.6902,.1907],[.6941,.6941,.174],[.698,.698,.1573],[.702,.702,.1406],[.7059,.7059,.1239],[.7098,.7098,.1072],[.7137,.7137,.0905],[.7176,.7176,.0738],[.7216,.7216,.0572],[.7255,.7255,.0405],[.7294,.7294,.0238],[.7333,.7333,.0071],[.7373,.7373,.0085],[.7412,.7412,.0233],[.7451,.7451,.0381],[.749,.749,.0529],[.7529,.7529,.0677],[.7569,.7569,.0825],[.7608,.7608,.0973],[.7647,.7647,.1121],[.7686,.7686,.1269],[.7725,.7725,.1417],[.7765,.7765,.1565],[.7804,.7804,.1713],[.7843,.7843,.1861],[.7882,.7882,.2009],[.7922,.7922,.2157],[.7961,.7961,.2305],[.8,.8,.2453],[.8039,.8039,.2601],[.8078,.8078,.2749],[.8118,.8118,.2897],[.8157,.8157,.3045],[.8196,.8196,.3193],[.8235,.8235,.3341],[.8275,.8275,.3489],[.8314,.8314,.3637],[.8353,.8353,.3785],[.8392,.8392,.3933],[.8431,.8431,.4081],[.8471,.8471,.4229],[.851,.851,.4377],[.8549,.8549,.4525],[.8588,.8588,.4673],[.8627,.8627,.4821],[.8667,.8667,.4969],[.8706,.8706,.5117],[.8745,.8745,.5265],[.8784,.8784,.5413],[.8824,.8824,.556],[.8863,.8863,.5708],[.8902,.8902,.5856],[.8941,.8941,.6004],[.898,.898,.6152],[.902,.902,.63],[.9059,.9059,.6448],[.9098,.9098,.6596],[.9137,.9137,.6744],[.9176,.9176,.6892],[.9216,.9216,.704],[.9255,.9255,.7188],[.9294,.9294,.7336],[.9333,.9333,.7484],[.9373,.9373,.7632],[.9412,.9412,.778],[.9451,.9451,.7928],[.949,.949,.8076],[.9529,.9529,.8224],[.9569,.9569,.8372],[.9608,.9608,.852],[.9647,.9647,.8668],[.9686,.9686,.8816],[.9725,.9725,.8964],[.9765,.9765,.9112],[.9804,.9804,.926],[.9843,.9843,.9408],[.9882,.9882,.9556],[.9922,.9922,.9704],[.9961,.9961,.9852],[1,1,1]]},gist_yarg:{interpolate:!0,colors:[[1,1,1],[.9961,.9961,.9961],[.9922,.9922,.9922],[.9882,.9882,.9882],[.9843,.9843,.9843],[.9804,.9804,.9804],[.9765,.9765,.9765],[.9725,.9725,.9725],[.9686,.9686,.9686],[.9647,.9647,.9647],[.9608,.9608,.9608],[.9569,.9569,.9569],[.9529,.9529,.9529],[.949,.949,.949],[.9451,.9451,.9451],[.9412,.9412,.9412],[.9373,.9373,.9373],[.9333,.9333,.9333],[.9294,.9294,.9294],[.9255,.9255,.9255],[.9216,.9216,.9216],[.9176,.9176,.9176],[.9137,.9137,.9137],[.9098,.9098,.9098],[.9059,.9059,.9059],[.902,.902,.902],[.898,.898,.898],[.8941,.8941,.8941],[.8902,.8902,.8902],[.8863,.8863,.8863],[.8824,.8824,.8824],[.8784,.8784,.8784],[.8745,.8745,.8745],[.8706,.8706,.8706],[.8667,.8667,.8667],[.8627,.8627,.8627],[.8588,.8588,.8588],[.8549,.8549,.8549],[.851,.851,.851],[.8471,.8471,.8471],[.8431,.8431,.8431],[.8392,.8392,.8392],[.8353,.8353,.8353],[.8314,.8314,.8314],[.8275,.8275,.8275],[.8235,.8235,.8235],[.8196,.8196,.8196],[.8157,.8157,.8157],[.8118,.8118,.8118],[.8078,.8078,.8078],[.8039,.8039,.8039],[.8,.8,.8],[.7961,.7961,.7961],[.7922,.7922,.7922],[.7882,.7882,.7882],[.7843,.7843,.7843],[.7804,.7804,.7804],[.7765,.7765,.7765],[.7725,.7725,.7725],[.7686,.7686,.7686],[.7647,.7647,.7647],[.7608,.7608,.7608],[.7569,.7569,.7569],[.7529,.7529,.7529],[.749,.749,.749],[.7451,.7451,.7451],[.7412,.7412,.7412],[.7373,.7373,.7373],[.7333,.7333,.7333],[.7294,.7294,.7294],[.7255,.7255,.7255],[.7216,.7216,.7216],[.7176,.7176,.7176],[.7137,.7137,.7137],[.7098,.7098,.7098],[.7059,.7059,.7059],[.702,.702,.702],[.698,.698,.698],[.6941,.6941,.6941],[.6902,.6902,.6902],[.6863,.6863,.6863],[.6824,.6824,.6824],[.6784,.6784,.6784],[.6745,.6745,.6745],[.6706,.6706,.6706],[.6667,.6667,.6667],[.6627,.6627,.6627],[.6588,.6588,.6588],[.6549,.6549,.6549],[.651,.651,.651],[.6471,.6471,.6471],[.6431,.6431,.6431],[.6392,.6392,.6392],[.6353,.6353,.6353],[.6314,.6314,.6314],[.6275,.6275,.6275],[.6235,.6235,.6235],[.6196,.6196,.6196],[.6157,.6157,.6157],[.6118,.6118,.6118],[.6078,.6078,.6078],[.6039,.6039,.6039],[.6,.6,.6],[.5961,.5961,.5961],[.5922,.5922,.5922],[.5882,.5882,.5882],[.5843,.5843,.5843],[.5804,.5804,.5804],[.5765,.5765,.5765],[.5725,.5725,.5725],[.5686,.5686,.5686],[.5647,.5647,.5647],[.5608,.5608,.5608],[.5569,.5569,.5569],[.5529,.5529,.5529],[.549,.549,.549],[.5451,.5451,.5451],[.5412,.5412,.5412],[.5373,.5373,.5373],[.5333,.5333,.5333],[.5294,.5294,.5294],[.5255,.5255,.5255],[.5216,.5216,.5216],[.5176,.5176,.5176],[.5137,.5137,.5137],[.5098,.5098,.5098],[.5059,.5059,.5059],[.502,.502,.502],[.498,.498,.498],[.4941,.4941,.4941],[.4902,.4902,.4902],[.4863,.4863,.4863],[.4824,.4824,.4824],[.4784,.4784,.4784],[.4745,.4745,.4745],[.4706,.4706,.4706],[.4667,.4667,.4667],[.4627,.4627,.4627],[.4588,.4588,.4588],[.4549,.4549,.4549],[.451,.451,.451],[.4471,.4471,.4471],[.4431,.4431,.4431],[.4392,.4392,.4392],[.4353,.4353,.4353],[.4314,.4314,.4314],[.4275,.4275,.4275],[.4235,.4235,.4235],[.4196,.4196,.4196],[.4157,.4157,.4157],[.4118,.4118,.4118],[.4078,.4078,.4078],[.4039,.4039,.4039],[.4,.4,.4],[.3961,.3961,.3961],[.3922,.3922,.3922],[.3882,.3882,.3882],[.3843,.3843,.3843],[.3804,.3804,.3804],[.3765,.3765,.3765],[.3725,.3725,.3725],[.3686,.3686,.3686],[.3647,.3647,.3647],[.3608,.3608,.3608],[.3569,.3569,.3569],[.3529,.3529,.3529],[.349,.349,.349],[.3451,.3451,.3451],[.3412,.3412,.3412],[.3373,.3373,.3373],[.3333,.3333,.3333],[.3294,.3294,.3294],[.3255,.3255,.3255],[.3216,.3216,.3216],[.3176,.3176,.3176],[.3137,.3137,.3137],[.3098,.3098,.3098],[.3059,.3059,.3059],[.302,.302,.302],[.298,.298,.298],[.2941,.2941,.2941],[.2902,.2902,.2902],[.2863,.2863,.2863],[.2824,.2824,.2824],[.2784,.2784,.2784],[.2745,.2745,.2745],[.2706,.2706,.2706],[.2667,.2667,.2667],[.2627,.2627,.2627],[.2588,.2588,.2588],[.2549,.2549,.2549],[.251,.251,.251],[.2471,.2471,.2471],[.2431,.2431,.2431],[.2392,.2392,.2392],[.2353,.2353,.2353],[.2314,.2314,.2314],[.2275,.2275,.2275],[.2235,.2235,.2235],[.2196,.2196,.2196],[.2157,.2157,.2157],[.2118,.2118,.2118],[.2078,.2078,.2078],[.2039,.2039,.2039],[.2,.2,.2],[.1961,.1961,.1961],[.1922,.1922,.1922],[.1882,.1882,.1882],[.1843,.1843,.1843],[.1804,.1804,.1804],[.1765,.1765,.1765],[.1725,.1725,.1725],[.1686,.1686,.1686],[.1647,.1647,.1647],[.1608,.1608,.1608],[.1569,.1569,.1569],[.1529,.1529,.1529],[.149,.149,.149],[.1451,.1451,.1451],[.1412,.1412,.1412],[.1373,.1373,.1373],[.1333,.1333,.1333],[.1294,.1294,.1294],[.1255,.1255,.1255],[.1216,.1216,.1216],[.1176,.1176,.1176],[.1137,.1137,.1137],[.1098,.1098,.1098],[.1059,.1059,.1059],[.102,.102,.102],[.098,.098,.098],[.0941,.0941,.0941],[.0902,.0902,.0902],[.0863,.0863,.0863],[.0824,.0824,.0824],[.0784,.0784,.0784],[.0745,.0745,.0745],[.0706,.0706,.0706],[.0667,.0667,.0667],[.0627,.0627,.0627],[.0588,.0588,.0588],[.0549,.0549,.0549],[.051,.051,.051],[.0471,.0471,.0471],[.0431,.0431,.0431],[.0392,.0392,.0392],[.0353,.0353,.0353],[.0314,.0314,.0314],[.0275,.0275,.0275],[.0235,.0235,.0235],[.0196,.0196,.0196],[.0157,.0157,.0157],[.0118,.0118,.0118],[.0078,.0078,.0078],[.0039,.0039,.0039],[0,0,0]]},gnuplot:{interpolate:!0,colors:[[0,0,0],[.0626,0,.0246],[.0886,0,.0493],[.1085,0,.0739],[.1252,0,.0984],[.14,0,.1229],[.1534,0,.1473],[.1657,0,.1716],[.1771,0,.1958],[.1879,0,.2199],[.198,1e-4,.2439],[.2077,1e-4,.2677],[.2169,1e-4,.2914],[.2258,1e-4,.3149],[.2343,2e-4,.3382],[.2425,2e-4,.3612],[.2505,2e-4,.3841],[.2582,3e-4,.4067],[.2657,4e-4,.4291],[.273,4e-4,.4512],[.2801,5e-4,.4731],[.287,6e-4,.4947],[.2937,6e-4,.5159],[.3003,7e-4,.5369],[.3068,8e-4,.5575],[.3131,9e-4,.5778],[.3193,.0011,.5977],[.3254,.0012,.6173],[.3314,.0013,.6365],[.3372,.0015,.6553],[.343,.0016,.6737],[.3487,.0018,.6917],[.3542,.002,.7093],[.3597,.0022,.7264],[.3651,.0024,.7431],[.3705,.0026,.7594],[.3757,.0028,.7752],[.3809,.0031,.7905],[.386,.0033,.8054],[.3911,.0036,.8197],[.3961,.0039,.8336],[.401,.0042,.847],[.4058,.0045,.8598],[.4106,.0048,.8721],[.4154,.0051,.8839],[.4201,.0055,.8952],[.4247,.0059,.9059],[.4293,.0063,.916],[.4339,.0067,.9256],[.4384,.0071,.9347],[.4428,.0075,.9432],[.4472,.008,.9511],[.4516,.0085,.9584],[.4559,.009,.9651],[.4602,.0095,.9713],[.4644,.01,.9768],[.4686,.0106,.9818],[.4728,.0112,.9862],[.4769,.0118,.99],[.481,.0124,.9932],[.4851,.013,.9957],[.4891,.0137,.9977],[.4931,.0144,.9991],[.4971,.0151,.9998],[.501,.0158,1],[.5049,.0166,.9995],[.5087,.0173,.9985],[.5126,.0181,.9968],[.5164,.019,.9945],[.5202,.0198,.9916],[.5239,.0207,.9882],[.5277,.0216,.9841],[.5314,.0225,.9794],[.535,.0235,.9741],[.5387,.0244,.9683],[.5423,.0254,.9618],[.5459,.0265,.9548],[.5495,.0275,.9472],[.5531,.0286,.939],[.5566,.0297,.9302],[.5601,.0309,.9209],[.5636,.0321,.911],[.5671,.0333,.9006],[.5705,.0345,.8896],[.5739,.0357,.8781],[.5774,.037,.866],[.5807,.0384,.8534],[.5841,.0397,.8403],[.5875,.0411,.8267],[.5908,.0425,.8126],[.5941,.044,.798],[.5974,.0454,.7829],[.6007,.047,.7674],[.6039,.0485,.7513],[.6071,.0501,.7348],[.6104,.0517,.7179],[.6136,.0534,.7005],[.6168,.055,.6827],[.6199,.0568,.6645],[.6231,.0585,.6459],[.6262,.0603,.6269],[.6293,.0621,.6075],[.6325,.064,.5878],[.6355,.0659,.5677],[.6386,.0678,.5472],[.6417,.0698,.5264],[.6447,.0718,.5053],[.6478,.0739,.4839],[.6508,.076,.4622],[.6538,.0781,.4402],[.6568,.0803,.418],[.6598,.0825,.3955],[.6627,.0847,.3727],[.6657,.087,.3497],[.6686,.0893,.3265],[.6716,.0917,.3032],[.6745,.0941,.2796],[.6774,.0966,.2558],[.6803,.0991,.2319],[.6831,.1016,.2079],[.686,.1042,.1837],[.6888,.1068,.1595],[.6917,.1095,.1351],[.6945,.1122,.1107],[.6973,.115,.0861],[.7001,.1178,.0616],[.7029,.1206,.037],[.7057,.1235,.0123],[.7085,.1265,0],[.7113,.1295,0],[.714,.1325,0],[.7167,.1356,0],[.7195,.1387,0],[.7222,.1419,0],[.7249,.1451,0],[.7276,.1484,0],[.7303,.1517,0],[.733,.1551,0],[.7356,.1585,0],[.7383,.162,0],[.741,.1655,0],[.7436,.1691,0],[.7462,.1727,0],[.7489,.1764,0],[.7515,.1801,0],[.7541,.1839,0],[.7567,.1877,0],[.7593,.1916,0],[.7618,.1955,0],[.7644,.1995,0],[.767,.2035,0],[.7695,.2076,0],[.7721,.2118,0],[.7746,.216,0],[.7771,.2203,0],[.7796,.2246,0],[.7822,.229,0],[.7847,.2334,0],[.7872,.2379,0],[.7896,.2424,0],[.7921,.247,0],[.7946,.2517,0],[.7971,.2564,0],[.7995,.2612,0],[.802,.266,0],[.8044,.2709,0],[.8068,.2759,0],[.8093,.2809,0],[.8117,.286,0],[.8141,.2911,0],[.8165,.2963,0],[.8189,.3016,0],[.8213,.3069,0],[.8237,.3123,0],[.826,.3177,0],[.8284,.3232,0],[.8308,.3288,0],[.8331,.3344,0],[.8355,.3401,0],[.8378,.3459,0],[.8402,.3517,0],[.8425,.3576,0],[.8448,.3636,0],[.8471,.3696,0],[.8495,.3757,0],[.8518,.3819,0],[.8541,.3881,0],[.8563,.3944,0],[.8586,.4007,0],[.8609,.4072,0],[.8632,.4137,0],[.8655,.4202,0],[.8677,.4269,0],[.87,.4336,0],[.8722,.4403,0],[.8745,.4472,0],[.8767,.4541,0],[.8789,.4611,0],[.8812,.4681,0],[.8834,.4753,0],[.8856,.4825,0],[.8878,.4897,0],[.89,.4971,0],[.8922,.5045,0],[.8944,.512,0],[.8966,.5196,0],[.8988,.5272,0],[.901,.5349,0],[.9032,.5427,0],[.9053,.5506,0],[.9075,.5585,0],[.9096,.5665,0],[.9118,.5746,0],[.9139,.5828,0],[.9161,.591,0],[.9182,.5994,0],[.9204,.6078,0],[.9225,.6163,0],[.9246,.6248,0],[.9267,.6334,0],[.9288,.6422,0],[.9309,.651,0],[.9331,.6598,0],[.9352,.6688,0],[.9372,.6778,0],[.9393,.687,0],[.9414,.6962,0],[.9435,.7054,0],[.9456,.7148,0],[.9476,.7242,0],[.9497,.7338,0],[.9518,.7434,0],[.9538,.7531,0],[.9559,.7629,0],[.9579,.7727,0],[.96,.7827,0],[.962,.7927,0],[.9641,.8028,0],[.9661,.813,0],[.9681,.8233,0],[.9701,.8337,0],[.9722,.8442,0],[.9742,.8547,0],[.9762,.8654,0],[.9782,.8761,0],[.9802,.8869,0],[.9822,.8978,0],[.9842,.9088,0],[.9862,.9199,0],[.9882,.9311,0],[.9901,.9423,0],[.9921,.9537,0],[.9941,.9651,0],[.9961,.9767,0],[.998,.9883,0],[1,1,0]]},gnuplot2:{interpolate:!0,colors:[[0,0,0],[0,0,.0157],[0,0,.0314],[0,0,.0471],[0,0,.0627],[0,0,.0784],[0,0,.0941],[0,0,.1098],[0,0,.1255],[0,0,.1412],[0,0,.1569],[0,0,.1725],[0,0,.1882],[0,0,.2039],[0,0,.2196],[0,0,.2353],[0,0,.251],[0,0,.2667],[0,0,.2824],[0,0,.298],[0,0,.3137],[0,0,.3294],[0,0,.3451],[0,0,.3608],[0,0,.3765],[0,0,.3922],[0,0,.4078],[0,0,.4235],[0,0,.4392],[0,0,.4549],[0,0,.4706],[0,0,.4863],[0,0,.502],[0,0,.5176],[0,0,.5333],[0,0,.549],[0,0,.5647],[0,0,.5804],[0,0,.5961],[0,0,.6118],[0,0,.6275],[0,0,.6431],[0,0,.6588],[0,0,.6745],[0,0,.6902],[0,0,.7059],[0,0,.7216],[0,0,.7373],[0,0,.7529],[0,0,.7686],[0,0,.7843],[0,0,.8],[0,0,.8157],[0,0,.8314],[0,0,.8471],[0,0,.8627],[0,0,.8784],[0,0,.8941],[0,0,.9098],[0,0,.9255],[0,0,.9412],[0,0,.9569],[0,0,.9725],[0,0,.9882],[.0031,0,1],[.0153,0,1],[.0276,0,1],[.0398,0,1],[.0521,0,1],[.0643,0,1],[.0766,0,1],[.0888,0,1],[.1011,0,1],[.1134,0,1],[.1256,0,1],[.1379,0,1],[.1501,0,1],[.1624,0,1],[.1746,0,1],[.1869,0,1],[.1991,0,1],[.2114,0,1],[.2237,0,1],[.2359,0,1],[.2482,0,1],[.2604,0,1],[.2727,0,1],[.2849,0,1],[.2972,0,1],[.3094,0,1],[.3217,0,1],[.3339,0,1],[.3462,0,1],[.3585,0,1],[.3707,0,1],[.383,0,1],[.3952,0,1],[.4075,0,1],[.4197,0,1],[.432,0,1],[.4442,0,1],[.4565,0,1],[.4688,0,1],[.481,0,1],[.4933,0,1],[.5055,0,1],[.5178,0,1],[.53,0,1],[.5423,.0071,.9929],[.5545,.0149,.9851],[.5668,.0227,.9773],[.579,.0306,.9694],[.5913,.0384,.9616],[.6036,.0463,.9537],[.6158,.0541,.9459],[.6281,.062,.938],[.6403,.0698,.9302],[.6526,.0776,.9224],[.6648,.0855,.9145],[.6771,.0933,.9067],[.6893,.1012,.8988],[.7016,.109,.891],[.7138,.1169,.8831],[.7261,.1247,.8753],[.7384,.1325,.8675],[.7506,.1404,.8596],[.7629,.1482,.8518],[.7751,.1561,.8439],[.7874,.1639,.8361],[.7996,.1718,.8282],[.8119,.1796,.8204],[.8241,.1875,.8125],[.8364,.1953,.8047],[.8487,.2031,.7969],[.8609,.211,.789],[.8732,.2188,.7812],[.8854,.2267,.7733],[.8977,.2345,.7655],[.9099,.2424,.7576],[.9222,.2502,.7498],[.9344,.258,.742],[.9467,.2659,.7341],[.9589,.2737,.7263],[.9712,.2816,.7184],[.9835,.2894,.7106],[.9957,.2973,.7027],[1,.3051,.6949],[1,.3129,.6871],[1,.3208,.6792],[1,.3286,.6714],[1,.3365,.6635],[1,.3443,.6557],[1,.3522,.6478],[1,.36,.64],[1,.3678,.6322],[1,.3757,.6243],[1,.3835,.6165],[1,.3914,.6086],[1,.3992,.6008],[1,.4071,.5929],[1,.4149,.5851],[1,.4227,.5773],[1,.4306,.5694],[1,.4384,.5616],[1,.4463,.5537],[1,.4541,.5459],[1,.462,.538],[1,.4698,.5302],[1,.4776,.5224],[1,.4855,.5145],[1,.4933,.5067],[1,.5012,.4988],[1,.509,.491],[1,.5169,.4831],[1,.5247,.4753],[1,.5325,.4675],[1,.5404,.4596],[1,.5482,.4518],[1,.5561,.4439],[1,.5639,.4361],[1,.5718,.4282],[1,.5796,.4204],[1,.5875,.4125],[1,.5953,.4047],[1,.6031,.3969],[1,.611,.389],[1,.6188,.3812],[1,.6267,.3733],[1,.6345,.3655],[1,.6424,.3576],[1,.6502,.3498],[1,.658,.342],[1,.6659,.3341],[1,.6737,.3263],[1,.6816,.3184],[1,.6894,.3106],[1,.6973,.3027],[1,.7051,.2949],[1,.7129,.2871],[1,.7208,.2792],[1,.7286,.2714],[1,.7365,.2635],[1,.7443,.2557],[1,.7522,.2478],[1,.76,.24],[1,.7678,.2322],[1,.7757,.2243],[1,.7835,.2165],[1,.7914,.2086],[1,.7992,.2008],[1,.8071,.1929],[1,.8149,.1851],[1,.8227,.1773],[1,.8306,.1694],[1,.8384,.1616],[1,.8463,.1537],[1,.8541,.1459],[1,.862,.138],[1,.8698,.1302],[1,.8776,.1224],[1,.8855,.1145],[1,.8933,.1067],[1,.9012,.0988],[1,.909,.091],[1,.9169,.0831],[1,.9247,.0753],[1,.9325,.0675],[1,.9404,.0596],[1,.9482,.0518],[1,.9561,.0439],[1,.9639,.0361],[1,.9718,.0282],[1,.9796,.0204],[1,.9875,.0125],[1,.9953,.0047],[1,1,.0196],[1,1,.0686],[1,1,.1176],[1,1,.1667],[1,1,.2157],[1,1,.2647],[1,1,.3137],[1,1,.3627],[1,1,.4118],[1,1,.4608],[1,1,.5098],[1,1,.5588],[1,1,.6078],[1,1,.6569],[1,1,.7059],[1,1,.7549],[1,1,.8039],[1,1,.8529],[1,1,.902],[1,1,.951],[1,1,1]]},gray:{interpolate:!0,colors:[[0,0,0],[.0039,.0039,.0039],[.0078,.0078,.0078],[.0118,.0118,.0118],[.0157,.0157,.0157],[.0196,.0196,.0196],[.0235,.0235,.0235],[.0275,.0275,.0275],[.0314,.0314,.0314],[.0353,.0353,.0353],[.0392,.0392,.0392],[.0431,.0431,.0431],[.0471,.0471,.0471],[.051,.051,.051],[.0549,.0549,.0549],[.0588,.0588,.0588],[.0627,.0627,.0627],[.0667,.0667,.0667],[.0706,.0706,.0706],[.0745,.0745,.0745],[.0784,.0784,.0784],[.0824,.0824,.0824],[.0863,.0863,.0863],[.0902,.0902,.0902],[.0941,.0941,.0941],[.098,.098,.098],[.102,.102,.102],[.1059,.1059,.1059],[.1098,.1098,.1098],[.1137,.1137,.1137],[.1176,.1176,.1176],[.1216,.1216,.1216],[.1255,.1255,.1255],[.1294,.1294,.1294],[.1333,.1333,.1333],[.1373,.1373,.1373],[.1412,.1412,.1412],[.1451,.1451,.1451],[.149,.149,.149],[.1529,.1529,.1529],[.1569,.1569,.1569],[.1608,.1608,.1608],[.1647,.1647,.1647],[.1686,.1686,.1686],[.1725,.1725,.1725],[.1765,.1765,.1765],[.1804,.1804,.1804],[.1843,.1843,.1843],[.1882,.1882,.1882],[.1922,.1922,.1922],[.1961,.1961,.1961],[.2,.2,.2],[.2039,.2039,.2039],[.2078,.2078,.2078],[.2118,.2118,.2118],[.2157,.2157,.2157],[.2196,.2196,.2196],[.2235,.2235,.2235],[.2275,.2275,.2275],[.2314,.2314,.2314],[.2353,.2353,.2353],[.2392,.2392,.2392],[.2431,.2431,.2431],[.2471,.2471,.2471],[.251,.251,.251],[.2549,.2549,.2549],[.2588,.2588,.2588],[.2627,.2627,.2627],[.2667,.2667,.2667],[.2706,.2706,.2706],[.2745,.2745,.2745],[.2784,.2784,.2784],[.2824,.2824,.2824],[.2863,.2863,.2863],[.2902,.2902,.2902],[.2941,.2941,.2941],[.298,.298,.298],[.302,.302,.302],[.3059,.3059,.3059],[.3098,.3098,.3098],[.3137,.3137,.3137],[.3176,.3176,.3176],[.3216,.3216,.3216],[.3255,.3255,.3255],[.3294,.3294,.3294],[.3333,.3333,.3333],[.3373,.3373,.3373],[.3412,.3412,.3412],[.3451,.3451,.3451],[.349,.349,.349],[.3529,.3529,.3529],[.3569,.3569,.3569],[.3608,.3608,.3608],[.3647,.3647,.3647],[.3686,.3686,.3686],[.3725,.3725,.3725],[.3765,.3765,.3765],[.3804,.3804,.3804],[.3843,.3843,.3843],[.3882,.3882,.3882],[.3922,.3922,.3922],[.3961,.3961,.3961],[.4,.4,.4],[.4039,.4039,.4039],[.4078,.4078,.4078],[.4118,.4118,.4118],[.4157,.4157,.4157],[.4196,.4196,.4196],[.4235,.4235,.4235],[.4275,.4275,.4275],[.4314,.4314,.4314],[.4353,.4353,.4353],[.4392,.4392,.4392],[.4431,.4431,.4431],[.4471,.4471,.4471],[.451,.451,.451],[.4549,.4549,.4549],[.4588,.4588,.4588],[.4627,.4627,.4627],[.4667,.4667,.4667],[.4706,.4706,.4706],[.4745,.4745,.4745],[.4784,.4784,.4784],[.4824,.4824,.4824],[.4863,.4863,.4863],[.4902,.4902,.4902],[.4941,.4941,.4941],[.498,.498,.498],[.502,.502,.502],[.5059,.5059,.5059],[.5098,.5098,.5098],[.5137,.5137,.5137],[.5176,.5176,.5176],[.5216,.5216,.5216],[.5255,.5255,.5255],[.5294,.5294,.5294],[.5333,.5333,.5333],[.5373,.5373,.5373],[.5412,.5412,.5412],[.5451,.5451,.5451],[.549,.549,.549],[.5529,.5529,.5529],[.5569,.5569,.5569],[.5608,.5608,.5608],[.5647,.5647,.5647],[.5686,.5686,.5686],[.5725,.5725,.5725],[.5765,.5765,.5765],[.5804,.5804,.5804],[.5843,.5843,.5843],[.5882,.5882,.5882],[.5922,.5922,.5922],[.5961,.5961,.5961],[.6,.6,.6],[.6039,.6039,.6039],[.6078,.6078,.6078],[.6118,.6118,.6118],[.6157,.6157,.6157],[.6196,.6196,.6196],[.6235,.6235,.6235],[.6275,.6275,.6275],[.6314,.6314,.6314],[.6353,.6353,.6353],[.6392,.6392,.6392],[.6431,.6431,.6431],[.6471,.6471,.6471],[.651,.651,.651],[.6549,.6549,.6549],[.6588,.6588,.6588],[.6627,.6627,.6627],[.6667,.6667,.6667],[.6706,.6706,.6706],[.6745,.6745,.6745],[.6784,.6784,.6784],[.6824,.6824,.6824],[.6863,.6863,.6863],[.6902,.6902,.6902],[.6941,.6941,.6941],[.698,.698,.698],[.702,.702,.702],[.7059,.7059,.7059],[.7098,.7098,.7098],[.7137,.7137,.7137],[.7176,.7176,.7176],[.7216,.7216,.7216],[.7255,.7255,.7255],[.7294,.7294,.7294],[.7333,.7333,.7333],[.7373,.7373,.7373],[.7412,.7412,.7412],[.7451,.7451,.7451],[.749,.749,.749],[.7529,.7529,.7529],[.7569,.7569,.7569],[.7608,.7608,.7608],[.7647,.7647,.7647],[.7686,.7686,.7686],[.7725,.7725,.7725],[.7765,.7765,.7765],[.7804,.7804,.7804],[.7843,.7843,.7843],[.7882,.7882,.7882],[.7922,.7922,.7922],[.7961,.7961,.7961],[.8,.8,.8],[.8039,.8039,.8039],[.8078,.8078,.8078],[.8118,.8118,.8118],[.8157,.8157,.8157],[.8196,.8196,.8196],[.8235,.8235,.8235],[.8275,.8275,.8275],[.8314,.8314,.8314],[.8353,.8353,.8353],[.8392,.8392,.8392],[.8431,.8431,.8431],[.8471,.8471,.8471],[.851,.851,.851],[.8549,.8549,.8549],[.8588,.8588,.8588],[.8627,.8627,.8627],[.8667,.8667,.8667],[.8706,.8706,.8706],[.8745,.8745,.8745],[.8784,.8784,.8784],[.8824,.8824,.8824],[.8863,.8863,.8863],[.8902,.8902,.8902],[.8941,.8941,.8941],[.898,.898,.898],[.902,.902,.902],[.9059,.9059,.9059],[.9098,.9098,.9098],[.9137,.9137,.9137],[.9176,.9176,.9176],[.9216,.9216,.9216],[.9255,.9255,.9255],[.9294,.9294,.9294],[.9333,.9333,.9333],[.9373,.9373,.9373],[.9412,.9412,.9412],[.9451,.9451,.9451],[.949,.949,.949],[.9529,.9529,.9529],[.9569,.9569,.9569],[.9608,.9608,.9608],[.9647,.9647,.9647],[.9686,.9686,.9686],[.9725,.9725,.9725],[.9765,.9765,.9765],[.9804,.9804,.9804],[.9843,.9843,.9843],[.9882,.9882,.9882],[.9922,.9922,.9922],[.9961,.9961,.9961],[1,1,1]]},hot:{interpolate:!0,colors:[[.0416,0,0],[.0519,0,0],[.0622,0,0],[.0725,0,0],[.0828,0,0],[.0931,0,0],[.1034,0,0],[.1137,0,0],[.124,0,0],[.1343,0,0],[.1445,0,0],[.1548,0,0],[.1651,0,0],[.1754,0,0],[.1857,0,0],[.196,0,0],[.2063,0,0],[.2166,0,0],[.2269,0,0],[.2372,0,0],[.2475,0,0],[.2578,0,0],[.2681,0,0],[.2784,0,0],[.2887,0,0],[.299,0,0],[.3093,0,0],[.3196,0,0],[.3299,0,0],[.3402,0,0],[.3504,0,0],[.3607,0,0],[.371,0,0],[.3813,0,0],[.3916,0,0],[.4019,0,0],[.4122,0,0],[.4225,0,0],[.4328,0,0],[.4431,0,0],[.4534,0,0],[.4637,0,0],[.474,0,0],[.4843,0,0],[.4946,0,0],[.5049,0,0],[.5152,0,0],[.5255,0,0],[.5358,0,0],[.546,0,0],[.5563,0,0],[.5666,0,0],[.5769,0,0],[.5872,0,0],[.5975,0,0],[.6078,0,0],[.6181,0,0],[.6284,0,0],[.6387,0,0],[.649,0,0],[.6593,0,0],[.6696,0,0],[.6799,0,0],[.6902,0,0],[.7005,0,0],[.7108,0,0],[.7211,0,0],[.7314,0,0],[.7416,0,0],[.7519,0,0],[.7622,0,0],[.7725,0,0],[.7828,0,0],[.7931,0,0],[.8034,0,0],[.8137,0,0],[.824,0,0],[.8343,0,0],[.8446,0,0],[.8549,0,0],[.8652,0,0],[.8755,0,0],[.8858,0,0],[.8961,0,0],[.9064,0,0],[.9167,0,0],[.927,0,0],[.9373,0,0],[.9475,0,0],[.9578,0,0],[.9681,0,0],[.9784,0,0],[.9887,0,0],[.999,0,0],[1,.0093,0],[1,.0196,0],[1,.0299,0],[1,.0402,0],[1,.0505,0],[1,.0608,0],[1,.0711,0],[1,.0814,0],[1,.0917,0],[1,.102,0],[1,.1123,0],[1,.1225,0],[1,.1328,0],[1,.1431,0],[1,.1534,0],[1,.1637,0],[1,.174,0],[1,.1843,0],[1,.1946,0],[1,.2049,0],[1,.2152,0],[1,.2255,0],[1,.2358,0],[1,.2461,0],[1,.2564,0],[1,.2667,0],[1,.277,0],[1,.2873,0],[1,.2975,0],[1,.3078,0],[1,.3181,0],[1,.3284,0],[1,.3387,0],[1,.349,0],[1,.3593,0],[1,.3696,0],[1,.3799,0],[1,.3902,0],[1,.4005,0],[1,.4108,0],[1,.4211,0],[1,.4314,0],[1,.4417,0],[1,.452,0],[1,.4623,0],[1,.4725,0],[1,.4828,0],[1,.4931,0],[1,.5034,0],[1,.5137,0],[1,.524,0],[1,.5343,0],[1,.5446,0],[1,.5549,0],[1,.5652,0],[1,.5755,0],[1,.5858,0],[1,.5961,0],[1,.6064,0],[1,.6167,0],[1,.627,0],[1,.6373,0],[1,.6475,0],[1,.6578,0],[1,.6681,0],[1,.6784,0],[1,.6887,0],[1,.699,0],[1,.7093,0],[1,.7196,0],[1,.7299,0],[1,.7402,0],[1,.7505,0],[1,.7608,0],[1,.7711,0],[1,.7814,0],[1,.7917,0],[1,.802,0],[1,.8123,0],[1,.8225,0],[1,.8328,0],[1,.8431,0],[1,.8534,0],[1,.8637,0],[1,.874,0],[1,.8843,0],[1,.8946,0],[1,.9049,0],[1,.9152,0],[1,.9255,0],[1,.9358,0],[1,.9461,0],[1,.9564,0],[1,.9667,0],[1,.977,0],[1,.9873,0],[1,.9975,0],[1,1,.0118],[1,1,.0272],[1,1,.0426],[1,1,.0581],[1,1,.0735],[1,1,.089],[1,1,.1044],[1,1,.1199],[1,1,.1353],[1,1,.1507],[1,1,.1662],[1,1,.1816],[1,1,.1971],[1,1,.2125],[1,1,.2279],[1,1,.2434],[1,1,.2588],[1,1,.2743],[1,1,.2897],[1,1,.3051],[1,1,.3206],[1,1,.336],[1,1,.3515],[1,1,.3669],[1,1,.3824],[1,1,.3978],[1,1,.4132],[1,1,.4287],[1,1,.4441],[1,1,.4596],[1,1,.475],[1,1,.4904],[1,1,.5059],[1,1,.5213],[1,1,.5368],[1,1,.5522],[1,1,.5676],[1,1,.5831],[1,1,.5985],[1,1,.614],[1,1,.6294],[1,1,.6449],[1,1,.6603],[1,1,.6757],[1,1,.6912],[1,1,.7066],[1,1,.7221],[1,1,.7375],[1,1,.7529],[1,1,.7684],[1,1,.7838],[1,1,.7993],[1,1,.8147],[1,1,.8301],[1,1,.8456],[1,1,.861],[1,1,.8765],[1,1,.8919],[1,1,.9074],[1,1,.9228],[1,1,.9382],[1,1,.9537],[1,1,.9691],[1,1,.9846],[1,1,1]]},hsv:{interpolate:!0,colors:[[1,0,0],[1,.0232,0],[1,.0463,0],[1,.0695,0],[1,.0926,0],[1,.1158,0],[1,.139,0],[1,.1621,0],[1,.1853,0],[1,.2085,0],[1,.2316,0],[1,.2548,0],[1,.2779,0],[1,.3011,0],[1,.3243,0],[1,.3474,0],[1,.3706,0],[1,.3938,0],[1,.4169,0],[1,.4401,0],[1,.4632,0],[1,.4864,0],[1,.5096,0],[1,.5327,0],[1,.5559,0],[1,.579,0],[1,.6022,0],[1,.6254,0],[1,.6485,0],[1,.6717,0],[1,.6949,0],[1,.718,0],[1,.7412,0],[1,.7643,0],[1,.7875,0],[1,.8107,0],[1,.8338,0],[1,.857,0],[1,.8801,0],[1,.9033,0],[1,.9265,0],[.996,.9456,0],[.9882,.961,0],[.9805,.9765,0],[.9728,.9919,0],[.9577,1,0],[.9346,1,0],[.9114,1,0],[.8882,1,0],[.8651,1,0],[.8419,1,0],[.8187,1,0],[.7956,1,0],[.7724,1,0],[.7493,1,0],[.7261,1,0],[.7029,1,0],[.6798,1,0],[.6566,1,0],[.6335,1,0],[.6103,1,0],[.5871,1,0],[.564,1,0],[.5408,1,0],[.5176,1,0],[.4945,1,0],[.4713,1,0],[.4482,1,0],[.425,1,0],[.4018,1,0],[.3787,1,0],[.3555,1,0],[.3324,1,0],[.3092,1,0],[.286,1,0],[.2629,1,0],[.2397,1,0],[.2165,1,0],[.1934,1,0],[.1702,1,0],[.1471,1,0],[.1239,1,0],[.1007,1,0],[.0776,1,0],[.0544,1,0],[.0312,1,0],[.0235,1,.0154],[.0158,1,.0309],[.0081,1,.0463],[4e-4,1,.0618],[0,1,.0846],[0,1,.1077],[0,1,.1309],[0,1,.154],[0,1,.1772],[0,1,.2004],[0,1,.2235],[0,1,.2467],[0,1,.2699],[0,1,.293],[0,1,.3162],[0,1,.3393],[0,1,.3625],[0,1,.3857],[0,1,.4088],[0,1,.432],[0,1,.4551],[0,1,.4783],[0,1,.5015],[0,1,.5246],[0,1,.5478],[0,1,.571],[0,1,.5941],[0,1,.6173],[0,1,.6404],[0,1,.6636],[0,1,.6868],[0,1,.7099],[0,1,.7331],[0,1,.7562],[0,1,.7794],[0,1,.8026],[0,1,.8257],[0,1,.8489],[0,1,.8721],[0,1,.8952],[0,1,.9184],[0,1,.9415],[0,1,.9647],[0,1,.9879],[0,.989,1],[0,.9658,1],[0,.9426,1],[0,.9195,1],[0,.8963,1],[0,.8732,1],[0,.85,1],[0,.8268,1],[0,.8037,1],[0,.7805,1],[0,.7574,1],[0,.7342,1],[0,.711,1],[0,.6879,1],[0,.6647,1],[0,.6415,1],[0,.6184,1],[0,.5952,1],[0,.5721,1],[0,.5489,1],[0,.5257,1],[0,.5026,1],[0,.4794,1],[0,.4563,1],[0,.4331,1],[0,.4099,1],[0,.3868,1],[0,.3636,1],[0,.3404,1],[0,.3173,1],[0,.2941,1],[0,.271,1],[0,.2478,1],[0,.2246,1],[0,.2015,1],[0,.1783,1],[0,.1551,1],[0,.132,1],[0,.1088,1],[0,.0857,1],[0,.0625,1],[.0077,.0471,1],[.0154,.0316,1],[.0232,.0162,1],[.0309,7e-4,1],[.0533,0,1],[.0765,0,1],[.0996,0,1],[.1228,0,1],[.146,0,1],[.1691,0,1],[.1923,0,1],[.2154,0,1],[.2386,0,1],[.2618,0,1],[.2849,0,1],[.3081,0,1],[.3312,0,1],[.3544,0,1],[.3776,0,1],[.4007,0,1],[.4239,0,1],[.4471,0,1],[.4702,0,1],[.4934,0,1],[.5165,0,1],[.5397,0,1],[.5629,0,1],[.586,0,1],[.6092,0,1],[.6324,0,1],[.6555,0,1],[.6787,0,1],[.7018,0,1],[.725,0,1],[.7482,0,1],[.7713,0,1],[.7945,0,1],[.8176,0,1],[.8408,0,1],[.864,0,1],[.8871,0,1],[.9103,0,1],[.9335,0,1],[.9566,0,1],[.9724,0,.9926],[.9801,0,.9772],[.9879,0,.9618],[.9956,0,.9463],[1,0,.9276],[1,0,.9044],[1,0,.8813],[1,0,.8581],[1,0,.8349],[1,0,.8118],[1,0,.7886],[1,0,.7654],[1,0,.7423],[1,0,.7191],[1,0,.696],[1,0,.6728],[1,0,.6496],[1,0,.6265],[1,0,.6033],[1,0,.5801],[1,0,.557],[1,0,.5338],[1,0,.5107],[1,0,.4875],[1,0,.4643],[1,0,.4412],[1,0,.418],[1,0,.3949],[1,0,.3717],[1,0,.3485],[1,0,.3254],[1,0,.3022],[1,0,.279],[1,0,.2559],[1,0,.2327],[1,0,.2096],[1,0,.1864],[1,0,.1632],[1,0,.1401],[1,0,.1169],[1,0,.0938]]},inferno:{interpolate:!0,colors:[[.0015,5e-4,.0139],[.0023,.0013,.0186],[.0033,.0022,.0242],[.0045,.0034,.0309],[.006,.0047,.0386],[.0077,.0061,.0468],[.0096,.0077,.0551],[.0117,.0094,.0635],[.014,.0112,.0719],[.0166,.0131,.0803],[.0194,.0151,.0888],[.0224,.0172,.0973],[.0258,.0193,.1059],[.0294,.0215,.1146],[.0334,.0237,.1234],[.0377,.0259,.1322],[.0423,.0281,.1411],[.0469,.0303,.1502],[.0516,.0325,.1593],[.0564,.0346,.1684],[.0613,.0366,.1776],[.0663,.0385,.187],[.0714,.0403,.1964],[.0766,.0419,.2058],[.082,.0433,.2153],[.0874,.0446,.2248],[.093,.0456,.2344],[.0987,.0464,.2439],[.1046,.047,.2534],[.1105,.0474,.2629],[.1167,.0476,.2723],[.1229,.0475,.2816],[.1293,.0473,.2908],[.1358,.0469,.2998],[.1424,.0462,.3086],[.1491,.0455,.3171],[.1558,.0446,.3253],[.1627,.0436,.3333],[.1696,.0425,.3409],[.1765,.0414,.3481],[.1834,.0403,.355],[.1904,.0393,.3614],[.1973,.0384,.3675],[.2042,.0376,.3732],[.2111,.037,.3786],[.2179,.0366,.3835],[.2248,.0364,.3881],[.2315,.0364,.3924],[.2383,.0366,.3964],[.245,.0371,.4],[.2516,.0377,.4034],[.2582,.0386,.4065],[.2648,.0396,.4093],[.2713,.0409,.412],[.2778,.0424,.4144],[.2843,.0439,.4166],[.2908,.0456,.4186],[.2972,.0475,.4205],[.3036,.0494,.4222],[.3099,.0514,.4237],[.3163,.0535,.4251],[.3226,.0556,.4264],[.3289,.0578,.4275],[.3352,.0601,.4285],[.3415,.0623,.4294],[.3478,.0646,.4302],[.354,.0669,.4309],[.3603,.0692,.4315],[.3665,.0716,.432],[.3728,.0739,.4324],[.379,.0763,.4327],[.3852,.0786,.433],[.3915,.0809,.4331],[.3977,.0833,.4332],[.4039,.0856,.4332],[.4101,.0879,.4331],[.4163,.0902,.4329],[.4225,.0925,.4327],[.4288,.0948,.4324],[.435,.0971,.432],[.4412,.0993,.4316],[.4474,.1016,.4311],[.4537,.1038,.4305],[.4599,.1061,.4298],[.4661,.1083,.4291],[.4723,.1105,.4283],[.4786,.1128,.4275],[.4848,.115,.4265],[.491,.1172,.4256],[.4973,.1194,.4245],[.5035,.1216,.4234],[.5097,.1238,.4222],[.516,.126,.4209],[.5222,.1281,.4195],[.5284,.1303,.4181],[.5347,.1325,.4167],[.5409,.1347,.4151],[.5472,.1369,.4135],[.5534,.1391,.4118],[.5596,.1413,.4101],[.5659,.1436,.4083],[.5721,.1458,.4064],[.5783,.148,.4044],[.5845,.1503,.4024],[.5907,.1526,.4003],[.5969,.1548,.3981],[.6031,.1572,.3959],[.6093,.1595,.3936],[.6155,.1618,.3912],[.6217,.1642,.3888],[.6278,.1666,.3863],[.634,.169,.3837],[.6401,.1714,.3811],[.6463,.1739,.3784],[.6524,.1764,.3756],[.6585,.179,.3727],[.6645,.1815,.3698],[.6706,.1842,.3669],[.6766,.1868,.3638],[.6827,.1895,.3608],[.6887,.1922,.3576],[.6946,.195,.3544],[.7006,.1979,.3511],[.7065,.2007,.3478],[.7124,.2037,.3444],[.7183,.2066,.3409],[.7241,.2097,.3374],[.7299,.2128,.3339],[.7357,.2159,.3302],[.7414,.2191,.3266],[.7471,.2224,.3229],[.7528,.2257,.3191],[.7584,.2291,.3153],[.764,.2326,.3114],[.7696,.2361,.3075],[.7751,.2397,.3035],[.7805,.2433,.2995],[.7859,.2471,.2955],[.7913,.2509,.2914],[.7966,.2547,.2873],[.8019,.2587,.2831],[.8071,.2627,.2789],[.8122,.2668,.2747],[.8173,.271,.2704],[.8224,.2752,.2661],[.8274,.2795,.2618],[.8323,.2839,.2574],[.8372,.2884,.253],[.842,.2929,.2486],[.8467,.2976,.2441],[.8514,.3023,.2396],[.856,.307,.2351],[.8605,.3119,.2306],[.865,.3168,.2261],[.8694,.3218,.2215],[.8737,.3269,.2169],[.878,.3321,.2123],[.8822,.3373,.2076],[.8863,.3426,.203],[.8903,.348,.1983],[.8943,.3534,.1936],[.8982,.3589,.1889],[.902,.3645,.1841],[.9057,.3701,.1794],[.9094,.3759,.1746],[.913,.3816,.1698],[.9165,.3875,.1649],[.9199,.3934,.1601],[.9232,.3994,.1552],[.9265,.4054,.1503],[.9296,.4115,.1454],[.9327,.4176,.1404],[.9357,.4238,.1354],[.9387,.4301,.1304],[.9415,.4364,.1254],[.9443,.4428,.1204],[.947,.4492,.1153],[.9496,.4557,.1102],[.9521,.4622,.105],[.9545,.4687,.0999],[.9569,.4754,.0947],[.9591,.482,.0895],[.9613,.4887,.0843],[.9634,.4955,.0791],[.9654,.5022,.0739],[.9673,.5091,.0687],[.9692,.5159,.0635],[.9709,.5229,.0584],[.9726,.5298,.0533],[.9742,.5368,.0484],[.9757,.5438,.0436],[.9771,.5508,.039],[.9784,.5579,.0349],[.9797,.5651,.0314],[.9808,.5722,.0285],[.9819,.5794,.0262],[.9829,.5866,.0247],[.9838,.5938,.0238],[.9846,.6011,.0236],[.9853,.6084,.0242],[.986,.6158,.0256],[.9865,.6231,.0278],[.987,.6305,.0309],[.9873,.6379,.0349],[.9876,.6453,.0399],[.9878,.6528,.0456],[.9879,.6602,.0518],[.9879,.6677,.0583],[.9879,.6753,.0653],[.9877,.6828,.0725],[.9875,.6904,.08],[.9871,.6979,.0877],[.9867,.7055,.0957],[.9862,.7132,.1039],[.9856,.7208,.1122],[.9849,.7284,.1208],[.9841,.7361,.1295],[.9832,.7438,.1385],[.9822,.7514,.1476],[.9812,.7591,.1569],[.98,.7668,.1664],[.9788,.7745,.176],[.9775,.7823,.1859],[.9761,.79,.196],[.9746,.7977,.2063],[.9731,.8054,.2169],[.9715,.8131,.2277],[.9698,.8208,.2387],[.968,.8285,.25],[.9662,.8362,.2615],[.9644,.8438,.2734],[.9625,.8515,.2855],[.9606,.8591,.298],[.9587,.8666,.3108],[.9568,.8741,.324],[.955,.8816,.3375],[.9532,.8889,.3514],[.9515,.8962,.3656],[.95,.9034,.3803],[.9487,.9105,.3953],[.9476,.9174,.4107],[.9468,.9242,.4264],[.9464,.9308,.4424],[.9464,.9372,.4586],[.9469,.9433,.475],[.9479,.9493,.4914],[.9495,.9551,.5079],[.9517,.9606,.5242],[.9545,.9659,.5404],[.9579,.971,.5563],[.9618,.9759,.5719],[.9662,.9807,.5872],[.9712,.9853,.6022],[.9765,.9898,.6168],[.9823,.9941,.631],[.9884,.9984,.6449]]},jet:{interpolate:!0,colors:[[0,0,.5],[0,0,.5178],[0,0,.5357],[0,0,.5535],[0,0,.5713],[0,0,.5891],[0,0,.607],[0,0,.6248],[0,0,.6426],[0,0,.6604],[0,0,.6783],[0,0,.6961],[0,0,.7139],[0,0,.7317],[0,0,.7496],[0,0,.7674],[0,0,.7852],[0,0,.803],[0,0,.8209],[0,0,.8387],[0,0,.8565],[0,0,.8743],[0,0,.8922],[0,0,.91],[0,0,.9278],[0,0,.9456],[0,0,.9635],[0,0,.9813],[0,0,.9991],[0,0,1],[0,0,1],[0,0,1],[0,.002,1],[0,.0176,1],[0,.0333,1],[0,.049,1],[0,.0647,1],[0,.0804,1],[0,.0961,1],[0,.1118,1],[0,.1275,1],[0,.1431,1],[0,.1588,1],[0,.1745,1],[0,.1902,1],[0,.2059,1],[0,.2216,1],[0,.2373,1],[0,.2529,1],[0,.2686,1],[0,.2843,1],[0,.3,1],[0,.3157,1],[0,.3314,1],[0,.3471,1],[0,.3627,1],[0,.3784,1],[0,.3941,1],[0,.4098,1],[0,.4255,1],[0,.4412,1],[0,.4569,1],[0,.4725,1],[0,.4882,1],[0,.5039,1],[0,.5196,1],[0,.5353,1],[0,.551,1],[0,.5667,1],[0,.5824,1],[0,.598,1],[0,.6137,1],[0,.6294,1],[0,.6451,1],[0,.6608,1],[0,.6765,1],[0,.6922,1],[0,.7078,1],[0,.7235,1],[0,.7392,1],[0,.7549,1],[0,.7706,1],[0,.7863,1],[0,.802,1],[0,.8176,1],[0,.8333,1],[0,.849,1],[0,.8647,.9962],[0,.8804,.9836],[0,.8961,.9709],[.0095,.9118,.9583],[.0221,.9275,.9456],[.0348,.9431,.933],[.0474,.9588,.9203],[.0601,.9745,.9077],[.0727,.9902,.895],[.0854,1,.8824],[.098,1,.8697],[.1107,1,.8571],[.1233,1,.8444],[.136,1,.8318],[.1486,1,.8191],[.1613,1,.8065],[.1739,1,.7938],[.1866,1,.7812],[.1992,1,.7685],[.2119,1,.7559],[.2245,1,.7432],[.2372,1,.7306],[.2498,1,.7179],[.2625,1,.7052],[.2751,1,.6926],[.2878,1,.6799],[.3004,1,.6673],[.3131,1,.6546],[.3257,1,.642],[.3384,1,.6293],[.351,1,.6167],[.3637,1,.604],[.3763,1,.5914],[.389,1,.5787],[.4016,1,.5661],[.4143,1,.5534],[.4269,1,.5408],[.4396,1,.5281],[.4522,1,.5155],[.4649,1,.5028],[.4775,1,.4902],[.4902,1,.4775],[.5028,1,.4649],[.5155,1,.4522],[.5281,1,.4396],[.5408,1,.4269],[.5534,1,.4143],[.5661,1,.4016],[.5787,1,.389],[.5914,1,.3763],[.604,1,.3637],[.6167,1,.351],[.6293,1,.3384],[.642,1,.3257],[.6546,1,.3131],[.6673,1,.3004],[.6799,1,.2878],[.6926,1,.2751],[.7052,1,.2625],[.7179,1,.2498],[.7306,1,.2372],[.7432,1,.2245],[.7559,1,.2119],[.7685,1,.1992],[.7812,1,.1866],[.7938,1,.1739],[.8065,1,.1613],[.8191,1,.1486],[.8318,1,.136],[.8444,1,.1233],[.8571,1,.1107],[.8697,1,.098],[.8824,1,.0854],[.895,1,.0727],[.9077,1,.0601],[.9203,1,.0474],[.933,1,.0348],[.9456,.9884,.0221],[.9583,.9739,.0095],[.9709,.9593,0],[.9836,.9448,0],[.9962,.9303,0],[1,.9158,0],[1,.9012,0],[1,.8867,0],[1,.8722,0],[1,.8577,0],[1,.8431,0],[1,.8286,0],[1,.8141,0],[1,.7996,0],[1,.785,0],[1,.7705,0],[1,.756,0],[1,.7415,0],[1,.7269,0],[1,.7124,0],[1,.6979,0],[1,.6834,0],[1,.6688,0],[1,.6543,0],[1,.6398,0],[1,.6253,0],[1,.6107,0],[1,.5962,0],[1,.5817,0],[1,.5672,0],[1,.5527,0],[1,.5381,0],[1,.5236,0],[1,.5091,0],[1,.4946,0],[1,.48,0],[1,.4655,0],[1,.451,0],[1,.4365,0],[1,.4219,0],[1,.4074,0],[1,.3929,0],[1,.3784,0],[1,.3638,0],[1,.3493,0],[1,.3348,0],[1,.3203,0],[1,.3057,0],[1,.2912,0],[1,.2767,0],[1,.2622,0],[1,.2476,0],[1,.2331,0],[1,.2186,0],[1,.2041,0],[1,.1895,0],[1,.175,0],[1,.1605,0],[1,.146,0],[1,.1314,0],[1,.1169,0],[1,.1024,0],[1,.0879,0],[.9991,.0733,0],[.9813,.0588,0],[.9635,.0443,0],[.9456,.0298,0],[.9278,.0153,0],[.91,7e-4,0],[.8922,0,0],[.8743,0,0],[.8565,0,0],[.8387,0,0],[.8209,0,0],[.803,0,0],[.7852,0,0],[.7674,0,0],[.7496,0,0],[.7317,0,0],[.7139,0,0],[.6961,0,0],[.6783,0,0],[.6604,0,0],[.6426,0,0],[.6248,0,0],[.607,0,0],[.5891,0,0],[.5713,0,0],[.5535,0,0],[.5357,0,0],[.5178,0,0],[.5,0,0]]},magma:{interpolate:!0,colors:[[.0015,5e-4,.0139],[.0023,.0013,.0183],[.0033,.0023,.0237],[.0045,.0035,.03],[.006,.0048,.0371],[.0076,.0064,.045],[.0094,.008,.0528],[.0115,.0098,.0608],[.0137,.0118,.0687],[.0162,.0138,.0766],[.0188,.016,.0846],[.0217,.0183,.0926],[.0248,.0207,.1007],[.0281,.0232,.1088],[.0317,.0258,.117],[.0355,.0284,.1252],[.0396,.0311,.1335],[.0438,.0338,.1419],[.0481,.0366,.1503],[.0523,.0394,.1588],[.0566,.0422,.1674],[.0609,.0448,.1761],[.0653,.0473,.1849],[.0698,.0497,.1937],[.0743,.052,.2027],[.0788,.0542,.2117],[.0834,.0562,.2208],[.0882,.0581,.2299],[.0929,.0599,.2392],[.0978,.0615,.2485],[.1028,.063,.2579],[.1079,.0643,.2673],[.1131,.0655,.2768],[.1184,.0665,.2863],[.1238,.0673,.2959],[.1294,.0679,.3054],[.1351,.0684,.315],[.1409,.0687,.3245],[.1468,.0687,.334],[.1528,.0686,.3434],[.159,.0684,.3527],[.1653,.0679,.3618],[.1717,.0673,.3708],[.1782,.0666,.3795],[.1848,.0657,.388],[.1915,.0648,.3962],[.1982,.0639,.404],[.2049,.0629,.4115],[.2117,.062,.4186],[.2185,.0612,.4254],[.2253,.0604,.4317],[.2321,.0599,.4377],[.2388,.0595,.4433],[.2455,.0594,.4484],[.2522,.0594,.4532],[.2589,.0597,.4577],[.2654,.0602,.4618],[.272,.061,.4657],[.2785,.062,.4692],[.285,.0632,.4725],[.2914,.0646,.4755],[.2977,.0661,.4782],[.3041,.0678,.4808],[.3104,.0697,.4832],[.3167,.0717,.4854],[.3229,.0738,.4874],[.3291,.076,.4893],[.3353,.0782,.491],[.3415,.0806,.4926],[.3476,.0829,.4941],[.3538,.0854,.4955],[.3599,.0878,.4968],[.366,.0903,.498],[.3721,.0928,.4991],[.3782,.0953,.5001],[.3843,.0979,.501],[.3904,.1004,.5019],[.3965,.1029,.5027],[.4025,.1054,.5034],[.4086,.1079,.5041],[.4147,.1104,.5047],[.4208,.1129,.5052],[.4269,.1154,.5057],[.433,.1179,.5062],[.4391,.1203,.5066],[.4452,.1227,.5069],[.4513,.1251,.5072],[.4574,.1275,.5074],[.4635,.1299,.5077],[.4696,.1322,.5078],[.4758,.1346,.5079],[.4819,.1369,.508],[.4881,.1392,.508],[.4943,.1415,.508],[.5004,.1437,.5079],[.5066,.146,.5078],[.5128,.1482,.5076],[.519,.1504,.5074],[.5253,.1526,.5072],[.5315,.1547,.5069],[.5378,.1569,.5066],[.544,.159,.5062],[.5503,.1612,.5057],[.5566,.1633,.5052],[.5629,.1654,.5047],[.5692,.1675,.5041],[.5755,.1695,.5035],[.5818,.1716,.5028],[.5882,.1737,.502],[.5945,.1757,.5012],[.6009,.1777,.5004],[.6072,.1798,.4995],[.6136,.1818,.4985],[.62,.1838,.4975],[.6264,.1859,.4965],[.6328,.1879,.4953],[.6392,.1899,.4942],[.6456,.192,.4929],[.6521,.194,.4916],[.6585,.196,.4903],[.6649,.1981,.4888],[.6713,.2001,.4874],[.6778,.2022,.4858],[.6842,.2043,.4842],[.6907,.2064,.4826],[.6971,.2085,.4808],[.7035,.2106,.479],[.71,.2128,.4772],[.7164,.215,.4753],[.7228,.2172,.4733],[.7292,.2194,.4713],[.7356,.2217,.4692],[.742,.224,.467],[.7484,.2264,.4648],[.7547,.2288,.4625],[.7611,.2312,.4602],[.7674,.2337,.4578],[.7737,.2362,.4553],[.78,.2389,.4528],[.7862,.2415,.4502],[.7924,.2442,.4475],[.7986,.247,.4448],[.8048,.2499,.4421],[.8109,.2529,.4393],[.8169,.2559,.4365],[.8229,.259,.4336],[.8289,.2622,.4306],[.8348,.2655,.4277],[.8406,.269,.4247],[.8464,.2725,.4216],[.8521,.2761,.4186],[.8578,.2799,.4155],[.8633,.2837,.4124],[.8688,.2877,.4093],[.8742,.2919,.4062],[.8795,.2961,.4031],[.8847,.3005,.4],[.8897,.3051,.397],[.8947,.3098,.394],[.8996,.3146,.391],[.9043,.3196,.3881],[.9089,.3248,.3853],[.9134,.3301,.3826],[.9177,.3355,.3799],[.9219,.3411,.3774],[.9259,.3468,.375],[.9298,.3527,.3727],[.9336,.3588,.3705],[.9372,.3649,.3686],[.9407,.3712,.3668],[.944,.3776,.3651],[.9472,.3842,.3637],[.9502,.3908,.3625],[.9531,.3976,.3614],[.9558,.4044,.3606],[.9585,.4113,.36],[.9609,.4183,.3596],[.9633,.4254,.3595],[.9655,.4325,.3595],[.9677,.4397,.3598],[.9697,.4469,.3603],[.9716,.4542,.361],[.9734,.4615,.362],[.9751,.4689,.3631],[.9767,.4762,.3645],[.9782,.4836,.366],[.9796,.491,.3678],[.981,.4984,.3697],[.9823,.5059,.3719],[.9835,.5133,.3742],[.9846,.5207,.3767],[.9857,.5281,.3794],[.9867,.5356,.3822],[.9876,.543,.3852],[.9885,.5504,.3884],[.9894,.5579,.3917],[.9901,.5653,.3951],[.9909,.5727,.3987],[.9916,.5801,.4024],[.9922,.5875,.4063],[.9928,.5949,.4103],[.9933,.6023,.4144],[.9938,.6096,.4186],[.9943,.617,.423],[.9947,.6244,.4274],[.9951,.6317,.432],[.9955,.639,.4366],[.9958,.6463,.4414],[.9961,.6537,.4462],[.9963,.661,.4512],[.9966,.6683,.4562],[.9968,.6755,.4613],[.9969,.6828,.4665],[.9971,.6901,.4718],[.9972,.6973,.4772],[.9973,.7046,.4826],[.9973,.7118,.4882],[.9974,.7191,.4938],[.9974,.7263,.4994],[.9973,.7335,.5052],[.9973,.7408,.511],[.9972,.748,.5169],[.9971,.7552,.5228],[.997,.7624,.5288],[.9969,.7696,.5349],[.9967,.7768,.541],[.9966,.784,.5472],[.9964,.7912,.5535],[.9962,.7983,.5598],[.9959,.8055,.5662],[.9957,.8127,.5726],[.9954,.8199,.5791],[.9951,.8271,.5857],[.9949,.8342,.5923],[.9945,.8414,.599],[.9942,.8485,.6057],[.9939,.8557,.6125],[.9935,.8629,.6193],[.9932,.87,.6262],[.9928,.8772,.6331],[.9924,.8843,.6401],[.9921,.8915,.6471],[.9917,.8986,.6542],[.9913,.9058,.6613],[.9909,.9129,.6685],[.9906,.92,.6757],[.9902,.9272,.6829],[.9898,.9343,.6902],[.9894,.9415,.6975],[.9891,.9486,.7049],[.9887,.9557,.7122],[.9884,.9629,.7196],[.988,.97,.7271],[.9877,.9772,.7345],[.9874,.9843,.742],[.9871,.9914,.7495]]},nipy_spectral:{interpolate:!0,colors:[[0,0,0],[.0366,0,.0418],[.0732,0,.0837],[.1098,0,.1255],[.1464,0,.1673],[.183,0,.2091],[.2196,0,.251],[.2562,0,.2928],[.2928,0,.3346],[.3294,0,.3764],[.366,0,.4183],[.4026,0,.4601],[.4392,0,.5019],[.468,0,.5346],[.4732,0,.5398],[.4785,0,.5451],[.4837,0,.5503],[.4889,0,.5555],[.4941,0,.5608],[.4993,0,.566],[.5046,0,.5712],[.5098,0,.5765],[.515,0,.5817],[.5202,0,.5869],[.5255,0,.5922],[.5307,0,.5974],[.5124,0,.6026],[.4706,0,.6078],[.4287,0,.6131],[.3869,0,.6183],[.3451,0,.6235],[.3032,0,.6288],[.2614,0,.634],[.2196,0,.6392],[.1778,0,.6445],[.1359,0,.6497],[.0941,0,.6549],[.0523,0,.6602],[.0105,0,.6654],[0,0,.6785],[0,0,.6942],[0,0,.7098],[0,0,.7255],[0,0,.7412],[0,0,.7569],[0,0,.7726],[0,0,.7883],[0,0,.804],[0,0,.8196],[0,0,.8353],[0,0,.851],[0,0,.8667],[0,.0366,.8667],[0,.0732,.8667],[0,.1098,.8667],[0,.1464,.8667],[0,.183,.8667],[0,.2196,.8667],[0,.2562,.8667],[0,.2928,.8667],[0,.3294,.8667],[0,.366,.8667],[0,.4026,.8667],[0,.4392,.8667],[0,.4693,.8667],[0,.4798,.8667],[0,.4902,.8667],[0,.5007,.8667],[0,.5111,.8667],[0,.5216,.8667],[0,.532,.8667],[0,.5425,.8667],[0,.553,.8667],[0,.5634,.8667],[0,.5739,.8667],[0,.5843,.8667],[0,.5948,.8667],[0,.6026,.8589],[0,.6078,.8432],[0,.6131,.8275],[0,.6183,.8118],[0,.6235,.7961],[0,.6288,.7804],[0,.634,.7647],[0,.6392,.7491],[0,.6445,.7334],[0,.6497,.7177],[0,.6549,.702],[0,.6602,.6863],[0,.6654,.6706],[0,.6667,.6589],[0,.6667,.6484],[0,.6667,.6379],[0,.6667,.6275],[0,.6667,.617],[0,.6667,.6065],[0,.6667,.5961],[0,.6667,.5856],[0,.6667,.5752],[0,.6667,.5647],[0,.6667,.5542],[0,.6667,.5438],[0,.6667,.5333],[0,.6615,.4915],[0,.6562,.4496],[0,.651,.4078],[0,.6458,.366],[0,.6405,.3242],[0,.6353,.2823],[0,.6301,.2405],[0,.6248,.1987],[0,.6196,.1569],[0,.6144,.115],[0,.6092,.0732],[0,.6039,.0314],[0,.6026,0],[0,.6131,0],[0,.6235,0],[0,.634,0],[0,.6444,0],[0,.6549,0],[0,.6653,0],[0,.6758,0],[0,.6863,0],[0,.6967,0],[0,.7072,0],[0,.7176,0],[0,.7281,0],[0,.7385,0],[0,.749,0],[0,.7595,0],[0,.7699,0],[0,.7804,0],[0,.7908,0],[0,.8013,0],[0,.8118,0],[0,.8222,0],[0,.8327,0],[0,.8432,0],[0,.8536,0],[0,.8641,0],[0,.8745,0],[0,.885,0],[0,.8955,0],[0,.9059,0],[0,.9164,0],[0,.9268,0],[0,.9373,0],[0,.9477,0],[0,.9582,0],[0,.9686,0],[0,.9791,0],[0,.9895,0],[0,1,0],[.0575,1,0],[.115,1,0],[.1725,1,0],[.2301,1,0],[.2876,1,0],[.3451,1,0],[.4026,1,0],[.4601,1,0],[.5176,1,0],[.5751,1,0],[.6327,1,0],[.6902,1,0],[.7372,.9987,0],[.7529,.9935,0],[.7686,.9882,0],[.7843,.983,0],[.8,.9778,0],[.8157,.9725,0],[.8313,.9673,0],[.847,.9621,0],[.8627,.9568,0],[.8784,.9516,0],[.8941,.9464,0],[.9098,.9411,0],[.9255,.9359,0],[.9359,.9281,0],[.9411,.9176,0],[.9464,.9072,0],[.9516,.8967,0],[.9568,.8863,0],[.9621,.8758,0],[.9673,.8653,0],[.9725,.8549,0],[.9778,.8444,0],[.983,.834,0],[.9882,.8235,0],[.9935,.8131,0],[.9987,.8026,0],[1,.7882,0],[1,.7725,0],[1,.7569,0],[1,.7412,0],[1,.7255,0],[1,.7098,0],[1,.6941,0],[1,.6784,0],[1,.6627,0],[1,.6471,0],[1,.6314,0],[1,.6157,0],[1,.6,0],[1,.5529,0],[1,.5059,0],[1,.4588,0],[1,.4118,0],[1,.3647,0],[1,.3176,0],[1,.2706,0],[1,.2235,0],[1,.1765,0],[1,.1294,0],[1,.0824,0],[1,.0353,0],[.9974,0,0],[.9869,0,0],[.9765,0,0],[.966,0,0],[.9556,0,0],[.9451,0,0],[.9347,0,0],[.9242,0,0],[.9137,0,0],[.9033,0,0],[.8928,0,0],[.8824,0,0],[.8719,0,0],[.8641,0,0],[.8589,0,0],[.8536,0,0],[.8484,0,0],[.8432,0,0],[.8379,0,0],[.8327,0,0],[.8275,0,0],[.8222,0,0],[.817,0,0],[.8118,0,0],[.8065,0,0],[.8013,0,0],[.8,.0471,.0471],[.8,.1098,.1098],[.8,.1725,.1725],[.8,.2353,.2353],[.8,.298,.298],[.8,.3608,.3608],[.8,.4235,.4235],[.8,.4863,.4863],[.8,.549,.549],[.8,.6118,.6118],[.8,.6745,.6745],[.8,.7373,.7373],[.8,.8,.8]]},ocean:{interpolate:!0,colors:[[0,.5,0],[0,.4941,.0039],[0,.4882,.0078],[0,.4824,.0118],[0,.4765,.0157],[0,.4706,.0196],[0,.4647,.0235],[0,.4588,.0275],[0,.4529,.0314],[0,.4471,.0353],[0,.4412,.0392],[0,.4353,.0431],[0,.4294,.0471],[0,.4235,.051],[0,.4176,.0549],[0,.4118,.0588],[0,.4059,.0627],[0,.4,.0667],[0,.3941,.0706],[0,.3882,.0745],[0,.3824,.0784],[0,.3765,.0824],[0,.3706,.0863],[0,.3647,.0902],[0,.3588,.0941],[0,.3529,.098],[0,.3471,.102],[0,.3412,.1059],[0,.3353,.1098],[0,.3294,.1137],[0,.3235,.1176],[0,.3176,.1216],[0,.3118,.1255],[0,.3059,.1294],[0,.3,.1333],[0,.2941,.1373],[0,.2882,.1412],[0,.2824,.1451],[0,.2765,.149],[0,.2706,.1529],[0,.2647,.1569],[0,.2588,.1608],[0,.2529,.1647],[0,.2471,.1686],[0,.2412,.1725],[0,.2353,.1765],[0,.2294,.1804],[0,.2235,.1843],[0,.2176,.1882],[0,.2118,.1922],[0,.2059,.1961],[0,.2,.2],[0,.1941,.2039],[0,.1882,.2078],[0,.1824,.2118],[0,.1765,.2157],[0,.1706,.2196],[0,.1647,.2235],[0,.1588,.2275],[0,.1529,.2314],[0,.1471,.2353],[0,.1412,.2392],[0,.1353,.2431],[0,.1294,.2471],[0,.1235,.251],[0,.1176,.2549],[0,.1118,.2588],[0,.1059,.2627],[0,.1,.2667],[0,.0941,.2706],[0,.0882,.2745],[0,.0824,.2784],[0,.0765,.2824],[0,.0706,.2863],[0,.0647,.2902],[0,.0588,.2941],[0,.0529,.298],[0,.0471,.302],[0,.0412,.3059],[0,.0353,.3098],[0,.0294,.3137],[0,.0235,.3176],[0,.0176,.3216],[0,.0118,.3255],[0,.0059,.3294],[0,0,.3333],[0,.0059,.3373],[0,.0118,.3412],[0,.0176,.3451],[0,.0235,.349],[0,.0294,.3529],[0,.0353,.3569],[0,.0412,.3608],[0,.0471,.3647],[0,.0529,.3686],[0,.0588,.3725],[0,.0647,.3765],[0,.0706,.3804],[0,.0765,.3843],[0,.0824,.3882],[0,.0882,.3922],[0,.0941,.3961],[0,.1,.4],[0,.1059,.4039],[0,.1118,.4078],[0,.1176,.4118],[0,.1235,.4157],[0,.1294,.4196],[0,.1353,.4235],[0,.1412,.4275],[0,.1471,.4314],[0,.1529,.4353],[0,.1588,.4392],[0,.1647,.4431],[0,.1706,.4471],[0,.1765,.451],[0,.1824,.4549],[0,.1882,.4588],[0,.1941,.4627],[0,.2,.4667],[0,.2059,.4706],[0,.2118,.4745],[0,.2176,.4784],[0,.2235,.4824],[0,.2294,.4863],[0,.2353,.4902],[0,.2412,.4941],[0,.2471,.498],[0,.2529,.502],[0,.2588,.5059],[0,.2647,.5098],[0,.2706,.5137],[0,.2765,.5176],[0,.2824,.5216],[0,.2882,.5255],[0,.2941,.5294],[0,.3,.5333],[0,.3059,.5373],[0,.3118,.5412],[0,.3176,.5451],[0,.3235,.549],[0,.3294,.5529],[0,.3353,.5569],[0,.3412,.5608],[0,.3471,.5647],[0,.3529,.5686],[0,.3588,.5725],[0,.3647,.5765],[0,.3706,.5804],[0,.3765,.5843],[0,.3824,.5882],[0,.3882,.5922],[0,.3941,.5961],[0,.4,.6],[0,.4059,.6039],[0,.4118,.6078],[0,.4176,.6118],[0,.4235,.6157],[0,.4294,.6196],[0,.4353,.6235],[0,.4412,.6275],[0,.4471,.6314],[0,.4529,.6353],[0,.4588,.6392],[0,.4647,.6431],[0,.4706,.6471],[0,.4765,.651],[0,.4824,.6549],[0,.4882,.6588],[0,.4941,.6627],[0,.5,.6667],[.0118,.5059,.6706],[.0235,.5118,.6745],[.0353,.5176,.6784],[.0471,.5235,.6824],[.0588,.5294,.6863],[.0706,.5353,.6902],[.0824,.5412,.6941],[.0941,.5471,.698],[.1059,.5529,.702],[.1176,.5588,.7059],[.1294,.5647,.7098],[.1412,.5706,.7137],[.1529,.5765,.7176],[.1647,.5824,.7216],[.1765,.5882,.7255],[.1882,.5941,.7294],[.2,.6,.7333],[.2118,.6059,.7373],[.2235,.6118,.7412],[.2353,.6176,.7451],[.2471,.6235,.749],[.2588,.6294,.7529],[.2706,.6353,.7569],[.2824,.6412,.7608],[.2941,.6471,.7647],[.3059,.6529,.7686],[.3176,.6588,.7725],[.3294,.6647,.7765],[.3412,.6706,.7804],[.3529,.6765,.7843],[.3647,.6824,.7882],[.3765,.6882,.7922],[.3882,.6941,.7961],[.4,.7,.8],[.4118,.7059,.8039],[.4235,.7118,.8078],[.4353,.7176,.8118],[.4471,.7235,.8157],[.4588,.7294,.8196],[.4706,.7353,.8235],[.4824,.7412,.8275],[.4941,.7471,.8314],[.5059,.7529,.8353],[.5176,.7588,.8392],[.5294,.7647,.8431],[.5412,.7706,.8471],[.5529,.7765,.851],[.5647,.7824,.8549],[.5765,.7882,.8588],[.5882,.7941,.8627],[.6,.8,.8667],[.6118,.8059,.8706],[.6235,.8118,.8745],[.6353,.8176,.8784],[.6471,.8235,.8824],[.6588,.8294,.8863],[.6706,.8353,.8902],[.6824,.8412,.8941],[.6941,.8471,.898],[.7059,.8529,.902],[.7176,.8588,.9059],[.7294,.8647,.9098],[.7412,.8706,.9137],[.7529,.8765,.9176],[.7647,.8824,.9216],[.7765,.8882,.9255],[.7882,.8941,.9294],[.8,.9,.9333],[.8118,.9059,.9373],[.8235,.9118,.9412],[.8353,.9176,.9451],[.8471,.9235,.949],[.8588,.9294,.9529],[.8706,.9353,.9569],[.8824,.9412,.9608],[.8941,.9471,.9647],[.9059,.9529,.9686],[.9176,.9588,.9725],[.9294,.9647,.9765],[.9412,.9706,.9804],[.9529,.9765,.9843],[.9647,.9824,.9882],[.9765,.9882,.9922],[.9882,.9941,.9961],[1,1,1]]},pink:{interpolate:!0,colors:[[.1178,0,0],[.1371,.0254,.0254],[.1564,.0508,.0508],[.1757,.0762,.0762],[.1949,.1017,.1017],[.2088,.1129,.1129],[.2223,.1234,.1234],[.2358,.1339,.1339],[.2494,.1445,.1445],[.2607,.1528,.1528],[.2717,.1609,.1609],[.2828,.1689,.1689],[.2939,.177,.177],[.3037,.184,.184],[.3133,.1908,.1908],[.3229,.1976,.1976],[.3325,.2044,.2044],[.3413,.2106,.2106],[.3499,.2166,.2166],[.3585,.2226,.2226],[.3671,.2286,.2286],[.3751,.2342,.2342],[.3829,.2396,.2396],[.3908,.245,.245],[.3986,.2504,.2504],[.4061,.2555,.2555],[.4134,.2605,.2605],[.4206,.2655,.2655],[.4279,.2705,.2705],[.4349,.2753,.2753],[.4417,.2799,.2799],[.4485,.2845,.2845],[.4553,.2892,.2892],[.4619,.2937,.2937],[.4683,.298,.298],[.4747,.3024,.3024],[.4811,.3067,.3067],[.4873,.311,.311],[.4934,.3151,.3151],[.4995,.3192,.3192],[.5056,.3233,.3233],[.5116,.3274,.3274],[.5174,.3313,.3313],[.5232,.3352,.3352],[.529,.3391,.3391],[.5347,.343,.343],[.5403,.3467,.3467],[.5458,.3505,.3505],[.5514,.3542,.3542],[.5569,.3579,.3579],[.5622,.3615,.3615],[.5675,.3651,.3651],[.5729,.3687,.3687],[.5782,.3722,.3722],[.5833,.3757,.3757],[.5885,.3791,.3791],[.5936,.3826,.3826],[.5987,.386,.386],[.6037,.3894,.3894],[.6087,.3927,.3927],[.6137,.396,.396],[.6186,.3993,.3993],[.6234,.4026,.4026],[.6282,.4058,.4058],[.6331,.409,.409],[.6378,.4122,.4122],[.6425,.4153,.4153],[.6472,.4185,.4185],[.6519,.4216,.4216],[.6565,.4247,.4247],[.6611,.4278,.4278],[.6656,.4308,.4308],[.6702,.4338,.4338],[.6747,.4369,.4369],[.6791,.4398,.4398],[.6836,.4428,.4428],[.688,.4457,.4457],[.6924,.4487,.4487],[.6967,.4515,.4515],[.701,.4544,.4544],[.7053,.4573,.4573],[.7096,.4602,.4602],[.7139,.463,.463],[.7181,.4658,.4658],[.7223,.4686,.4686],[.7265,.4714,.4714],[.7306,.4741,.4741],[.7347,.4769,.4769],[.7388,.4796,.4796],[.7429,.4824,.4824],[.747,.485,.485],[.751,.4877,.4877],[.755,.4904,.4904],[.759,.4931,.4931],[.761,.4988,.4957],[.7627,.5047,.4983],[.7644,.5107,.501],[.7661,.5167,.5036],[.7678,.5224,.5062],[.7695,.5282,.5087],[.7712,.5339,.5113],[.7729,.5396,.5139],[.7746,.5451,.5164],[.7763,.5506,.5189],[.778,.5561,.5214],[.7796,.5615,.5239],[.7813,.5669,.5264],[.783,.5721,.5289],[.7847,.5774,.5313],[.7863,.5827,.5338],[.788,.5878,.5363],[.7896,.5929,.5387],[.7913,.598,.5411],[.7929,.6031,.5435],[.7946,.608,.5459],[.7962,.613,.5483],[.7979,.6179,.5507],[.7995,.6228,.5531],[.8011,.6276,.5554],[.8028,.6324,.5578],[.8044,.6372,.5601],[.806,.6419,.5624],[.8076,.6466,.5648],[.8093,.6512,.5671],[.8109,.6559,.5694],[.8125,.6605,.5717],[.8141,.665,.5739],[.8157,.6695,.5762],[.8173,.674,.5785],[.8189,.6785,.5807],[.8205,.683,.583],[.8221,.6874,.5852],[.8237,.6918,.5874],[.8253,.6961,.5897],[.8268,.7005,.5919],[.8284,.7047,.5941],[.83,.709,.5963],[.8316,.7133,.5985],[.8331,.7175,.6006],[.8347,.7217,.6028],[.8363,.7259,.605],[.8378,.73,.6071],[.8394,.7342,.6093],[.8409,.7383,.6114],[.8425,.7423,.6136],[.844,.7464,.6157],[.8456,.7505,.6178],[.8471,.7545,.6199],[.8487,.7585,.622],[.8502,.7625,.6241],[.8518,.7664,.6262],[.8533,.7703,.6283],[.8548,.7742,.6304],[.8563,.7781,.6324],[.8579,.782,.6345],[.8594,.7859,.6366],[.8609,.7897,.6386],[.8624,.7935,.6407],[.8639,.7974,.6427],[.8655,.8011,.6447],[.867,.8049,.6467],[.8685,.8086,.6488],[.87,.8124,.6508],[.8715,.8161,.6528],[.873,.8198,.6548],[.8745,.8234,.6568],[.876,.8271,.6588],[.8775,.8308,.6607],[.8789,.8344,.6627],[.8804,.838,.6647],[.8819,.8416,.6667],[.8834,.8452,.6686],[.8849,.8487,.6706],[.8863,.8523,.6725],[.8878,.8559,.6745],[.8893,.8594,.6764],[.8908,.8629,.6783],[.8922,.8664,.6802],[.8937,.8699,.6822],[.8952,.8733,.6841],[.8966,.8768,.686],[.8981,.8802,.6879],[.8995,.8837,.6898],[.901,.8871,.6917],[.9024,.8905,.6936],[.9039,.8939,.6954],[.9053,.8972,.6973],[.9068,.9006,.6992],[.9082,.9039,.7011],[.9096,.9073,.7029],[.9111,.9106,.7048],[.9125,.9125,.7094],[.9139,.9139,.7148],[.9154,.9154,.7202],[.9168,.9168,.7256],[.9182,.9182,.7309],[.9196,.9196,.7362],[.9211,.9211,.7414],[.9225,.9225,.7467],[.9239,.9239,.7519],[.9253,.9253,.757],[.9267,.9267,.7621],[.9281,.9281,.7672],[.9295,.9295,.7722],[.9309,.9309,.7772],[.9323,.9323,.7822],[.9338,.9338,.7872],[.9352,.9352,.7921],[.9365,.9365,.7969],[.9379,.9379,.8018],[.9393,.9393,.8067],[.9407,.9407,.8115],[.9421,.9421,.8162],[.9435,.9435,.8209],[.9449,.9449,.8257],[.9463,.9463,.8304],[.9476,.9476,.835],[.949,.949,.8396],[.9504,.9504,.8443],[.9518,.9518,.8489],[.9531,.9531,.8534],[.9545,.9545,.8579],[.9559,.9559,.8625],[.9573,.9573,.867],[.9586,.9586,.8714],[.96,.96,.8758],[.9613,.9613,.8803],[.9627,.9627,.8847],[.9641,.9641,.889],[.9654,.9654,.8934],[.9668,.9668,.8977],[.9681,.9681,.9021],[.9695,.9695,.9063],[.9708,.9708,.9106],[.9722,.9722,.9149],[.9735,.9735,.9191],[.9748,.9748,.9233],[.9762,.9762,.9275],[.9775,.9775,.9317],[.9789,.9789,.9358],[.9802,.9802,.94],[.9815,.9815,.9441],[.9829,.9829,.9482],[.9842,.9842,.9523],[.9855,.9855,.9563],[.9868,.9868,.9604],[.9882,.9882,.9644],[.9895,.9895,.9685],[.9908,.9908,.9724],[.9921,.9921,.9764],[.9934,.9934,.9804],[.9948,.9948,.9844],[.9961,.9961,.9883],[.9974,.9974,.9922],[.9987,.9987,.9961],[1,1,1]]},plasma:{interpolate:!0,colors:[[.0504,.0298,.528],[.0635,.0284,.5331],[.0754,.0272,.538],[.0862,.0261,.5427],[.0964,.0252,.5471],[.106,.0243,.5514],[.1151,.0236,.5555],[.1239,.0229,.5594],[.1324,.0223,.5632],[.1406,.0217,.567],[.1486,.0212,.5706],[.1564,.0207,.5741],[.1641,.0202,.5775],[.1716,.0197,.5808],[.179,.0193,.5841],[.1862,.0188,.5872],[.1934,.0184,.5903],[.2004,.0179,.5934],[.2074,.0174,.5963],[.2144,.017,.5992],[.2212,.0165,.6021],[.228,.016,.6049],[.2347,.0155,.6076],[.2414,.015,.6103],[.248,.0144,.6129],[.2546,.0139,.6154],[.2612,.0133,.6179],[.2677,.0127,.6203],[.2742,.0121,.6227],[.2806,.0115,.625],[.2871,.0109,.6273],[.2935,.0102,.6295],[.2999,.0096,.6316],[.3062,.0089,.6337],[.3125,.0082,.6357],[.3189,.0076,.6376],[.3252,.0069,.6395],[.3314,.0063,.6413],[.3377,.0056,.643],[.3439,.005,.6447],[.3502,.0044,.6463],[.3564,.0038,.6478],[.3626,.0032,.6492],[.3687,.0027,.6506],[.3749,.0022,.6519],[.381,.0018,.6531],[.3872,.0014,.6542],[.3933,.0011,.6552],[.3994,9e-4,.6561],[.4055,7e-4,.657],[.4116,6e-4,.6577],[.4176,6e-4,.6584],[.4237,6e-4,.659],[.4297,8e-4,.6594],[.4357,.0011,.6598],[.4417,.0015,.6601],[.4477,.0021,.6602],[.4537,.0028,.6603],[.4596,.0036,.6603],[.4656,.0045,.6601],[.4715,.0057,.6599],[.4773,.007,.6595],[.4832,.0085,.6591],[.4891,.0101,.6585],[.4949,.012,.6579],[.5007,.0141,.6571],[.5065,.0163,.6562],[.5122,.0188,.6552],[.5179,.0216,.6541],[.5236,.0245,.6529],[.5293,.0277,.6516],[.535,.0312,.6502],[.5406,.035,.6486],[.5462,.039,.647],[.5517,.0431,.6453],[.5572,.0473,.6434],[.5627,.0515,.6415],[.5682,.0558,.6395],[.5736,.06,.6373],[.579,.0643,.6351],[.5844,.0686,.6328],[.5897,.0729,.6304],[.595,.0772,.6279],[.6003,.0815,.6253],[.6055,.0859,.6227],[.6107,.0902,.62],[.6158,.0946,.6171],[.6209,.0989,.6143],[.626,.1033,.6113],[.631,.1077,.6083],[.636,.1121,.6052],[.641,.1165,.6021],[.6459,.1209,.5989],[.6507,.1253,.5956],[.6556,.1297,.5923],[.6604,.1341,.589],[.6651,.1386,.5856],[.6698,.143,.5822],[.6745,.1474,.5787],[.6792,.1518,.5752],[.6838,.1563,.5717],[.6883,.1607,.5681],[.6928,.1651,.5645],[.6973,.1696,.5609],[.7018,.174,.5573],[.7062,.1784,.5537],[.7105,.1829,.55],[.7149,.1873,.5463],[.7192,.1917,.5427],[.7234,.1962,.539],[.7277,.2006,.5353],[.7319,.205,.5316],[.736,.2094,.5279],[.7401,.2139,.5242],[.7442,.2183,.5205],[.7483,.2227,.5168],[.7523,.2271,.5131],[.7563,.2316,.5095],[.7603,.236,.5058],[.7642,.2404,.5021],[.7681,.2448,.4985],[.772,.2492,.4948],[.7758,.2537,.4912],[.7796,.2581,.4875],[.7834,.2625,.4839],[.7871,.2669,.4803],[.7909,.2713,.4767],[.7945,.2758,.4731],[.7982,.2802,.4695],[.8019,.2846,.466],[.8055,.2891,.4624],[.8091,.2935,.4589],[.8126,.2979,.4553],[.8161,.3024,.4518],[.8197,.3068,.4483],[.8231,.3113,.4448],[.8266,.3157,.4413],[.83,.3202,.4378],[.8334,.3246,.4344],[.8368,.3291,.4309],[.8402,.3336,.4275],[.8435,.3381,.424],[.8468,.3426,.4206],[.8501,.347,.4172],[.8533,.3516,.4137],[.8565,.3561,.4103],[.8598,.3606,.4069],[.8629,.3651,.4035],[.8661,.3697,.4001],[.8692,.3742,.3967],[.8723,.3788,.3934],[.8754,.3833,.39],[.8784,.3879,.3866],[.8814,.3925,.3832],[.8844,.3971,.3799],[.8874,.4018,.3765],[.8903,.4064,.3731],[.8932,.411,.3698],[.8961,.4157,.3664],[.899,.4204,.363],[.9018,.4251,.3597],[.9046,.4298,.3563],[.9074,.4345,.353],[.9101,.4393,.3496],[.9128,.444,.3463],[.9155,.4488,.3429],[.9181,.4536,.3395],[.9207,.4584,.3362],[.9233,.4633,.3328],[.9258,.4681,.3294],[.9283,.473,.3261],[.9308,.4779,.3227],[.9332,.4828,.3193],[.9356,.4877,.316],[.938,.4927,.3126],[.9403,.4976,.3092],[.9426,.5026,.3058],[.9448,.5077,.3024],[.9471,.5127,.299],[.9492,.5178,.2957],[.9513,.5228,.2923],[.9534,.528,.2889],[.9555,.5331,.2855],[.9575,.5382,.2821],[.9594,.5434,.2787],[.9613,.5486,.2753],[.9632,.5539,.2719],[.965,.5591,.2685],[.9668,.5644,.2651],[.9685,.5697,.2617],[.9702,.575,.2583],[.9718,.5804,.2549],[.9734,.5858,.2515],[.9749,.5912,.2482],[.9764,.5966,.2448],[.9779,.6021,.2414],[.9792,.6075,.238],[.9806,.613,.2346],[.9818,.6186,.2313],[.983,.6241,.2279],[.9842,.6297,.2246],[.9853,.6353,.2213],[.9863,.641,.2179],[.9873,.6466,.2146],[.9883,.6523,.2114],[.9891,.658,.2081],[.9899,.6638,.2049],[.9907,.6696,.2016],[.9914,.6754,.1985],[.992,.6812,.1953],[.9925,.687,.1922],[.993,.6929,.1891],[.9935,.6988,.186],[.9938,.7047,.183],[.9941,.7107,.1801],[.9943,.7167,.1772],[.9945,.7227,.1744],[.9946,.7287,.1716],[.9946,.7348,.1689],[.9945,.7409,.1663],[.9944,.747,.1638],[.9941,.7531,.1614],[.9939,.7593,.1591],[.9935,.7655,.1569],[.993,.7717,.1548],[.9925,.778,.1529],[.9919,.7842,.151],[.9912,.7905,.1494],[.9904,.7969,.1479],[.9896,.8032,.1465],[.9886,.8096,.1454],[.9876,.816,.1444],[.9865,.8224,.1436],[.9853,.8288,.1429],[.984,.8353,.1425],[.9827,.8418,.1423],[.9812,.8483,.1423],[.9796,.8549,.1425],[.978,.8614,.1428],[.9763,.868,.1434],[.9744,.8746,.1441],[.9725,.8812,.1449],[.9705,.8879,.1459],[.9684,.8946,.147],[.9663,.9012,.1482],[.964,.908,.1494],[.9617,.9147,.1505],[.9593,.9214,.1516],[.9568,.9282,.1524],[.9543,.9349,.1529],[.9517,.9417,.1529],[.9492,.9484,.1522],[.9466,.9552,.1503],[.9442,.9619,.1469],[.9419,.9686,.141],[.94,.9752,.1313]]},prism:{interpolate:!0,colors:[[1,0,0],[1,0,0],[1,.1296,0],[1,.3203,0],[1,.5116,0],[1,.6909,0],[1,.8464,0],[1,.9679,0],[.889,1,0],[.6991,1,0],[.5073,1,0],[.3262,.9966,0],[.1678,.887,0],[.0425,.7408,.2247],[0,.5675,.4915],[0,.3785,.7259],[0,.1863,.9124],[0,.0036,1],[.1001,0,1],[.2431,0,1],[.4142,0,.9965],[.6022,0,.845],[.7946,0,.6378],[.9788,0,.3885],[1,0,.1136],[1,0,0],[1,.0561,0],[1,.2429,0],[1,.4354,0],[1,.6211,0],[1,.7875,0],[1,.9237,0],[.9619,1,0],[.7764,1,0],[.5838,1,0],[.3969,1,0],[.228,.9359,0],[.0883,.8034,.1123],[0,.6397,.3872],[0,.4555,.6367],[0,.2631,.8441],[0,.0751,.9959],[.0528,0,1],[.1817,0,1],[.3427,0,1],[.5254,0,.9132],[.7176,0,.7269],[.9066,0,.4927],[1,0,.2261],[1,0,0],[1,0,0],[1,.1664,0],[1,.3582,0],[1,.5481,0],[1,.7236,0],[1,.8732,0],[1,.987,0],[.8525,1,0],[.6612,1,0],[.4705,1,0],[.293,.9784,0],[.1403,.861,0],[.0226,.7086,.2788],[0,.5312,.5406],[0,.3406,.7667],[0,.1493,.9423],[.0121,0,1],[.1255,0,1],[.2748,0,1],[.4501,0,.9717],[.64,0,.8083],[.8318,0,.5917],[1,0,.336],[1,0,.0582],[1,0,0],[1,.0917,0],[1,.2806,0],[1,.4728,0],[1,.6556,0],[1,.8169,0],[1,.9461,0],[.9267,1,0],[.7387,1,0],[.5463,1,0],[.362,1,0],[.198,.9129,0],[.0651,.7735,.1674],[0,.6048,.4387],[0,.418,.6811],[0,.2255,.8786],[0,.0398,1],[.0751,0,1],[.2111,0,1],[.3772,0,1],[.5627,0,.8811],[.7553,0,.6843],[.9422,0,.4425],[1,0,.1714],[1,0,0],[1,.0195,0],[1,.2036,0],[1,.396,0],[1,.5841,0],[1,.7554,0],[1,.8987,0],[.9981,1,0],[.8155,1,0],[.6234,1,0],[.4343,1,0],[.2607,.9585,0],[.1142,.8336,.0542],[.0043,.6754,.3322],[0,.4945,.5883],[0,.3027,.8056],[0,.1128,.9698],[.0311,0,1],[.1522,0,1],[.3075,0,1],[.4866,0,.9444],[.6779,0,.7696],[.8686,0,.5441],[1,0,.2827],[1,0,.0027],[1,0,0],[1,.1279,0],[1,.3185,0],[1,.5098,0],[1,.6893,0],[1,.8451,0],[1,.9669,0],[.8908,1,0],[.7009,1,0],[.5091,1,0],[.3279,.9974,0],[.1692,.8883,0],[.0435,.7423,.2221],[0,.5692,.4891],[0,.3803,.7239],[0,.1881,.9109],[0,.0052,1],[.0989,0,1],[.2416,0,1],[.4125,0,.9976],[.6003,0,.8467],[.7928,0,.64],[.9772,0,.391],[1,0,.1163],[1,0,0],[1,.0543,0],[1,.241,0],[1,.4336,0],[1,.6194,0],[1,.786,0],[1,.9226,0],[.9636,1,0],[.7782,1,0],[.5856,1,0],[.3986,1,0],[.2295,.937,0],[.0895,.8049,.1096],[0,.6414,.3847],[0,.4574,.6344],[0,.2649,.8424],[0,.0768,.9947],[.0518,0,1],[.1803,0,1],[.3411,0,1],[.5236,0,.9147],[.7157,0,.729],[.9048,0,.4952],[1,0,.2287],[1,0,0],[1,0,0],[1,.1646,0],[1,.3563,0],[1,.5463,0],[1,.7221,0],[1,.872,0],[1,.9861,0],[.8543,1,0],[.6631,1,0],[.4723,1,0],[.2946,.9793,0],[.1416,.8623,0],[.0235,.7102,.2762],[0,.533,.5382],[0,.3425,.7648],[0,.1511,.9409],[.0112,0,1],[.1242,0,1],[.2732,0,1],[.4484,0,.9729],[.6381,0,.8102],[.83,0,.594],[1,0,.3386],[1,0,.061],[1,0,0],[1,.0899,0],[1,.2788,0],[1,.471,0],[1,.6539,0],[1,.8155,0],[1,.9451,0],[.9284,1,0],[.7406,1,0],[.5481,1,0],[.3637,1,0],[.1994,.914,0],[.0662,.7749,.1647],[0,.6065,.4362],[0,.4199,.679],[0,.2273,.877],[0,.0415,1],[.074,0,1],[.2096,0,1],[.3755,0,1],[.5609,0,.8827],[.7534,0,.6864],[.9405,0,.4449],[1,0,.1741],[1,0,0],[1,.0178,0],[1,.2017,0],[1,.3941,0],[1,.5823,0],[1,.7539,0],[1,.8974,0],[.9997,1,0],[.8173,1,0],[.6252,1,0],[.436,1,0],[.2623,.9595,0],[.1154,.8349,.0515],[.0051,.6771,.3296],[0,.4963,.586],[0,.3046,.8037],[0,.1146,.9685],[.0302,0,1],[.1509,0,1],[.3059,0,1],[.4848,0,.9458],[.676,0,.7716],[.8668,0,.5465],[1,0,.2854],[1,0,.0054],[1,0,0],[1,.1261,0],[1,.3166,0],[1,.508,0],[1,.6877,0],[1,.8437,0],[1,.966,0],[.8925,1,0],[.7028,1,0],[.5109,1,0],[.3295,.9983,0]]},rainbow:{interpolate:!0,colors:[[.5,0,1],[.4922,.0123,1],[.4843,.0246,.9999],[.4765,.037,.9998],[.4686,.0493,.9997],[.4608,.0616,.9995],[.4529,.0739,.9993],[.4451,.0861,.9991],[.4373,.0984,.9988],[.4294,.1107,.9985],[.4216,.1229,.9981],[.4137,.1351,.9977],[.4059,.1473,.9973],[.398,.1595,.9968],[.3902,.1716,.9963],[.3824,.1837,.9957],[.3745,.1958,.9951],[.3667,.2079,.9945],[.3588,.2199,.9939],[.351,.2319,.9932],[.3431,.2439,.9924],[.3353,.2558,.9916],[.3275,.2677,.9908],[.3196,.2796,.99],[.3118,.2914,.9891],[.3039,.3032,.9882],[.2961,.3149,.9872],[.2882,.3265,.9862],[.2804,.3382,.9852],[.2725,.3497,.9841],[.2647,.3612,.983],[.2569,.3727,.9818],[.249,.3841,.9806],[.2412,.3955,.9794],[.2333,.4067,.9781],[.2255,.418,.9768],[.2176,.4291,.9755],[.2098,.4402,.9741],[.202,.4512,.9727],[.1941,.4622,.9713],[.1863,.4731,.9698],[.1784,.4839,.9683],[.1706,.4947,.9667],[.1627,.5053,.9651],[.1549,.5159,.9635],[.1471,.5264,.9618],[.1392,.5369,.9601],[.1314,.5472,.9584],[.1235,.5575,.9566],[.1157,.5677,.9548],[.1078,.5778,.9529],[.1,.5878,.9511],[.0922,.5977,.9491],[.0843,.6075,.9472],[.0765,.6173,.9452],[.0686,.6269,.9432],[.0608,.6365,.9411],[.0529,.6459,.939],[.0451,.6553,.9369],[.0373,.6645,.9347],[.0294,.6737,.9325],[.0216,.6827,.9302],[.0137,.6917,.928],[.0059,.7005,.9256],[.002,.7093,.9233],[.0098,.7179,.9209],[.0176,.7264,.9185],[.0255,.7348,.916],[.0333,.7431,.9135],[.0412,.7513,.911],[.049,.7594,.9085],[.0569,.7674,.9059],[.0647,.7752,.9032],[.0725,.7829,.9006],[.0804,.7905,.8979],[.0882,.798,.8952],[.0961,.8054,.8924],[.1039,.8126,.8896],[.1118,.8197,.8868],[.1196,.8267,.8839],[.1275,.8336,.881],[.1353,.8403,.8781],[.1431,.847,.8751],[.151,.8534,.8721],[.1588,.8598,.8691],[.1667,.866,.866],[.1745,.8721,.8629],[.1824,.8781,.8598],[.1902,.8839,.8566],[.198,.8896,.8534],[.2059,.8952,.8502],[.2137,.9006,.847],[.2216,.9059,.8437],[.2294,.911,.8403],[.2373,.916,.837],[.2451,.9209,.8336],[.2529,.9256,.8302],[.2608,.9302,.8267],[.2686,.9347,.8233],[.2765,.939,.8197],[.2843,.9432,.8162],[.2922,.9472,.8126],[.3,.9511,.809],[.3078,.9548,.8054],[.3157,.9584,.8017],[.3235,.9618,.798],[.3314,.9651,.7943],[.3392,.9683,.7905],[.3471,.9713,.7867],[.3549,.9741,.7829],[.3627,.9768,.7791],[.3706,.9794,.7752],[.3784,.9818,.7713],[.3863,.9841,.7674],[.3941,.9862,.7634],[.402,.9882,.7594],[.4098,.99,.7554],[.4176,.9916,.7513],[.4255,.9932,.7473],[.4333,.9945,.7431],[.4412,.9957,.739],[.449,.9968,.7348],[.4569,.9977,.7307],[.4647,.9985,.7264],[.4725,.9991,.7222],[.4804,.9995,.7179],[.4882,.9998,.7136],[.4961,1,.7093],[.5039,1,.7049],[.5118,.9998,.7005],[.5196,.9995,.6961],[.5275,.9991,.6917],[.5353,.9985,.6872],[.5431,.9977,.6827],[.551,.9968,.6782],[.5588,.9957,.6737],[.5667,.9945,.6691],[.5745,.9932,.6645],[.5824,.9916,.6599],[.5902,.99,.6553],[.598,.9882,.6506],[.6059,.9862,.6459],[.6137,.9841,.6412],[.6216,.9818,.6365],[.6294,.9794,.6317],[.6373,.9768,.6269],[.6451,.9741,.6221],[.6529,.9713,.6173],[.6608,.9683,.6124],[.6686,.9651,.6075],[.6765,.9618,.6026],[.6843,.9584,.5977],[.6922,.9548,.5928],[.7,.9511,.5878],[.7078,.9472,.5828],[.7157,.9432,.5778],[.7235,.939,.5727],[.7314,.9347,.5677],[.7392,.9302,.5626],[.7471,.9256,.5575],[.7549,.9209,.5524],[.7627,.916,.5472],[.7706,.911,.5421],[.7784,.9059,.5369],[.7863,.9006,.5317],[.7941,.8952,.5264],[.802,.8896,.5212],[.8098,.8839,.5159],[.8176,.8781,.5106],[.8255,.8721,.5053],[.8333,.866,.5],[.8412,.8598,.4947],[.849,.8534,.4893],[.8569,.847,.4839],[.8647,.8403,.4785],[.8725,.8336,.4731],[.8804,.8267,.4677],[.8882,.8197,.4622],[.8961,.8126,.4567],[.9039,.8054,.4512],[.9118,.798,.4457],[.9196,.7905,.4402],[.9275,.7829,.4347],[.9353,.7752,.4291],[.9431,.7674,.4235],[.951,.7594,.418],[.9588,.7513,.4124],[.9667,.7431,.4067],[.9745,.7348,.4011],[.9824,.7264,.3955],[.9902,.7179,.3898],[.998,.7093,.3841],[1,.7005,.3784],[1,.6917,.3727],[1,.6827,.367],[1,.6737,.3612],[1,.6645,.3555],[1,.6553,.3497],[1,.6459,.3439],[1,.6365,.3382],[1,.6269,.3324],[1,.6173,.3265],[1,.6075,.3207],[1,.5977,.3149],[1,.5878,.309],[1,.5778,.3032],[1,.5677,.2973],[1,.5575,.2914],[1,.5472,.2855],[1,.5369,.2796],[1,.5264,.2737],[1,.5159,.2677],[1,.5053,.2618],[1,.4947,.2558],[1,.4839,.2499],[1,.4731,.2439],[1,.4622,.2379],[1,.4512,.2319],[1,.4402,.226],[1,.4291,.2199],[1,.418,.2139],[1,.4067,.2079],[1,.3955,.2019],[1,.3841,.1958],[1,.3727,.1898],[1,.3612,.1837],[1,.3497,.1777],[1,.3382,.1716],[1,.3265,.1656],[1,.3149,.1595],[1,.3032,.1534],[1,.2914,.1473],[1,.2796,.1412],[1,.2677,.1351],[1,.2558,.129],[1,.2439,.1229],[1,.2319,.1168],[1,.2199,.1107],[1,.2079,.1045],[1,.1958,.0984],[1,.1837,.0923],[1,.1716,.0861],[1,.1595,.08],[1,.1473,.0739],[1,.1351,.0677],[1,.1229,.0616],[1,.1107,.0554],[1,.0984,.0493],[1,.0861,.0431],[1,.0739,.037],[1,.0616,.0308],[1,.0493,.0246],[1,.037,.0185],[1,.0246,.0123],[1,.0123,.0062],[1,0,0]]},seismic:{interpolate:!0,colors:[[0,0,.3],[0,0,.311],[0,0,.322],[0,0,.3329],[0,0,.3439],[0,0,.3549],[0,0,.3659],[0,0,.3769],[0,0,.3878],[0,0,.3988],[0,0,.4098],[0,0,.4208],[0,0,.4318],[0,0,.4427],[0,0,.4537],[0,0,.4647],[0,0,.4757],[0,0,.4867],[0,0,.4976],[0,0,.5086],[0,0,.5196],[0,0,.5306],[0,0,.5416],[0,0,.5525],[0,0,.5635],[0,0,.5745],[0,0,.5855],[0,0,.5965],[0,0,.6075],[0,0,.6184],[0,0,.6294],[0,0,.6404],[0,0,.6514],[0,0,.6624],[0,0,.6733],[0,0,.6843],[0,0,.6953],[0,0,.7063],[0,0,.7173],[0,0,.7282],[0,0,.7392],[0,0,.7502],[0,0,.7612],[0,0,.7722],[0,0,.7831],[0,0,.7941],[0,0,.8051],[0,0,.8161],[0,0,.8271],[0,0,.838],[0,0,.849],[0,0,.86],[0,0,.871],[0,0,.882],[0,0,.8929],[0,0,.9039],[0,0,.9149],[0,0,.9259],[0,0,.9369],[0,0,.9478],[0,0,.9588],[0,0,.9698],[0,0,.9808],[0,0,.9918],[.0039,.0039,1],[.0196,.0196,1],[.0353,.0353,1],[.051,.051,1],[.0667,.0667,1],[.0824,.0824,1],[.098,.098,1],[.1137,.1137,1],[.1294,.1294,1],[.1451,.1451,1],[.1608,.1608,1],[.1765,.1765,1],[.1922,.1922,1],[.2078,.2078,1],[.2235,.2235,1],[.2392,.2392,1],[.2549,.2549,1],[.2706,.2706,1],[.2863,.2863,1],[.302,.302,1],[.3176,.3176,1],[.3333,.3333,1],[.349,.349,1],[.3647,.3647,1],[.3804,.3804,1],[.3961,.3961,1],[.4118,.4118,1],[.4275,.4275,1],[.4431,.4431,1],[.4588,.4588,1],[.4745,.4745,1],[.4902,.4902,1],[.5059,.5059,1],[.5216,.5216,1],[.5373,.5373,1],[.5529,.5529,1],[.5686,.5686,1],[.5843,.5843,1],[.6,.6,1],[.6157,.6157,1],[.6314,.6314,1],[.6471,.6471,1],[.6627,.6627,1],[.6784,.6784,1],[.6941,.6941,1],[.7098,.7098,1],[.7255,.7255,1],[.7412,.7412,1],[.7569,.7569,1],[.7725,.7725,1],[.7882,.7882,1],[.8039,.8039,1],[.8196,.8196,1],[.8353,.8353,1],[.851,.851,1],[.8667,.8667,1],[.8824,.8824,1],[.898,.898,1],[.9137,.9137,1],[.9294,.9294,1],[.9451,.9451,1],[.9608,.9608,1],[.9765,.9765,1],[.9922,.9922,1],[1,.9922,.9922],[1,.9765,.9765],[1,.9608,.9608],[1,.9451,.9451],[1,.9294,.9294],[1,.9137,.9137],[1,.898,.898],[1,.8824,.8824],[1,.8667,.8667],[1,.851,.851],[1,.8353,.8353],[1,.8196,.8196],[1,.8039,.8039],[1,.7882,.7882],[1,.7725,.7725],[1,.7569,.7569],[1,.7412,.7412],[1,.7255,.7255],[1,.7098,.7098],[1,.6941,.6941],[1,.6784,.6784],[1,.6627,.6627],[1,.6471,.6471],[1,.6314,.6314],[1,.6157,.6157],[1,.6,.6],[1,.5843,.5843],[1,.5686,.5686],[1,.5529,.5529],[1,.5373,.5373],[1,.5216,.5216],[1,.5059,.5059],[1,.4902,.4902],[1,.4745,.4745],[1,.4588,.4588],[1,.4431,.4431],[1,.4275,.4275],[1,.4118,.4118],[1,.3961,.3961],[1,.3804,.3804],[1,.3647,.3647],[1,.349,.349],[1,.3333,.3333],[1,.3176,.3176],[1,.302,.302],[1,.2863,.2863],[1,.2706,.2706],[1,.2549,.2549],[1,.2392,.2392],[1,.2235,.2235],[1,.2078,.2078],[1,.1922,.1922],[1,.1765,.1765],[1,.1608,.1608],[1,.1451,.1451],[1,.1294,.1294],[1,.1137,.1137],[1,.098,.098],[1,.0824,.0824],[1,.0667,.0667],[1,.051,.051],[1,.0353,.0353],[1,.0196,.0196],[1,.0039,.0039],[.9941,0,0],[.9863,0,0],[.9784,0,0],[.9706,0,0],[.9627,0,0],[.9549,0,0],[.9471,0,0],[.9392,0,0],[.9314,0,0],[.9235,0,0],[.9157,0,0],[.9078,0,0],[.9,0,0],[.8922,0,0],[.8843,0,0],[.8765,0,0],[.8686,0,0],[.8608,0,0],[.8529,0,0],[.8451,0,0],[.8373,0,0],[.8294,0,0],[.8216,0,0],[.8137,0,0],[.8059,0,0],[.798,0,0],[.7902,0,0],[.7824,0,0],[.7745,0,0],[.7667,0,0],[.7588,0,0],[.751,0,0],[.7431,0,0],[.7353,0,0],[.7275,0,0],[.7196,0,0],[.7118,0,0],[.7039,0,0],[.6961,0,0],[.6882,0,0],[.6804,0,0],[.6725,0,0],[.6647,0,0],[.6569,0,0],[.649,0,0],[.6412,0,0],[.6333,0,0],[.6255,0,0],[.6176,0,0],[.6098,0,0],[.602,0,0],[.5941,0,0],[.5863,0,0],[.5784,0,0],[.5706,0,0],[.5627,0,0],[.5549,0,0],[.5471,0,0],[.5392,0,0],[.5314,0,0],[.5235,0,0],[.5157,0,0],[.5078,0,0],[.5,0,0]]},spring:{interpolate:!0,colors:[[1,0,1],[1,.0039,.9961],[1,.0078,.9922],[1,.0118,.9882],[1,.0157,.9843],[1,.0196,.9804],[1,.0235,.9765],[1,.0275,.9725],[1,.0314,.9686],[1,.0353,.9647],[1,.0392,.9608],[1,.0431,.9569],[1,.0471,.9529],[1,.051,.949],[1,.0549,.9451],[1,.0588,.9412],[1,.0627,.9373],[1,.0667,.9333],[1,.0706,.9294],[1,.0745,.9255],[1,.0784,.9216],[1,.0824,.9176],[1,.0863,.9137],[1,.0902,.9098],[1,.0941,.9059],[1,.098,.902],[1,.102,.898],[1,.1059,.8941],[1,.1098,.8902],[1,.1137,.8863],[1,.1176,.8824],[1,.1216,.8784],[1,.1255,.8745],[1,.1294,.8706],[1,.1333,.8667],[1,.1373,.8627],[1,.1412,.8588],[1,.1451,.8549],[1,.149,.851],[1,.1529,.8471],[1,.1569,.8431],[1,.1608,.8392],[1,.1647,.8353],[1,.1686,.8314],[1,.1725,.8275],[1,.1765,.8235],[1,.1804,.8196],[1,.1843,.8157],[1,.1882,.8118],[1,.1922,.8078],[1,.1961,.8039],[1,.2,.8],[1,.2039,.7961],[1,.2078,.7922],[1,.2118,.7882],[1,.2157,.7843],[1,.2196,.7804],[1,.2235,.7765],[1,.2275,.7725],[1,.2314,.7686],[1,.2353,.7647],[1,.2392,.7608],[1,.2431,.7569],[1,.2471,.7529],[1,.251,.749],[1,.2549,.7451],[1,.2588,.7412],[1,.2627,.7373],[1,.2667,.7333],[1,.2706,.7294],[1,.2745,.7255],[1,.2784,.7216],[1,.2824,.7176],[1,.2863,.7137],[1,.2902,.7098],[1,.2941,.7059],[1,.298,.702],[1,.302,.698],[1,.3059,.6941],[1,.3098,.6902],[1,.3137,.6863],[1,.3176,.6824],[1,.3216,.6784],[1,.3255,.6745],[1,.3294,.6706],[1,.3333,.6667],[1,.3373,.6627],[1,.3412,.6588],[1,.3451,.6549],[1,.349,.651],[1,.3529,.6471],[1,.3569,.6431],[1,.3608,.6392],[1,.3647,.6353],[1,.3686,.6314],[1,.3725,.6275],[1,.3765,.6235],[1,.3804,.6196],[1,.3843,.6157],[1,.3882,.6118],[1,.3922,.6078],[1,.3961,.6039],[1,.4,.6],[1,.4039,.5961],[1,.4078,.5922],[1,.4118,.5882],[1,.4157,.5843],[1,.4196,.5804],[1,.4235,.5765],[1,.4275,.5725],[1,.4314,.5686],[1,.4353,.5647],[1,.4392,.5608],[1,.4431,.5569],[1,.4471,.5529],[1,.451,.549],[1,.4549,.5451],[1,.4588,.5412],[1,.4627,.5373],[1,.4667,.5333],[1,.4706,.5294],[1,.4745,.5255],[1,.4784,.5216],[1,.4824,.5176],[1,.4863,.5137],[1,.4902,.5098],[1,.4941,.5059],[1,.498,.502],[1,.502,.498],[1,.5059,.4941],[1,.5098,.4902],[1,.5137,.4863],[1,.5176,.4824],[1,.5216,.4784],[1,.5255,.4745],[1,.5294,.4706],[1,.5333,.4667],[1,.5373,.4627],[1,.5412,.4588],[1,.5451,.4549],[1,.549,.451],[1,.5529,.4471],[1,.5569,.4431],[1,.5608,.4392],[1,.5647,.4353],[1,.5686,.4314],[1,.5725,.4275],[1,.5765,.4235],[1,.5804,.4196],[1,.5843,.4157],[1,.5882,.4118],[1,.5922,.4078],[1,.5961,.4039],[1,.6,.4],[1,.6039,.3961],[1,.6078,.3922],[1,.6118,.3882],[1,.6157,.3843],[1,.6196,.3804],[1,.6235,.3765],[1,.6275,.3725],[1,.6314,.3686],[1,.6353,.3647],[1,.6392,.3608],[1,.6431,.3569],[1,.6471,.3529],[1,.651,.349],[1,.6549,.3451],[1,.6588,.3412],[1,.6627,.3373],[1,.6667,.3333],[1,.6706,.3294],[1,.6745,.3255],[1,.6784,.3216],[1,.6824,.3176],[1,.6863,.3137],[1,.6902,.3098],[1,.6941,.3059],[1,.698,.302],[1,.702,.298],[1,.7059,.2941],[1,.7098,.2902],[1,.7137,.2863],[1,.7176,.2824],[1,.7216,.2784],[1,.7255,.2745],[1,.7294,.2706],[1,.7333,.2667],[1,.7373,.2627],[1,.7412,.2588],[1,.7451,.2549],[1,.749,.251],[1,.7529,.2471],[1,.7569,.2431],[1,.7608,.2392],[1,.7647,.2353],[1,.7686,.2314],[1,.7725,.2275],[1,.7765,.2235],[1,.7804,.2196],[1,.7843,.2157],[1,.7882,.2118],[1,.7922,.2078],[1,.7961,.2039],[1,.8,.2],[1,.8039,.1961],[1,.8078,.1922],[1,.8118,.1882],[1,.8157,.1843],[1,.8196,.1804],[1,.8235,.1765],[1,.8275,.1725],[1,.8314,.1686],[1,.8353,.1647],[1,.8392,.1608],[1,.8431,.1569],[1,.8471,.1529],[1,.851,.149],[1,.8549,.1451],[1,.8588,.1412],[1,.8627,.1373],[1,.8667,.1333],[1,.8706,.1294],[1,.8745,.1255],[1,.8784,.1216],[1,.8824,.1176],[1,.8863,.1137],[1,.8902,.1098],[1,.8941,.1059],[1,.898,.102],[1,.902,.098],[1,.9059,.0941],[1,.9098,.0902],[1,.9137,.0863],[1,.9176,.0824],[1,.9216,.0784],[1,.9255,.0745],[1,.9294,.0706],[1,.9333,.0667],[1,.9373,.0627],[1,.9412,.0588],[1,.9451,.0549],[1,.949,.051],[1,.9529,.0471],[1,.9569,.0431],[1,.9608,.0392],[1,.9647,.0353],[1,.9686,.0314],[1,.9725,.0275],[1,.9765,.0235],[1,.9804,.0196],[1,.9843,.0157],[1,.9882,.0118],[1,.9922,.0078],[1,.9961,.0039],[1,1,0]]},summer:{interpolate:!0,colors:[[0,.5,.4],[.0039,.502,.4],[.0078,.5039,.4],[.0118,.5059,.4],[.0157,.5078,.4],[.0196,.5098,.4],[.0235,.5118,.4],[.0275,.5137,.4],[.0314,.5157,.4],[.0353,.5176,.4],[.0392,.5196,.4],[.0431,.5216,.4],[.0471,.5235,.4],[.051,.5255,.4],[.0549,.5275,.4],[.0588,.5294,.4],[.0627,.5314,.4],[.0667,.5333,.4],[.0706,.5353,.4],[.0745,.5373,.4],[.0784,.5392,.4],[.0824,.5412,.4],[.0863,.5431,.4],[.0902,.5451,.4],[.0941,.5471,.4],[.098,.549,.4],[.102,.551,.4],[.1059,.5529,.4],[.1098,.5549,.4],[.1137,.5569,.4],[.1176,.5588,.4],[.1216,.5608,.4],[.1255,.5627,.4],[.1294,.5647,.4],[.1333,.5667,.4],[.1373,.5686,.4],[.1412,.5706,.4],[.1451,.5725,.4],[.149,.5745,.4],[.1529,.5765,.4],[.1569,.5784,.4],[.1608,.5804,.4],[.1647,.5824,.4],[.1686,.5843,.4],[.1725,.5863,.4],[.1765,.5882,.4],[.1804,.5902,.4],[.1843,.5922,.4],[.1882,.5941,.4],[.1922,.5961,.4],[.1961,.598,.4],[.2,.6,.4],[.2039,.602,.4],[.2078,.6039,.4],[.2118,.6059,.4],[.2157,.6078,.4],[.2196,.6098,.4],[.2235,.6118,.4],[.2275,.6137,.4],[.2314,.6157,.4],[.2353,.6176,.4],[.2392,.6196,.4],[.2431,.6216,.4],[.2471,.6235,.4],[.251,.6255,.4],[.2549,.6275,.4],[.2588,.6294,.4],[.2627,.6314,.4],[.2667,.6333,.4],[.2706,.6353,.4],[.2745,.6373,.4],[.2784,.6392,.4],[.2824,.6412,.4],[.2863,.6431,.4],[.2902,.6451,.4],[.2941,.6471,.4],[.298,.649,.4],[.302,.651,.4],[.3059,.6529,.4],[.3098,.6549,.4],[.3137,.6569,.4],[.3176,.6588,.4],[.3216,.6608,.4],[.3255,.6627,.4],[.3294,.6647,.4],[.3333,.6667,.4],[.3373,.6686,.4],[.3412,.6706,.4],[.3451,.6725,.4],[.349,.6745,.4],[.3529,.6765,.4],[.3569,.6784,.4],[.3608,.6804,.4],[.3647,.6824,.4],[.3686,.6843,.4],[.3725,.6863,.4],[.3765,.6882,.4],[.3804,.6902,.4],[.3843,.6922,.4],[.3882,.6941,.4],[.3922,.6961,.4],[.3961,.698,.4],[.4,.7,.4],[.4039,.702,.4],[.4078,.7039,.4],[.4118,.7059,.4],[.4157,.7078,.4],[.4196,.7098,.4],[.4235,.7118,.4],[.4275,.7137,.4],[.4314,.7157,.4],[.4353,.7176,.4],[.4392,.7196,.4],[.4431,.7216,.4],[.4471,.7235,.4],[.451,.7255,.4],[.4549,.7275,.4],[.4588,.7294,.4],[.4627,.7314,.4],[.4667,.7333,.4],[.4706,.7353,.4],[.4745,.7373,.4],[.4784,.7392,.4],[.4824,.7412,.4],[.4863,.7431,.4],[.4902,.7451,.4],[.4941,.7471,.4],[.498,.749,.4],[.502,.751,.4],[.5059,.7529,.4],[.5098,.7549,.4],[.5137,.7569,.4],[.5176,.7588,.4],[.5216,.7608,.4],[.5255,.7627,.4],[.5294,.7647,.4],[.5333,.7667,.4],[.5373,.7686,.4],[.5412,.7706,.4],[.5451,.7725,.4],[.549,.7745,.4],[.5529,.7765,.4],[.5569,.7784,.4],[.5608,.7804,.4],[.5647,.7824,.4],[.5686,.7843,.4],[.5725,.7863,.4],[.5765,.7882,.4],[.5804,.7902,.4],[.5843,.7922,.4],[.5882,.7941,.4],[.5922,.7961,.4],[.5961,.798,.4],[.6,.8,.4],[.6039,.802,.4],[.6078,.8039,.4],[.6118,.8059,.4],[.6157,.8078,.4],[.6196,.8098,.4],[.6235,.8118,.4],[.6275,.8137,.4],[.6314,.8157,.4],[.6353,.8176,.4],[.6392,.8196,.4],[.6431,.8216,.4],[.6471,.8235,.4],[.651,.8255,.4],[.6549,.8275,.4],[.6588,.8294,.4],[.6627,.8314,.4],[.6667,.8333,.4],[.6706,.8353,.4],[.6745,.8373,.4],[.6784,.8392,.4],[.6824,.8412,.4],[.6863,.8431,.4],[.6902,.8451,.4],[.6941,.8471,.4],[.698,.849,.4],[.702,.851,.4],[.7059,.8529,.4],[.7098,.8549,.4],[.7137,.8569,.4],[.7176,.8588,.4],[.7216,.8608,.4],[.7255,.8627,.4],[.7294,.8647,.4],[.7333,.8667,.4],[.7373,.8686,.4],[.7412,.8706,.4],[.7451,.8725,.4],[.749,.8745,.4],[.7529,.8765,.4],[.7569,.8784,.4],[.7608,.8804,.4],[.7647,.8824,.4],[.7686,.8843,.4],[.7725,.8863,.4],[.7765,.8882,.4],[.7804,.8902,.4],[.7843,.8922,.4],[.7882,.8941,.4],[.7922,.8961,.4],[.7961,.898,.4],[.8,.9,.4],[.8039,.902,.4],[.8078,.9039,.4],[.8118,.9059,.4],[.8157,.9078,.4],[.8196,.9098,.4],[.8235,.9118,.4],[.8275,.9137,.4],[.8314,.9157,.4],[.8353,.9176,.4],[.8392,.9196,.4],[.8431,.9216,.4],[.8471,.9235,.4],[.851,.9255,.4],[.8549,.9275,.4],[.8588,.9294,.4],[.8627,.9314,.4],[.8667,.9333,.4],[.8706,.9353,.4],[.8745,.9373,.4],[.8784,.9392,.4],[.8824,.9412,.4],[.8863,.9431,.4],[.8902,.9451,.4],[.8941,.9471,.4],[.898,.949,.4],[.902,.951,.4],[.9059,.9529,.4],[.9098,.9549,.4],[.9137,.9569,.4],[.9176,.9588,.4],[.9216,.9608,.4],[.9255,.9627,.4],[.9294,.9647,.4],[.9333,.9667,.4],[.9373,.9686,.4],[.9412,.9706,.4],[.9451,.9725,.4],[.949,.9745,.4],[.9529,.9765,.4],[.9569,.9784,.4],[.9608,.9804,.4],[.9647,.9824,.4],[.9686,.9843,.4],[.9725,.9863,.4],[.9765,.9882,.4],[.9804,.9902,.4],[.9843,.9922,.4],[.9882,.9941,.4],[.9922,.9961,.4],[.9961,.998,.4],[1,1,.4]]},tab10:{interpolate:!1,colors:[[.1216,.4667,.7059],[1,.498,.0549],[.1725,.6275,.1725],[.8392,.1529,.1569],[.5804,.4039,.7412],[.549,.3373,.2941],[.8902,.4667,.7608],[.498,.498,.498],[.7373,.7412,.1333],[.0902,.7451,.8118]]},tab20:{interpolate:!1,colors:[[.1216,.4667,.7059],[.6824,.7804,.9098],[1,.498,.0549],[1,.7333,.4706],[.1725,.6275,.1725],[.5961,.8745,.5412],[.8392,.1529,.1569],[1,.5961,.5882],[.5804,.4039,.7412],[.7725,.6902,.8353],[.549,.3373,.2941],[.7686,.6118,.5804],[.8902,.4667,.7608],[.9686,.7137,.8235],[.498,.498,.498],[.7804,.7804,.7804],[.7373,.7412,.1333],[.8588,.8588,.5529],[.0902,.7451,.8118],[.6196,.8549,.898]]},tab20b:{interpolate:!1,colors:[[.2235,.2314,.4745],[.3216,.3294,.6392],[.4196,.4314,.8118],[.6118,.6196,.8706],[.3882,.4745,.2235],[.549,.6353,.3216],[.7098,.8118,.4196],[.8078,.8588,.6118],[.549,.4275,.1922],[.7412,.6196,.2235],[.9059,.7294,.3216],[.9059,.7961,.5804],[.5176,.2353,.2235],[.6784,.2863,.2902],[.8392,.3804,.4196],[.9059,.5882,.6118],[.4824,.2549,.451],[.6471,.3176,.5804],[.8078,.4275,.7412],[.8706,.6196,.8392]]},tab20c:{interpolate:!1,colors:[[.1922,.5098,.7412],[.4196,.6824,.8392],[.6196,.7922,.8824],[.7765,.8588,.9373],[.902,.3333,.051],[.9922,.5529,.2353],[.9922,.6824,.4196],[.9922,.8157,.6353],[.1922,.6392,.3294],[.4549,.7686,.4627],[.6314,.851,.6078],[.7804,.9137,.7529],[.4588,.4196,.6941],[.6196,.6039,.7843],[.7373,.7412,.8627],[.8549,.8549,.9216],[.3882,.3882,.3882],[.5882,.5882,.5882],[.7412,.7412,.7412],[.851,.851,.851]]},terrain:{interpolate:!0,colors:[[.2,.2,.6],[.1948,.2105,.6105],[.1895,.2209,.6209],[.1843,.2314,.6314],[.1791,.2418,.6418],[.1739,.2523,.6523],[.1686,.2627,.6627],[.1634,.2732,.6732],[.1582,.2837,.6837],[.1529,.2941,.6941],[.1477,.3046,.7046],[.1425,.315,.715],[.1373,.3255,.7255],[.132,.3359,.7359],[.1268,.3464,.7464],[.1216,.3569,.7569],[.1163,.3673,.7673],[.1111,.3778,.7778],[.1059,.3882,.7882],[.1007,.3987,.7987],[.0954,.4092,.8092],[.0902,.4196,.8196],[.085,.4301,.8301],[.0797,.4405,.8405],[.0745,.451,.851],[.0693,.4614,.8614],[.0641,.4719,.8719],[.0588,.4824,.8824],[.0536,.4928,.8928],[.0484,.5033,.9033],[.0431,.5137,.9137],[.0379,.5242,.9242],[.0327,.5346,.9346],[.0275,.5451,.9451],[.0222,.5556,.9556],[.017,.566,.966],[.0118,.5765,.9765],[.0065,.5869,.9869],[.0013,.5974,.9974],[0,.6059,.9824],[0,.6137,.9588],[0,.6216,.9353],[0,.6294,.9118],[0,.6373,.8882],[0,.6451,.8647],[0,.6529,.8412],[0,.6608,.8176],[0,.6686,.7941],[0,.6765,.7706],[0,.6843,.7471],[0,.6922,.7235],[0,.7,.7],[0,.7078,.6765],[0,.7157,.6529],[0,.7235,.6294],[0,.7314,.6059],[0,.7392,.5824],[0,.7471,.5588],[0,.7549,.5353],[0,.7627,.5118],[0,.7706,.4882],[0,.7784,.4647],[0,.7863,.4412],[0,.7941,.4176],[.0039,.8008,.4008],[.0196,.8039,.4039],[.0353,.8071,.4071],[.051,.8102,.4102],[.0667,.8133,.4133],[.0824,.8165,.4165],[.098,.8196,.4196],[.1137,.8227,.4227],[.1294,.8259,.4259],[.1451,.829,.429],[.1608,.8322,.4322],[.1765,.8353,.4353],[.1922,.8384,.4384],[.2078,.8416,.4416],[.2235,.8447,.4447],[.2392,.8478,.4478],[.2549,.851,.451],[.2706,.8541,.4541],[.2863,.8573,.4573],[.302,.8604,.4604],[.3176,.8635,.4635],[.3333,.8667,.4667],[.349,.8698,.4698],[.3647,.8729,.4729],[.3804,.8761,.4761],[.3961,.8792,.4792],[.4118,.8824,.4824],[.4275,.8855,.4855],[.4431,.8886,.4886],[.4588,.8918,.4918],[.4745,.8949,.4949],[.4902,.898,.498],[.5059,.9012,.5012],[.5216,.9043,.5043],[.5373,.9075,.5075],[.5529,.9106,.5106],[.5686,.9137,.5137],[.5843,.9169,.5169],[.6,.92,.52],[.6157,.9231,.5231],[.6314,.9263,.5263],[.6471,.9294,.5294],[.6627,.9325,.5325],[.6784,.9357,.5357],[.6941,.9388,.5388],[.7098,.942,.542],[.7255,.9451,.5451],[.7412,.9482,.5482],[.7569,.9514,.5514],[.7725,.9545,.5545],[.7882,.9576,.5576],[.8039,.9608,.5608],[.8196,.9639,.5639],[.8353,.9671,.5671],[.851,.9702,.5702],[.8667,.9733,.5733],[.8824,.9765,.5765],[.898,.9796,.5796],[.9137,.9827,.5827],[.9294,.9859,.5859],[.9451,.989,.589],[.9608,.9922,.5922],[.9765,.9953,.5953],[.9922,.9984,.5984],[.9961,.995,.5979],[.9882,.9849,.5936],[.9804,.9749,.5894],[.9725,.9649,.5852],[.9647,.9548,.5809],[.9569,.9448,.5767],[.949,.9347,.5725],[.9412,.9247,.5682],[.9333,.9147,.564],[.9255,.9046,.5598],[.9176,.8946,.5555],[.9098,.8845,.5513],[.902,.8745,.5471],[.8941,.8645,.5428],[.8863,.8544,.5386],[.8784,.8444,.5344],[.8706,.8344,.5301],[.8627,.8243,.5259],[.8549,.8143,.5216],[.8471,.8042,.5174],[.8392,.7942,.5132],[.8314,.7842,.5089],[.8235,.7741,.5047],[.8157,.7641,.5005],[.8078,.754,.4962],[.8,.744,.492],[.7922,.734,.4878],[.7843,.7239,.4835],[.7765,.7139,.4793],[.7686,.7038,.4751],[.7608,.6938,.4708],[.7529,.6838,.4666],[.7451,.6737,.4624],[.7373,.6637,.4581],[.7294,.6536,.4539],[.7216,.6436,.4496],[.7137,.6336,.4454],[.7059,.6235,.4412],[.698,.6135,.4369],[.6902,.6035,.4327],[.6824,.5934,.4285],[.6745,.5834,.4242],[.6667,.5733,.42],[.6588,.5633,.4158],[.651,.5533,.4115],[.6431,.5432,.4073],[.6353,.5332,.4031],[.6275,.5231,.3988],[.6196,.5131,.3946],[.6118,.5031,.3904],[.6039,.493,.3861],[.5961,.483,.3819],[.5882,.4729,.3776],[.5804,.4629,.3734],[.5725,.4529,.3692],[.5647,.4428,.3649],[.5569,.4328,.3607],[.549,.4227,.3565],[.5412,.4127,.3522],[.5333,.4027,.348],[.5255,.3926,.3438],[.5176,.3826,.3395],[.5098,.3725,.3353],[.502,.3625,.3311],[.5059,.3675,.3379],[.5137,.3776,.3484],[.5216,.3876,.3589],[.5294,.3976,.3694],[.5373,.4077,.3799],[.5451,.4177,.3904],[.5529,.4278,.4009],[.5608,.4378,.4115],[.5686,.4478,.422],[.5765,.4579,.4325],[.5843,.4679,.443],[.5922,.478,.4535],[.6,.488,.464],[.6078,.498,.4745],[.6157,.5081,.485],[.6235,.5181,.4955],[.6314,.5282,.506],[.6392,.5382,.5165],[.6471,.5482,.5271],[.6549,.5583,.5376],[.6627,.5683,.5481],[.6706,.5784,.5586],[.6784,.5884,.5691],[.6863,.5984,.5796],[.6941,.6085,.5901],[.702,.6185,.6006],[.7098,.6285,.6111],[.7176,.6386,.6216],[.7255,.6486,.6322],[.7333,.6587,.6427],[.7412,.6687,.6532],[.749,.6787,.6637],[.7569,.6888,.6742],[.7647,.6988,.6847],[.7725,.7089,.6952],[.7804,.7189,.7057],[.7882,.7289,.7162],[.7961,.739,.7267],[.8039,.749,.7373],[.8118,.7591,.7478],[.8196,.7691,.7583],[.8275,.7791,.7688],[.8353,.7892,.7793],[.8431,.7992,.7898],[.851,.8093,.8003],[.8588,.8193,.8108],[.8667,.8293,.8213],[.8745,.8394,.8318],[.8824,.8494,.8424],[.8902,.8595,.8529],[.898,.8695,.8634],[.9059,.8795,.8739],[.9137,.8896,.8844],[.9216,.8996,.8949],[.9294,.9096,.9054],[.9373,.9197,.9159],[.9451,.9297,.9264],[.9529,.9398,.9369],[.9608,.9498,.9475],[.9686,.9598,.958],[.9765,.9699,.9685],[.9843,.9799,.979],[.9922,.99,.9895],[1,1,1]]},turbo:{interpolate:!0,colors:[[.19,.0718,.2322],[.1948,.0834,.2615],[.1996,.095,.2902],[.2042,.1065,.3184],[.2086,.118,.3461],[.2129,.1295,.3731],[.2171,.1409,.3996],[.2211,.1522,.4256],[.225,.1635,.451],[.2288,.1748,.4758],[.2324,.186,.5],[.2358,.1972,.5237],[.2392,.2083,.5469],[.2423,.2194,.5694],[.2454,.2304,.5914],[.2483,.2414,.6129],[.2511,.2524,.6337],[.2537,.2633,.6541],[.2562,.2741,.6738],[.2585,.2849,.693],[.2607,.2957,.7116],[.2628,.3064,.7297],[.2647,.3171,.7472],[.2665,.3277,.7641],[.2682,.3382,.7805],[.2697,.3488,.7963],[.271,.3593,.8116],[.2723,.3697,.8262],[.2733,.3801,.8404],[.2743,.3904,.8539],[.2751,.4007,.8669],[.2758,.411,.8794],[.2763,.4212,.8912],[.2767,.4313,.9025],[.2769,.4414,.9133],[.277,.4515,.9235],[.277,.4615,.9331],[.2768,.4715,.9421],[.2765,.4814,.9506],[.276,.4913,.9586],[.2754,.5012,.9659],[.2747,.5109,.9728],[.2738,.5207,.979],[.2727,.5304,.9846],[.2711,.5402,.9893],[.2688,.55,.993],[.2659,.5598,.9958],[.2625,.5697,.9977],[.2586,.5796,.9988],[.2542,.5895,.999],[.2495,.5994,.9984],[.2443,.6094,.997],[.2387,.6193,.9948],[.2329,.6292,.992],[.2268,.6391,.9885],[.2204,.649,.9844],[.2138,.6589,.9796],[.2071,.6687,.9742],[.2002,.6784,.9683],[.1933,.6881,.9619],[.1862,.6978,.955],[.1792,.7073,.9476],[.1722,.7168,.9398],[.1653,.7262,.9316],[.1584,.7355,.923],[.1517,.7447,.9142],[.1452,.7538,.905],[.1389,.7628,.8955],[.1328,.7716,.8858],[.127,.7804,.8759],[.1215,.789,.8658],[.1164,.7974,.8556],[.1117,.8057,.8452],[.1074,.8138,.8348],[.1036,.8218,.8244],[.1003,.8296,.8139],[.0975,.8371,.8034],[.0953,.8446,.793],[.0938,.8518,.7826],[.0929,.8588,.7724],[.0927,.8655,.7623],[.0932,.8721,.7524],[.0945,.8784,.7426],[.0966,.8845,.7332],[.0996,.8904,.7239],[.1034,.896,.715],[.1082,.9014,.706],[.1137,.9067,.6965],[.1201,.9119,.6866],[.1273,.917,.6763],[.1353,.922,.6656],[.1439,.9268,.6545],[.1532,.9315,.6431],[.1632,.9361,.6314],[.1738,.9405,.6194],[.1849,.9448,.6071],[.1966,.949,.5947],[.2088,.953,.582],[.2214,.9569,.5691],[.2345,.9606,.5561],[.248,.9642,.543],[.2618,.9676,.5298],[.276,.9709,.5165],[.2904,.974,.5032],[.3051,.977,.4899],[.3201,.9797,.4765],[.3352,.9823,.4632],[.3504,.9848,.45],[.3658,.987,.4369],[.3813,.9891,.4239],[.3968,.991,.411],[.4123,.9927,.3983],[.4278,.9942,.3858],[.4432,.9955,.3734],[.4585,.9966,.3614],[.4738,.9976,.3496],[.4888,.9983,.3382],[.5036,.9988,.327],[.5182,.9991,.3162],[.5326,.9992,.3058],[.5466,.9991,.2958],[.5603,.9987,.2862],[.5736,.9982,.2771],[.5865,.9974,.2685],[.5989,.9964,.2604],[.6109,.9951,.2528],[.6223,.9937,.2458],[.6332,.992,.2394],[.6436,.99,.2336],[.6539,.9878,.2284],[.6643,.9852,.2237],[.6746,.9825,.2196],[.6849,.9794,.216],[.6952,.9761,.2129],[.7055,.9726,.2103],[.7158,.9688,.2082],[.726,.9647,.2064],[.7361,.9604,.205],[.7462,.9559,.2041],[.7562,.9512,.2034],[.7661,.9463,.2031],[.7759,.9411,.2031],[.7856,.9358,.2034],[.7952,.9302,.2039],[.8047,.9245,.2046],[.8141,.9186,.2055],[.8233,.9125,.2066],[.8324,.9063,.2079],[.8413,.8999,.2093],[.8501,.8933,.2107],[.8587,.8866,.2123],[.8671,.8797,.2139],[.8753,.8727,.2156],[.8833,.8655,.2172],[.8911,.8583,.2188],[.8987,.8509,.2204],[.906,.8434,.2219],[.9132,.8358,.2233],[.92,.8281,.2246],[.9267,.8202,.2257],[.933,.8124,.2267],[.9391,.8044,.2274],[.9449,.7963,.228],[.9504,.7882,.2283],[.9556,.78,.2284],[.9605,.7718,.2281],[.9651,.7635,.2275],[.9693,.7552,.2266],[.9732,.7468,.2254],[.9768,.7384,.2237],[.98,.73,.2216],[.9829,.7214,.2192],[.9855,.7125,.2165],[.9878,.7033,.2136],[.9899,.6938,.2104],[.9916,.6841,.2071],[.9931,.6741,.2035],[.9944,.6639,.1997],[.9954,.6534,.1958],[.9961,.6428,.1916],[.9965,.6319,.1874],[.9968,.6209,.183],[.9967,.6098,.1784],[.9964,.5985,.1738],[.9959,.587,.169],[.9952,.5755,.1641],[.9942,.5639,.1592],[.993,.5521,.1542],[.9915,.5404,.1491],[.9899,.5285,.144],[.988,.5167,.1388],[.9859,.5048,.1337],[.9836,.4929,.1285],[.9811,.481,.1233],[.9784,.4692,.1182],[.9754,.4574,.113],[.9723,.4456,.108],[.969,.434,.1029],[.9656,.4224,.098],[.9619,.4109,.0931],[.958,.3996,.0883],[.954,.3884,.0836],[.9498,.3773,.079],[.9454,.3664,.0746],[.9408,.3557,.0703],[.9361,.3451,.0662],[.9312,.3348,.0622],[.9262,.3247,.0584],[.921,.3149,.0548],[.9157,.3053,.0513],[.9102,.296,.0481],[.9046,.287,.0452],[.8989,.2782,.0424],[.893,.2698,.0399],[.8869,.2615,.0375],[.8807,.2533,.0352],[.8742,.2453,.033],[.8676,.2373,.0308],[.8608,.2294,.0288],[.8538,.2217,.0268],[.8466,.2141,.0249],[.8393,.2065,.023],[.8317,.1991,.0213],[.824,.1918,.0197],[.8161,.1846,.0181],[.808,.1775,.0166],[.7997,.1706,.0152],[.7912,.1637,.0139],[.7826,.1569,.0126],[.7738,.1503,.0115],[.7648,.1437,.0104],[.7556,.1373,.0094],[.7462,.131,.0085],[.7366,.1248,.0077],[.7269,.1187,.007],[.7169,.1127,.0063],[.7068,.1068,.0057],[.6965,.101,.0052],[.686,.0954,.0048],[.6754,.0898,.0045],[.6645,.0844,.0042],[.6534,.079,.0041],[.6422,.0738,.004],[.6308,.0687,.004],[.6192,.0637,.0041],[.6075,.0588,.0043],[.5955,.054,.0045],[.5834,.0493,.0049],[.571,.0447,.0053],[.5585,.0403,.0058],[.5458,.0359,.0064],[.533,.0317,.007],[.5199,.0276,.0078],[.5066,.0235,.0086],[.4932,.0196,.0096],[.4796,.0158,.0106]]},twilight:{interpolate:!0,colors:[[.8858,.85,.888],[.8838,.8507,.8872],[.8817,.8513,.8864],[.8795,.8517,.8854],[.8772,.8519,.8843],[.8749,.8519,.8832],[.8723,.8518,.8819],[.8697,.8515,.8805],[.867,.8511,.8791],[.8641,.8505,.8776],[.8611,.8498,.876],[.858,.8489,.8743],[.8547,.8479,.8726],[.8513,.8467,.8709],[.8478,.8455,.869],[.8441,.8441,.8672],[.8403,.8426,.8653],[.8363,.8409,.8633],[.8322,.8392,.8613],[.828,.8374,.8592],[.8236,.8355,.8571],[.819,.8335,.855],[.8144,.8315,.8528],[.8096,.8293,.8506],[.8047,.8271,.8484],[.7997,.8248,.8462],[.7945,.8225,.8439],[.7893,.82,.8416],[.784,.8176,.8394],[.7786,.815,.8371],[.7731,.8124,.8348],[.7675,.8098,.8325],[.7619,.8071,.8303],[.7562,.8044,.828],[.7504,.8016,.8258],[.7446,.7988,.8236],[.7387,.796,.8214],[.7328,.7931,.8193],[.7269,.7902,.8172],[.721,.7872,.8151],[.715,.7843,.8131],[.709,.7813,.8111],[.703,.7782,.8092],[.697,.7752,.8073],[.691,.7721,.8055],[.6851,.769,.8037],[.6791,.7658,.802],[.6731,.7627,.8003],[.6672,.7595,.7986],[.6613,.7563,.797],[.6554,.7531,.7955],[.6496,.7499,.794],[.6438,.7466,.7926],[.638,.7433,.7912],[.6323,.74,.7898],[.6266,.7367,.7885],[.621,.7334,.7872],[.6154,.73,.786],[.6099,.7267,.7847],[.6044,.7233,.7836],[.599,.7199,.7825],[.5936,.7165,.7814],[.5883,.713,.7803],[.583,.7096,.7793],[.5778,.7061,.7783],[.5727,.7027,.7773],[.5676,.6992,.7763],[.5626,.6957,.7754],[.5576,.6922,.7745],[.5527,.6886,.7736],[.5478,.6851,.7728],[.5431,.6815,.7719],[.5383,.678,.7711],[.5337,.6744,.7703],[.5291,.6708,.7696],[.5246,.6672,.7688],[.5201,.6636,.7681],[.5157,.6599,.7673],[.5114,.6563,.7666],[.5071,.6526,.7659],[.5029,.649,.7652],[.4987,.6453,.7645],[.4947,.6416,.7639],[.4907,.6379,.7632],[.4867,.6342,.7626],[.4829,.6304,.7619],[.4791,.6267,.7613],[.4753,.6229,.7607],[.4717,.6192,.76],[.4681,.6154,.7594],[.4646,.6116,.7588],[.4611,.6078,.7582],[.4577,.6039,.7576],[.4544,.6001,.757],[.4512,.5962,.7564],[.448,.5924,.7557],[.4449,.5885,.7551],[.4419,.5846,.7545],[.439,.5807,.7539],[.4361,.5768,.7533],[.4333,.5729,.7527],[.4306,.5689,.752],[.4279,.565,.7514],[.4253,.561,.7508],[.4228,.557,.7501],[.4204,.553,.7494],[.418,.549,.7488],[.4157,.5449,.7481],[.4135,.5409,.7474],[.4114,.5368,.7467],[.4093,.5328,.746],[.4073,.5287,.7452],[.4053,.5246,.7445],[.4035,.5205,.7437],[.4017,.5164,.743],[.3999,.5122,.7422],[.3983,.5081,.7414],[.3967,.5039,.7405],[.3951,.4997,.7397],[.3937,.4955,.7388],[.3923,.4913,.7379],[.3909,.4871,.737],[.3896,.4828,.736],[.3884,.4786,.7351],[.3872,.4743,.7341],[.3861,.47,.7331],[.3851,.4657,.732],[.3841,.4614,.7309],[.3831,.4571,.7298],[.3822,.4527,.7287],[.3814,.4484,.7276],[.3806,.444,.7264],[.3798,.4396,.7251],[.3791,.4352,.7239],[.3784,.4308,.7226],[.3778,.4264,.7213],[.3772,.4219,.7199],[.3766,.4175,.7185],[.3761,.413,.7171],[.3756,.4086,.7156],[.3751,.4041,.7141],[.3747,.3996,.7126],[.3743,.395,.711],[.3739,.3905,.7094],[.3736,.386,.7077],[.3732,.3814,.706],[.3729,.3768,.7042],[.3726,.3723,.7024],[.3724,.3677,.7006],[.3721,.3631,.6987],[.3719,.3584,.6968],[.3716,.3538,.6948],[.3714,.3492,.6927],[.3712,.3445,.6907],[.3709,.3399,.6885],[.3707,.3352,.6863],[.3705,.3305,.6841],[.3703,.3258,.6818],[.3701,.3211,.6794],[.3699,.3164,.677],[.3697,.3117,.6746],[.3694,.3069,.6721],[.3692,.3022,.6695],[.369,.2974,.6668],[.3687,.2927,.6641],[.3684,.2879,.6613],[.3681,.2832,.6585],[.3678,.2784,.6556],[.3675,.2736,.6526],[.3672,.2688,.6496],[.3668,.264,.6465],[.3664,.2593,.6433],[.366,.2545,.64],[.3656,.2497,.6367],[.3651,.2449,.6333],[.3646,.2401,.6298],[.3641,.2354,.6262],[.3635,.2306,.6225],[.3629,.2258,.6188],[.3622,.2211,.615],[.3615,.2164,.611],[.3608,.2116,.607],[.36,.2069,.6029],[.3592,.2023,.5987],[.3583,.1976,.5944],[.3574,.193,.59],[.3564,.1884,.5855],[.3554,.1838,.5809],[.3543,.1793,.5762],[.3531,.1748,.5714],[.3519,.1703,.5665],[.3506,.166,.5615],[.3492,.1616,.5563],[.3478,.1573,.5511],[.3463,.1531,.5458],[.3447,.149,.5403],[.3431,.1449,.5347],[.3414,.1409,.5291],[.3395,.137,.5233],[.3376,.1332,.5174],[.3357,.1295,.5114],[.3336,.1259,.5054],[.3315,.1224,.4992],[.3292,.1191,.4929],[.3269,.1158,.4866],[.3245,.1126,.4802],[.322,.1096,.4737],[.3195,.1067,.4671],[.3168,.1039,.4605],[.3141,.1012,.4539],[.3113,.0987,.4472],[.3084,.0963,.4405],[.3055,.094,.4337],[.3025,.0918,.427],[.2994,.0897,.4202],[.2963,.0877,.4135],[.2931,.0859,.4067],[.2899,.0841,.4],[.2867,.0824,.3933],[.2834,.0809,.3867],[.2801,.0794,.3801],[.2768,.078,.3735],[.2734,.0767,.367],[.2701,.0755,.3606],[.2667,.0743,.3542],[.2634,.0733,.3479],[.26,.0723,.3417],[.2567,.0714,.3356],[.2534,.0705,.3296],[.2501,.0698,.3237],[.2469,.0691,.3179],[.2437,.0684,.3122],[.2405,.0679,.3066],[.2374,.0674,.3011],[.2343,.0669,.2957],[.2313,.0666,.2905],[.2284,.0663,.2854],[.2255,.0661,.2804],[.2227,.0659,.2756],[.22,.0659,.2709],[.2174,.0659,.2663],[.2148,.0659,.2619],[.2124,.0661,.2577],[.21,.0663,.2535],[.2077,.0666,.2495],[.2056,.067,.2457],[.2035,.0674,.2421],[.2016,.068,.2385],[.1997,.0686,.2352],[.1979,.0693,.2319],[.1961,.0703,.2287],[.1941,.0716,.2256],[.192,.0732,.2224],[.1898,.075,.2193],[.1874,.0771,.2162],[.1849,.0794,.2131],[.1877,.0773,.2139],[.1905,.0753,.2147],[.1932,.0736,.2154],[.1957,.0722,.2162],[.1982,.071,.2169],[.2006,.0701,.2176],[.2029,.0694,.2183],[.2053,.0689,.2191],[.2079,.0685,.22],[.2105,.0681,.221],[.2133,.0678,.2221],[.2163,.0676,.2232],[.2193,.0675,.2245],[.2225,.0674,.2259],[.2258,.0674,.2273],[.2292,.0674,.2288],[.2327,.0676,.2304],[.2363,.0677,.232],[.24,.068,.2337],[.2438,.0683,.2355],[.2477,.0687,.2373],[.2517,.0691,.2392],[.2558,.0695,.2411],[.26,.0701,.2431],[.2643,.0706,.2451],[.2686,.0712,.2471],[.273,.0719,.2492],[.2775,.0726,.2512],[.282,.0733,.2533],[.2866,.0741,.2554],[.2913,.0749,.2576],[.296,.0757,.2597],[.3008,.0766,.2618],[.3056,.0775,.2639],[.3105,.0785,.266],[.3154,.0794,.2681],[.3203,.0804,.2702],[.3253,.0814,.2723],[.3303,.0825,.2743],[.3353,.0835,.2763],[.3404,.0846,.2783],[.3455,.0857,.2803],[.3506,.0869,.2822],[.3557,.088,.2841],[.3609,.0892,.2859],[.3661,.0904,.2877],[.3712,.0917,.2895],[.3764,.0929,.2912],[.3816,.0942,.2928],[.3868,.0956,.2944],[.392,.0969,.296],[.3972,.0983,.2974],[.4024,.0997,.2989],[.4076,.1012,.3002],[.4128,.1027,.3015],[.418,.1042,.3028],[.4231,.1058,.304],[.4283,.1074,.3051],[.4334,.1091,.3061],[.4386,.1108,.3071],[.4437,.1125,.308],[.4488,.1144,.3089],[.4538,.1162,.3097],[.4589,.1181,.3104],[.4639,.1201,.3111],[.4689,.1222,.3117],[.4738,.1243,.3123],[.4788,.1264,.3127],[.4837,.1286,.3132],[.4885,.1309,.3135],[.4934,.1333,.3139],[.4981,.1357,.3141],[.5029,.1382,.3144],[.5076,.1407,.3145],[.5123,.1433,.3147],[.5169,.146,.3148],[.5215,.1487,.3148],[.526,.1515,.3148],[.5305,.1544,.3148],[.535,.1573,.3148],[.5394,.1602,.3147],[.5438,.1633,.3146],[.5481,.1664,.3145],[.5524,.1695,.3144],[.5566,.1727,.3142],[.5608,.1759,.3141],[.565,.1792,.3139],[.5691,.1826,.3137],[.5731,.186,.3136],[.5772,.1894,.3134],[.5811,.1929,.3132],[.5851,.1964,.3131],[.5889,.2,.3129],[.5928,.2036,.3127],[.5966,.2072,.3126],[.6004,.2109,.3124],[.6041,.2146,.3123],[.6078,.2184,.3122],[.6114,.2221,.3121],[.615,.2259,.3121],[.6186,.2298,.312],[.6221,.2337,.312],[.6256,.2376,.312],[.629,.2415,.312],[.6324,.2455,.312],[.6358,.2494,.3121],[.6391,.2535,.3122],[.6424,.2575,.3123],[.6457,.2616,.3125],[.6489,.2656,.3127],[.6521,.2697,.3129],[.6552,.2739,.3132],[.6583,.278,.3135],[.6614,.2822,.3138],[.6644,.2864,.3142],[.6674,.2906,.3146],[.6704,.2949,.315],[.6733,.2991,.3155],[.6762,.3034,.3161],[.6791,.3077,.3167],[.6819,.312,.3173],[.6847,.3163,.318],[.6874,.3207,.3187],[.6901,.3251,.3195],[.6928,.3295,.3203],[.6955,.3339,.3211],[.6981,.3383,.3221],[.7006,.3427,.3231],[.7032,.3472,.3241],[.7057,.3517,.3252],[.7081,.3561,.3263],[.7105,.3607,.3275],[.7129,.3652,.3288],[.7153,.3697,.3301],[.7176,.3743,.3315],[.7199,.3788,.333],[.7221,.3834,.3345],[.7243,.388,.3361],[.7265,.3926,.3377],[.7286,.3972,.3395],[.7307,.4019,.3412],[.7328,.4065,.3431],[.7348,.4112,.345],[.7368,.4159,.347],[.7388,.4205,.3491],[.7407,.4252,.3513],[.7426,.4299,.3535],[.7445,.4347,.3558],[.7463,.4394,.3582],[.748,.4441,.3607],[.7498,.4489,.3633],[.7515,.4536,.3659],[.7532,.4584,.3686],[.7548,.4632,.3714],[.7564,.468,.3743],[.758,.4728,.3773],[.7596,.4776,.3804],[.7611,.4824,.3835],[.7626,.4872,.3868],[.764,.492,.3901],[.7655,.4968,.3935],[.7669,.5017,.397],[.7682,.5065,.4006],[.7696,.5113,.4043],[.7709,.5162,.4081],[.7722,.521,.412],[.7734,.5259,.4159],[.7747,.5307,.42],[.7759,.5355,.4241],[.7771,.5404,.4284],[.7783,.5452,.4327],[.7795,.5501,.4371],[.7806,.5549,.4416],[.7817,.5598,.4462],[.7829,.5646,.4509],[.784,.5694,.4557],[.7851,.5742,.4606],[.7862,.5791,.4655],[.7872,.5839,.4706],[.7883,.5887,.4757],[.7894,.5935,.4809],[.7905,.5983,.4862],[.7915,.6031,.4916],[.7926,.6078,.4971],[.7937,.6126,.5026],[.7948,.6174,.5082],[.7958,.6221,.5139],[.7969,.6268,.5196],[.798,.6316,.5255],[.7992,.6363,.5313],[.8003,.641,.5373],[.8014,.6457,.5433],[.8026,.6503,.5494],[.8038,.655,.5556],[.805,.6596,.5618],[.8062,.6643,.568],[.8075,.6689,.5743],[.8087,.6735,.5807],[.81,.678,.5871],[.8114,.6826,.5936],[.8127,.6871,.6001],[.8141,.6916,.6066],[.8155,.6961,.6132],[.8169,.7006,.6198],[.8184,.7051,.6264],[.8199,.7095,.633],[.8214,.7139,.6397],[.8229,.7183,.6464],[.8245,.7226,.6531],[.8261,.727,.6599],[.8278,.7313,.6666],[.8294,.7355,.6733],[.8311,.7398,.6801],[.8328,.744,.6868],[.8346,.7481,.6936],[.8363,.7523,.7003],[.8381,.7564,.707],[.8399,.7604,.7137],[.8417,.7644,.7203],[.8435,.7684,.727],[.8453,.7723,.7336],[.8471,.7761,.7401],[.8489,.7799,.7466],[.8507,.7837,.7531],[.8525,.7873,.7595],[.8543,.791,.7658],[.856,.7945,.7721],[.8578,.798,.7783],[.8594,.8014,.7844],[.8611,.8048,.7904],[.8627,.8081,.7963],[.8642,.8112,.802],[.8656,.8144,.8077],[.8671,.8174,.8131],[.8684,.8203,.8184],[.8697,.8231,.8235],[.8709,.8259,.8284],[.8722,.8285,.833],[.8734,.831,.8375],[.8745,.8333,.8417],[.8757,.8355,.8458],[.8769,.8376,.8496],[.878,.8395,.8533],[.8791,.8413,.8569],[.8802,.8429,.8603],[.8812,.8443,.8636],[.8821,.8456,.8667],[.883,.8467,.8698],[.8837,.8476,.8727],[.8843,.8484,.8756],[.8849,.8491,.8783],[.8853,.8496,.8809],[.8855,.8499,.8834],[.8857,.85,.8857]]},twilight_shifted:{interpolate:!0,colors:[[.1874,.0771,.2162],[.1898,.075,.2193],[.192,.0732,.2224],[.1941,.0716,.2256],[.1961,.0703,.2287],[.1979,.0693,.2319],[.1997,.0686,.2352],[.2016,.068,.2385],[.2035,.0674,.2421],[.2056,.067,.2457],[.2077,.0666,.2495],[.21,.0663,.2535],[.2124,.0661,.2577],[.2148,.0659,.2619],[.2174,.0659,.2663],[.22,.0659,.2709],[.2227,.0659,.2756],[.2255,.0661,.2804],[.2284,.0663,.2854],[.2313,.0666,.2905],[.2343,.0669,.2957],[.2374,.0674,.3011],[.2405,.0679,.3066],[.2437,.0684,.3122],[.2469,.0691,.3179],[.2501,.0698,.3237],[.2534,.0705,.3296],[.2567,.0714,.3356],[.26,.0723,.3417],[.2634,.0733,.3479],[.2667,.0743,.3542],[.2701,.0755,.3606],[.2734,.0767,.367],[.2768,.078,.3735],[.2801,.0794,.3801],[.2834,.0809,.3867],[.2867,.0824,.3933],[.2899,.0841,.4],[.2931,.0859,.4067],[.2963,.0877,.4135],[.2994,.0897,.4202],[.3025,.0918,.427],[.3055,.094,.4337],[.3084,.0963,.4405],[.3113,.0987,.4472],[.3141,.1012,.4539],[.3168,.1039,.4605],[.3195,.1067,.4671],[.322,.1096,.4737],[.3245,.1126,.4802],[.3269,.1158,.4866],[.3292,.1191,.4929],[.3315,.1224,.4992],[.3336,.1259,.5054],[.3357,.1295,.5114],[.3376,.1332,.5174],[.3395,.137,.5233],[.3414,.1409,.5291],[.3431,.1449,.5347],[.3447,.149,.5403],[.3463,.1531,.5458],[.3478,.1573,.5511],[.3492,.1616,.5563],[.3506,.166,.5615],[.3519,.1703,.5665],[.3531,.1748,.5714],[.3543,.1793,.5762],[.3554,.1838,.5809],[.3564,.1884,.5855],[.3574,.193,.59],[.3583,.1976,.5944],[.3592,.2023,.5987],[.36,.2069,.6029],[.3608,.2116,.607],[.3615,.2164,.611],[.3622,.2211,.615],[.3629,.2258,.6188],[.3635,.2306,.6225],[.3641,.2354,.6262],[.3646,.2401,.6298],[.3651,.2449,.6333],[.3656,.2497,.6367],[.366,.2545,.64],[.3664,.2593,.6433],[.3668,.264,.6465],[.3672,.2688,.6496],[.3675,.2736,.6526],[.3678,.2784,.6556],[.3681,.2832,.6585],[.3684,.2879,.6613],[.3687,.2927,.6641],[.369,.2974,.6668],[.3692,.3022,.6695],[.3694,.3069,.6721],[.3697,.3117,.6746],[.3699,.3164,.677],[.3701,.3211,.6794],[.3703,.3258,.6818],[.3705,.3305,.6841],[.3707,.3352,.6863],[.3709,.3399,.6885],[.3712,.3445,.6907],[.3714,.3492,.6927],[.3716,.3538,.6948],[.3719,.3584,.6968],[.3721,.3631,.6987],[.3724,.3677,.7006],[.3726,.3723,.7024],[.3729,.3768,.7042],[.3732,.3814,.706],[.3736,.386,.7077],[.3739,.3905,.7094],[.3743,.395,.711],[.3747,.3996,.7126],[.3751,.4041,.7141],[.3756,.4086,.7156],[.3761,.413,.7171],[.3766,.4175,.7185],[.3772,.4219,.7199],[.3778,.4264,.7213],[.3784,.4308,.7226],[.3791,.4352,.7239],[.3798,.4396,.7251],[.3806,.444,.7264],[.3814,.4484,.7276],[.3822,.4527,.7287],[.3831,.4571,.7298],[.3841,.4614,.7309],[.3851,.4657,.732],[.3861,.47,.7331],[.3872,.4743,.7341],[.3884,.4786,.7351],[.3896,.4828,.736],[.3909,.4871,.737],[.3923,.4913,.7379],[.3937,.4955,.7388],[.3951,.4997,.7397],[.3967,.5039,.7405],[.3983,.5081,.7414],[.3999,.5122,.7422],[.4017,.5164,.743],[.4035,.5205,.7437],[.4053,.5246,.7445],[.4073,.5287,.7452],[.4093,.5328,.746],[.4114,.5368,.7467],[.4135,.5409,.7474],[.4157,.5449,.7481],[.418,.549,.7488],[.4204,.553,.7494],[.4228,.557,.7501],[.4253,.561,.7508],[.4279,.565,.7514],[.4306,.5689,.752],[.4333,.5729,.7527],[.4361,.5768,.7533],[.439,.5807,.7539],[.4419,.5846,.7545],[.4449,.5885,.7551],[.448,.5924,.7557],[.4512,.5962,.7564],[.4544,.6001,.757],[.4577,.6039,.7576],[.4611,.6078,.7582],[.4646,.6116,.7588],[.4681,.6154,.7594],[.4717,.6192,.76],[.4753,.6229,.7607],[.4791,.6267,.7613],[.4829,.6304,.7619],[.4867,.6342,.7626],[.4907,.6379,.7632],[.4947,.6416,.7639],[.4987,.6453,.7645],[.5029,.649,.7652],[.5071,.6526,.7659],[.5114,.6563,.7666],[.5157,.6599,.7673],[.5201,.6636,.7681],[.5246,.6672,.7688],[.5291,.6708,.7696],[.5337,.6744,.7703],[.5383,.678,.7711],[.5431,.6815,.7719],[.5478,.6851,.7728],[.5527,.6886,.7736],[.5576,.6922,.7745],[.5626,.6957,.7754],[.5676,.6992,.7763],[.5727,.7027,.7773],[.5778,.7061,.7783],[.583,.7096,.7793],[.5883,.713,.7803],[.5936,.7165,.7814],[.599,.7199,.7825],[.6044,.7233,.7836],[.6099,.7267,.7847],[.6154,.73,.786],[.621,.7334,.7872],[.6266,.7367,.7885],[.6323,.74,.7898],[.638,.7433,.7912],[.6438,.7466,.7926],[.6496,.7499,.794],[.6554,.7531,.7955],[.6613,.7563,.797],[.6672,.7595,.7986],[.6731,.7627,.8003],[.6791,.7658,.802],[.6851,.769,.8037],[.691,.7721,.8055],[.697,.7752,.8073],[.703,.7782,.8092],[.709,.7813,.8111],[.715,.7843,.8131],[.721,.7872,.8151],[.7269,.7902,.8172],[.7328,.7931,.8193],[.7387,.796,.8214],[.7446,.7988,.8236],[.7504,.8016,.8258],[.7562,.8044,.828],[.7619,.8071,.8303],[.7675,.8098,.8325],[.7731,.8124,.8348],[.7786,.815,.8371],[.784,.8176,.8394],[.7893,.82,.8416],[.7945,.8225,.8439],[.7997,.8248,.8462],[.8047,.8271,.8484],[.8096,.8293,.8506],[.8144,.8315,.8528],[.819,.8335,.855],[.8236,.8355,.8571],[.828,.8374,.8592],[.8322,.8392,.8613],[.8363,.8409,.8633],[.8403,.8426,.8653],[.8441,.8441,.8672],[.8478,.8455,.869],[.8513,.8467,.8709],[.8547,.8479,.8726],[.858,.8489,.8743],[.8611,.8498,.876],[.8641,.8505,.8776],[.867,.8511,.8791],[.8697,.8515,.8805],[.8723,.8518,.8819],[.8749,.8519,.8832],[.8772,.8519,.8843],[.8795,.8517,.8854],[.8817,.8513,.8864],[.8838,.8507,.8872],[.8858,.85,.888],[.8857,.85,.8857],[.8855,.8499,.8834],[.8853,.8496,.8809],[.8849,.8491,.8783],[.8843,.8484,.8756],[.8837,.8476,.8727],[.883,.8467,.8698],[.8821,.8456,.8667],[.8812,.8443,.8636],[.8802,.8429,.8603],[.8791,.8413,.8569],[.878,.8395,.8533],[.8769,.8376,.8496],[.8757,.8355,.8458],[.8745,.8333,.8417],[.8734,.831,.8375],[.8722,.8285,.833],[.8709,.8259,.8284],[.8697,.8231,.8235],[.8684,.8203,.8184],[.8671,.8174,.8131],[.8656,.8144,.8077],[.8642,.8112,.802],[.8627,.8081,.7963],[.8611,.8048,.7904],[.8594,.8014,.7844],[.8578,.798,.7783],[.856,.7945,.7721],[.8543,.791,.7658],[.8525,.7873,.7595],[.8507,.7837,.7531],[.8489,.7799,.7466],[.8471,.7761,.7401],[.8453,.7723,.7336],[.8435,.7684,.727],[.8417,.7644,.7203],[.8399,.7604,.7137],[.8381,.7564,.707],[.8363,.7523,.7003],[.8346,.7481,.6936],[.8328,.744,.6868],[.8311,.7398,.6801],[.8294,.7355,.6733],[.8278,.7313,.6666],[.8261,.727,.6599],[.8245,.7226,.6531],[.8229,.7183,.6464],[.8214,.7139,.6397],[.8199,.7095,.633],[.8184,.7051,.6264],[.8169,.7006,.6198],[.8155,.6961,.6132],[.8141,.6916,.6066],[.8127,.6871,.6001],[.8114,.6826,.5936],[.81,.678,.5871],[.8087,.6735,.5807],[.8075,.6689,.5743],[.8062,.6643,.568],[.805,.6596,.5618],[.8038,.655,.5556],[.8026,.6503,.5494],[.8014,.6457,.5433],[.8003,.641,.5373],[.7992,.6363,.5313],[.798,.6316,.5255],[.7969,.6268,.5196],[.7958,.6221,.5139],[.7948,.6174,.5082],[.7937,.6126,.5026],[.7926,.6078,.4971],[.7915,.6031,.4916],[.7905,.5983,.4862],[.7894,.5935,.4809],[.7883,.5887,.4757],[.7872,.5839,.4706],[.7862,.5791,.4655],[.7851,.5742,.4606],[.784,.5694,.4557],[.7829,.5646,.4509],[.7817,.5598,.4462],[.7806,.5549,.4416],[.7795,.5501,.4371],[.7783,.5452,.4327],[.7771,.5404,.4284],[.7759,.5355,.4241],[.7747,.5307,.42],[.7734,.5259,.4159],[.7722,.521,.412],[.7709,.5162,.4081],[.7696,.5113,.4043],[.7682,.5065,.4006],[.7669,.5017,.397],[.7655,.4968,.3935],[.764,.492,.3901],[.7626,.4872,.3868],[.7611,.4824,.3835],[.7596,.4776,.3804],[.758,.4728,.3773],[.7564,.468,.3743],[.7548,.4632,.3714],[.7532,.4584,.3686],[.7515,.4536,.3659],[.7498,.4489,.3633],[.748,.4441,.3607],[.7463,.4394,.3582],[.7445,.4347,.3558],[.7426,.4299,.3535],[.7407,.4252,.3513],[.7388,.4205,.3491],[.7368,.4159,.347],[.7348,.4112,.345],[.7328,.4065,.3431],[.7307,.4019,.3412],[.7286,.3972,.3395],[.7265,.3926,.3377],[.7243,.388,.3361],[.7221,.3834,.3345],[.7199,.3788,.333],[.7176,.3743,.3315],[.7153,.3697,.3301],[.7129,.3652,.3288],[.7105,.3607,.3275],[.7081,.3561,.3263],[.7057,.3517,.3252],[.7032,.3472,.3241],[.7006,.3427,.3231],[.6981,.3383,.3221],[.6955,.3339,.3211],[.6928,.3295,.3203],[.6901,.3251,.3195],[.6874,.3207,.3187],[.6847,.3163,.318],[.6819,.312,.3173],[.6791,.3077,.3167],[.6762,.3034,.3161],[.6733,.2991,.3155],[.6704,.2949,.315],[.6674,.2906,.3146],[.6644,.2864,.3142],[.6614,.2822,.3138],[.6583,.278,.3135],[.6552,.2739,.3132],[.6521,.2697,.3129],[.6489,.2656,.3127],[.6457,.2616,.3125],[.6424,.2575,.3123],[.6391,.2535,.3122],[.6358,.2494,.3121],[.6324,.2455,.312],[.629,.2415,.312],[.6256,.2376,.312],[.6221,.2337,.312],[.6186,.2298,.312],[.615,.2259,.3121],[.6114,.2221,.3121],[.6078,.2184,.3122],[.6041,.2146,.3123],[.6004,.2109,.3124],[.5966,.2072,.3126],[.5928,.2036,.3127],[.5889,.2,.3129],[.5851,.1964,.3131],[.5811,.1929,.3132],[.5772,.1894,.3134],[.5731,.186,.3136],[.5691,.1826,.3137],[.565,.1792,.3139],[.5608,.1759,.3141],[.5566,.1727,.3142],[.5524,.1695,.3144],[.5481,.1664,.3145],[.5438,.1633,.3146],[.5394,.1602,.3147],[.535,.1573,.3148],[.5305,.1544,.3148],[.526,.1515,.3148],[.5215,.1487,.3148],[.5169,.146,.3148],[.5123,.1433,.3147],[.5076,.1407,.3145],[.5029,.1382,.3144],[.4981,.1357,.3141],[.4934,.1333,.3139],[.4885,.1309,.3135],[.4837,.1286,.3132],[.4788,.1264,.3127],[.4738,.1243,.3123],[.4689,.1222,.3117],[.4639,.1201,.3111],[.4589,.1181,.3104],[.4538,.1162,.3097],[.4488,.1144,.3089],[.4437,.1125,.308],[.4386,.1108,.3071],[.4334,.1091,.3061],[.4283,.1074,.3051],[.4231,.1058,.304],[.418,.1042,.3028],[.4128,.1027,.3015],[.4076,.1012,.3002],[.4024,.0997,.2989],[.3972,.0983,.2974],[.392,.0969,.296],[.3868,.0956,.2944],[.3816,.0942,.2928],[.3764,.0929,.2912],[.3712,.0917,.2895],[.3661,.0904,.2877],[.3609,.0892,.2859],[.3557,.088,.2841],[.3506,.0869,.2822],[.3455,.0857,.2803],[.3404,.0846,.2783],[.3353,.0835,.2763],[.3303,.0825,.2743],[.3253,.0814,.2723],[.3203,.0804,.2702],[.3154,.0794,.2681],[.3105,.0785,.266],[.3056,.0775,.2639],[.3008,.0766,.2618],[.296,.0757,.2597],[.2913,.0749,.2576],[.2866,.0741,.2554],[.282,.0733,.2533],[.2775,.0726,.2512],[.273,.0719,.2492],[.2686,.0712,.2471],[.2643,.0706,.2451],[.26,.0701,.2431],[.2558,.0695,.2411],[.2517,.0691,.2392],[.2477,.0687,.2373],[.2438,.0683,.2355],[.24,.068,.2337],[.2363,.0677,.232],[.2327,.0676,.2304],[.2292,.0674,.2288],[.2258,.0674,.2273],[.2225,.0674,.2259],[.2193,.0675,.2245],[.2163,.0676,.2232],[.2133,.0678,.2221],[.2105,.0681,.221],[.2079,.0685,.22],[.2053,.0689,.2191],[.2029,.0694,.2183],[.2006,.0701,.2176],[.1982,.071,.2169],[.1957,.0722,.2162],[.1932,.0736,.2154],[.1905,.0753,.2147],[.1877,.0773,.2139],[.1849,.0794,.2131]]},viridis:{interpolate:!0,colors:[[.267,.0049,.3294],[.2685,.0096,.3354],[.2699,.0146,.3414],[.2713,.0199,.3473],[.2726,.0256,.3531],[.2738,.0315,.3589],[.275,.0378,.3645],[.276,.0442,.3702],[.277,.0503,.3757],[.2779,.0563,.3812],[.2788,.0621,.3866],[.2796,.0678,.3919],[.2803,.0734,.3972],[.2809,.0789,.4023],[.2814,.0843,.4074],[.2819,.0897,.4124],[.2823,.095,.4173],[.2827,.1002,.4222],[.2829,.1054,.4269],[.2831,.1106,.4316],[.2832,.1157,.4361],[.2832,.1208,.4406],[.2832,.1258,.445],[.2831,.1309,.4492],[.2829,.1359,.4534],[.2826,.1409,.4575],[.2823,.1459,.4615],[.2819,.1509,.4654],[.2814,.1558,.4692],[.2809,.1608,.4729],[.2803,.1657,.4765],[.2796,.1706,.48],[.2788,.1755,.4834],[.278,.1804,.4867],[.2771,.1852,.4899],[.2762,.1901,.493],[.2752,.1949,.496],[.2741,.1997,.4989],[.273,.2045,.5017],[.2718,.2093,.5044],[.2706,.2141,.5071],[.2693,.2188,.5096],[.268,.2235,.512],[.2666,.2283,.5143],[.2651,.233,.5166],[.2637,.2376,.5188],[.2621,.2423,.5208],[.2606,.2469,.5228],[.259,.2515,.5247],[.2573,.2561,.5266],[.2556,.2607,.5283],[.2539,.2653,.53],[.2522,.2698,.5316],[.2504,.2743,.5331],[.2486,.2788,.5346],[.2468,.2832,.5359],[.245,.2877,.5373],[.2431,.2921,.5385],[.2412,.2965,.5397],[.2393,.3009,.5408],[.2374,.3052,.5419],[.2355,.3095,.5429],[.2336,.3138,.5439],[.2317,.3181,.5448],[.2297,.3224,.5457],[.2278,.3266,.5465],[.2259,.3308,.5473],[.2239,.335,.5481],[.222,.3392,.5488],[.2201,.3433,.5494],[.2181,.3474,.55],[.2162,.3515,.5506],[.2143,.3556,.5512],[.2124,.3597,.5517],[.2105,.3637,.5522],[.2086,.3678,.5527],[.2068,.3718,.5531],[.2049,.3757,.5535],[.2031,.3797,.5539],[.2012,.3837,.5543],[.1994,.3876,.5546],[.1976,.3915,.555],[.1959,.3954,.5553],[.1941,.3993,.5556],[.1924,.4032,.5558],[.1906,.4071,.5561],[.1889,.4109,.5563],[.1872,.4147,.5565],[.1856,.4186,.5568],[.1839,.4224,.5569],[.1823,.4262,.5571],[.1806,.43,.5573],[.179,.4338,.5574],[.1774,.4375,.5576],[.1758,.4413,.5577],[.1743,.445,.5578],[.1727,.4488,.5579],[.1712,.4525,.558],[.1696,.4563,.558],[.1681,.46,.5581],[.1666,.4637,.5581],[.1651,.4674,.5581],[.1636,.4711,.5581],[.1621,.4748,.5581],[.1607,.4785,.5581],[.1592,.4822,.5581],[.1577,.4859,.558],[.1563,.4896,.5579],[.1548,.4933,.5578],[.1534,.497,.5577],[.1519,.5007,.5576],[.1505,.5044,.5574],[.149,.5081,.5572],[.1476,.5117,.557],[.1462,.5154,.5568],[.1448,.5191,.5566],[.1433,.5228,.5563],[.1419,.5265,.556],[.1405,.5301,.5557],[.1391,.5338,.5553],[.1378,.5375,.5549],[.1364,.5412,.5545],[.1351,.5449,.554],[.1337,.5485,.5535],[.1324,.5522,.553],[.1312,.5559,.5525],[.1299,.5596,.5519],[.1287,.5633,.5512],[.1276,.5669,.5506],[.1265,.5706,.5498],[.1254,.5743,.5491],[.1244,.578,.5483],[.1235,.5817,.5474],[.1226,.5854,.5466],[.1218,.5891,.5456],[.1211,.5927,.5446],[.1206,.5964,.5436],[.1201,.6001,.5425],[.1197,.6038,.5414],[.1195,.6075,.5402],[.1194,.6111,.539],[.1195,.6148,.5377],[.1197,.6185,.5363],[.1201,.6222,.5349],[.1206,.6258,.5335],[.1214,.6295,.532],[.1223,.6332,.5304],[.1234,.6368,.5288],[.1248,.6405,.5271],[.1263,.6441,.5253],[.1281,.6477,.5235],[.1301,.6514,.5216],[.1323,.655,.5197],[.1347,.6586,.5176],[.1373,.6623,.5156],[.1402,.6659,.5134],[.1433,.6695,.5112],[.1466,.673,.5089],[.1501,.6766,.5066],[.1539,.6802,.5042],[.1579,.6838,.5017],[.162,.6873,.4991],[.1664,.6909,.4965],[.1709,.6944,.4938],[.1757,.6979,.491],[.1807,.7014,.4882],[.1858,.7049,.4853],[.1911,.7084,.4823],[.1966,.7118,.4792],[.2022,.7153,.4761],[.208,.7187,.4729],[.214,.7221,.4696],[.2201,.7255,.4662],[.2264,.7289,.4628],[.2328,.7322,.4593],[.2394,.7356,.4557],[.2461,.7389,.452],[.2529,.7422,.4483],[.2599,.7455,.4445],[.2669,.7488,.4406],[.2741,.752,.4366],[.2815,.7552,.4326],[.2889,.7584,.4284],[.2965,.7616,.4242],[.3041,.7647,.4199],[.3119,.7678,.4156],[.3198,.7709,.4112],[.3278,.774,.4066],[.3359,.777,.402],[.3441,.78,.3974],[.3524,.783,.3926],[.3607,.786,.3878],[.3692,.7889,.3829],[.3778,.7918,.3779],[.3864,.7946,.3729],[.3952,.7975,.3678],[.404,.8003,.3626],[.4129,.803,.3573],[.4219,.8058,.3519],[.431,.8085,.3465],[.4401,.8111,.341],[.4494,.8138,.3354],[.4587,.8164,.3297],[.4681,.8189,.324],[.4775,.8214,.3182],[.487,.8239,.3123],[.4966,.8264,.3064],[.5063,.8288,.3004],[.516,.8312,.2943],[.5258,.8335,.2881],[.5356,.8358,.2819],[.5455,.838,.2756],[.5555,.8403,.2693],[.5655,.8424,.2629],[.5756,.8446,.2564],[.5857,.8467,.2499],[.5958,.8487,.2433],[.606,.8507,.2367],[.6163,.8527,.2301],[.6266,.8546,.2234],[.6369,.8565,.2166],[.6473,.8584,.2099],[.6576,.8602,.2031],[.6681,.862,.1963],[.6785,.8637,.1895],[.6889,.8654,.1827],[.6994,.8671,.176],[.7099,.8688,.1693],[.7204,.8704,.1626],[.7309,.8719,.156],[.7414,.8734,.1496],[.7519,.875,.1432],[.7624,.8764,.1371],[.7729,.8779,.1311],[.7833,.8793,.1254],[.7938,.8807,.12],[.8042,.882,.115],[.8146,.8834,.1103],[.8249,.8847,.1062],[.8353,.886,.1026],[.8456,.8873,.0997],[.8558,.8886,.0975],[.866,.8899,.096],[.8762,.8911,.0952],[.8863,.8924,.0954],[.8963,.8936,.0963],[.9063,.8949,.0981],[.9162,.8961,.1007],[.9261,.8973,.1041],[.9359,.8986,.1081],[.9456,.8998,.1128],[.9553,.9011,.1181],[.9649,.9023,.1239],[.9744,.9036,.1302],[.9839,.9049,.1369],[.9932,.9062,.1439]]},winter:{interpolate:!0,colors:[[0,0,1],[0,.0039,.998],[0,.0078,.9961],[0,.0118,.9941],[0,.0157,.9922],[0,.0196,.9902],[0,.0235,.9882],[0,.0275,.9863],[0,.0314,.9843],[0,.0353,.9824],[0,.0392,.9804],[0,.0431,.9784],[0,.0471,.9765],[0,.051,.9745],[0,.0549,.9725],[0,.0588,.9706],[0,.0627,.9686],[0,.0667,.9667],[0,.0706,.9647],[0,.0745,.9627],[0,.0784,.9608],[0,.0824,.9588],[0,.0863,.9569],[0,.0902,.9549],[0,.0941,.9529],[0,.098,.951],[0,.102,.949],[0,.1059,.9471],[0,.1098,.9451],[0,.1137,.9431],[0,.1176,.9412],[0,.1216,.9392],[0,.1255,.9373],[0,.1294,.9353],[0,.1333,.9333],[0,.1373,.9314],[0,.1412,.9294],[0,.1451,.9275],[0,.149,.9255],[0,.1529,.9235],[0,.1569,.9216],[0,.1608,.9196],[0,.1647,.9176],[0,.1686,.9157],[0,.1725,.9137],[0,.1765,.9118],[0,.1804,.9098],[0,.1843,.9078],[0,.1882,.9059],[0,.1922,.9039],[0,.1961,.902],[0,.2,.9],[0,.2039,.898],[0,.2078,.8961],[0,.2118,.8941],[0,.2157,.8922],[0,.2196,.8902],[0,.2235,.8882],[0,.2275,.8863],[0,.2314,.8843],[0,.2353,.8824],[0,.2392,.8804],[0,.2431,.8784],[0,.2471,.8765],[0,.251,.8745],[0,.2549,.8725],[0,.2588,.8706],[0,.2627,.8686],[0,.2667,.8667],[0,.2706,.8647],[0,.2745,.8627],[0,.2784,.8608],[0,.2824,.8588],[0,.2863,.8569],[0,.2902,.8549],[0,.2941,.8529],[0,.298,.851],[0,.302,.849],[0,.3059,.8471],[0,.3098,.8451],[0,.3137,.8431],[0,.3176,.8412],[0,.3216,.8392],[0,.3255,.8373],[0,.3294,.8353],[0,.3333,.8333],[0,.3373,.8314],[0,.3412,.8294],[0,.3451,.8275],[0,.349,.8255],[0,.3529,.8235],[0,.3569,.8216],[0,.3608,.8196],[0,.3647,.8176],[0,.3686,.8157],[0,.3725,.8137],[0,.3765,.8118],[0,.3804,.8098],[0,.3843,.8078],[0,.3882,.8059],[0,.3922,.8039],[0,.3961,.802],[0,.4,.8],[0,.4039,.798],[0,.4078,.7961],[0,.4118,.7941],[0,.4157,.7922],[0,.4196,.7902],[0,.4235,.7882],[0,.4275,.7863],[0,.4314,.7843],[0,.4353,.7824],[0,.4392,.7804],[0,.4431,.7784],[0,.4471,.7765],[0,.451,.7745],[0,.4549,.7725],[0,.4588,.7706],[0,.4627,.7686],[0,.4667,.7667],[0,.4706,.7647],[0,.4745,.7627],[0,.4784,.7608],[0,.4824,.7588],[0,.4863,.7569],[0,.4902,.7549],[0,.4941,.7529],[0,.498,.751],[0,.502,.749],[0,.5059,.7471],[0,.5098,.7451],[0,.5137,.7431],[0,.5176,.7412],[0,.5216,.7392],[0,.5255,.7373],[0,.5294,.7353],[0,.5333,.7333],[0,.5373,.7314],[0,.5412,.7294],[0,.5451,.7275],[0,.549,.7255],[0,.5529,.7235],[0,.5569,.7216],[0,.5608,.7196],[0,.5647,.7176],[0,.5686,.7157],[0,.5725,.7137],[0,.5765,.7118],[0,.5804,.7098],[0,.5843,.7078],[0,.5882,.7059],[0,.5922,.7039],[0,.5961,.702],[0,.6,.7],[0,.6039,.698],[0,.6078,.6961],[0,.6118,.6941],[0,.6157,.6922],[0,.6196,.6902],[0,.6235,.6882],[0,.6275,.6863],[0,.6314,.6843],[0,.6353,.6824],[0,.6392,.6804],[0,.6431,.6784],[0,.6471,.6765],[0,.651,.6745],[0,.6549,.6725],[0,.6588,.6706],[0,.6627,.6686],[0,.6667,.6667],[0,.6706,.6647],[0,.6745,.6627],[0,.6784,.6608],[0,.6824,.6588],[0,.6863,.6569],[0,.6902,.6549],[0,.6941,.6529],[0,.698,.651],[0,.702,.649],[0,.7059,.6471],[0,.7098,.6451],[0,.7137,.6431],[0,.7176,.6412],[0,.7216,.6392],[0,.7255,.6373],[0,.7294,.6353],[0,.7333,.6333],[0,.7373,.6314],[0,.7412,.6294],[0,.7451,.6275],[0,.749,.6255],[0,.7529,.6235],[0,.7569,.6216],[0,.7608,.6196],[0,.7647,.6176],[0,.7686,.6157],[0,.7725,.6137],[0,.7765,.6118],[0,.7804,.6098],[0,.7843,.6078],[0,.7882,.6059],[0,.7922,.6039],[0,.7961,.602],[0,.8,.6],[0,.8039,.598],[0,.8078,.5961],[0,.8118,.5941],[0,.8157,.5922],[0,.8196,.5902],[0,.8235,.5882],[0,.8275,.5863],[0,.8314,.5843],[0,.8353,.5824],[0,.8392,.5804],[0,.8431,.5784],[0,.8471,.5765],[0,.851,.5745],[0,.8549,.5725],[0,.8588,.5706],[0,.8627,.5686],[0,.8667,.5667],[0,.8706,.5647],[0,.8745,.5627],[0,.8784,.5608],[0,.8824,.5588],[0,.8863,.5569],[0,.8902,.5549],[0,.8941,.5529],[0,.898,.551],[0,.902,.549],[0,.9059,.5471],[0,.9098,.5451],[0,.9137,.5431],[0,.9176,.5412],[0,.9216,.5392],[0,.9255,.5373],[0,.9294,.5353],[0,.9333,.5333],[0,.9373,.5314],[0,.9412,.5294],[0,.9451,.5275],[0,.949,.5255],[0,.9529,.5235],[0,.9569,.5216],[0,.9608,.5196],[0,.9647,.5176],[0,.9686,.5157],[0,.9725,.5137],[0,.9765,.5118],[0,.9804,.5098],[0,.9843,.5078],[0,.9882,.5059],[0,.9922,.5039],[0,.9961,.502],[0,1,.5]]}};F("Accent");F("Accent_r");F("Blues");F("Blues_r");F("BrBG");F("BrBG_r");F("BuGn");F("BuGn_r");F("BuPu");F("BuPu_r");F("CMRmap");F("CMRmap_r");F("Dark2");F("Dark2_r");F("GnBu");F("GnBu_r");F("Greens");F("Greens_r");F("Greys");F("Greys_r");F("OrRd");F("OrRd_r");F("Oranges");F("Oranges_r");F("PRGn");F("PRGn_r");F("Paired");F("Paired_r");F("Pastel1");F("Pastel1_r");F("Pastel2");F("Pastel2_r");F("PiYG");F("PiYG_r");F("PuBu");F("PuBu_r");F("PuBuGn");F("PuBuGn_r");F("PuOr");F("PuOr_r");F("PuRd");F("PuRd_r");F("Purples");F("Purples_r");F("RdBu");F("RdBu_r");F("RdGy");F("RdGy_r");F("RdPu");F("RdPu_r");F("RdYlBu");F("RdYlBu_r");F("RdYlGn");F("RdYlGn_r");F("Reds");F("Reds_r");F("Set1");F("Set1_r");F("Set2");F("Set2_r");F("Set3");F("Set3_r");F("Spectral");F("Spectral_r");F("Wistia");F("Wistia_r");F("YlGn");F("YlGn_r");F("YlGnBu");F("YlGnBu_r");F("YlOrBr");F("YlOrBr_r");F("YlOrRd");F("YlOrRd_r");F("afmhot");F("afmhot_r");F("autumn");F("autumn_r");F("binary");F("binary_r");F("bone");F("bone_r");F("brg");F("brg_r");F("bwr");F("bwr_r");F("cividis");F("cividis_r");F("cool");F("cool_r");F("coolwarm");F("coolwarm_r");F("copper");F("copper_r");F("cubehelix");F("cubehelix_r");F("flag");F("flag_r");F("gist_earth");F("gist_earth_r");F("gist_gray");F("gist_gray_r");F("gist_heat");F("gist_heat_r");F("gist_ncar");F("gist_ncar_r");F("gist_rainbow");F("gist_rainbow_r");F("gist_stern");F("gist_stern_r");F("gist_yarg");F("gist_yarg_r");F("gnuplot");F("gnuplot_r");F("gnuplot2");F("gnuplot2_r");F("gray");F("gray_r");F("hot");F("hot_r");F("hsv");F("hsv_r");F("inferno");F("inferno_r");F("jet");F("jet_r");F("magma");F("magma_r");F("nipy_spectral");F("nipy_spectral_r");F("ocean");F("ocean_r");F("pink");F("pink_r");F("plasma");F("plasma_r");F("prism");F("prism_r");F("rainbow");F("rainbow_r");F("seismic");F("seismic_r");F("spring");F("spring_r");F("summer");F("summer_r");F("tab10");F("tab10_r");F("tab20");F("tab20_r");F("tab20b");F("tab20b_r");F("tab20c");F("tab20c_r");F("terrain");F("terrain_r");F("turbo");F("turbo_r");F("twilight");F("twilight_r");F("twilight_shifted");F("twilight_shifted_r");F("viridis");F("viridis_r");F("winter");F("winter_r");function u9(n,t,e){0<=n&&n<=1||alert("Illegal value for x! Must be in [0, 1]."),t in M1||alert("Colormap "+t+"does not exist!"),e===!0&&(n=1-n);let i=M1[t].colors;return M1[t].interpolate===!0?D8(n,i):U8(n,i)}function D8(n,t){let e=Math.floor(n*(t.length-1)),i=Math.ceil(n*(t.length-1)),r=Math.round((t[e][0]+t[i][0])/2*255),s=Math.round((t[e][1]+t[i][1])/2*255),a=Math.round((t[e][2]+t[i][2])/2*255);return[r,s,a]}function U8(n,t){let e=0;for(;n>(e+1)/(t.length-0);)e++;let i=Math.round(t[e][0]*255),r=Math.round(t[e][1]*255),s=Math.round(t[e][2]*255);return[i,r,s]}function F(n){return n.endsWith("_r")?function(t){return u9(t,n.substring(0,n.length-2),!0)}:function(t){return u9(t,n,!1)}}/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const nr="169",Pn={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},I8=0,xr=1,N8=2,Bs=1,F8=2,Me=3,He=0,Ht=1,fe=2,Be=0,Ln=1,Sr=2,Mr=3,yr=4,O8=5,$e=100,B8=101,z8=102,H8=103,G8=104,V8=200,k8=201,W8=202,X8=203,h9=204,f9=205,q8=206,Y8=207,j8=208,Z8=209,K8=210,$8=211,J8=212,Q8=213,t2=214,d9=0,p9=1,m9=2,In=3,_9=4,g9=5,v9=6,x9=7,zs=0,e2=1,n2=2,ze=0,i2=1,r2=2,s2=3,a2=4,o2=5,l2=6,c2=7,Hs=300,Nn=301,Fn=302,S9=303,M9=304,p1=306,y9=1e3,Qe=1001,E9=1002,Kt=1003,u2=1004,ui=1005,re=1006,y1=1007,tn=1008,Ae=1009,Gs=1010,Vs=1011,ri=1012,ir=1013,nn=1014,ye=1015,oi=1016,rr=1017,sr=1018,On=1020,ks=35902,Ws=1021,Xs=1022,ae=1023,qs=1024,Ys=1025,Dn=1026,Bn=1027,js=1028,ar=1029,Zs=1030,or=1031,lr=1033,Zi=33776,Ki=33777,$i=33778,Ji=33779,b9=35840,A9=35841,T9=35842,w9=35843,C9=36196,R9=37492,P9=37496,L9=37808,D9=37809,U9=37810,I9=37811,N9=37812,F9=37813,O9=37814,B9=37815,z9=37816,H9=37817,G9=37818,V9=37819,k9=37820,W9=37821,Qi=36492,X9=36494,q9=36495,Ks=36283,Y9=36284,j9=36285,Z9=36286,h2=3200,f2=3201,$s=0,d2=1,Oe="",he="srgb",Ge="srgb-linear",cr="display-p3",m1="display-p3-linear",s1="linear",pt="srgb",a1="rec709",o1="p3",ln=7680,Er=519,p2=512,m2=513,_2=514,Js=515,g2=516,v2=517,x2=518,S2=519,K9=35044,br="300 es",Ee=2e3,l1=2001;class sn{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const i=this._listeners;i[t]===void 0&&(i[t]=[]),i[t].indexOf(e)===-1&&i[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const i=this._listeners;return i[t]!==void 0&&i[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const r=this._listeners[t];if(r!==void 0){const s=r.indexOf(e);s!==-1&&r.splice(s,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const i=this._listeners[t.type];if(i!==void 0){t.target=this;const r=i.slice(0);for(let s=0,a=r.length;s<a;s++)r[s].call(this,t);t.target=null}}}const Lt=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let Ar=1234567;const ni=Math.PI/180,si=180/Math.PI;function be(){const n=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,i=Math.random()*4294967295|0;return(Lt[n&255]+Lt[n>>8&255]+Lt[n>>16&255]+Lt[n>>24&255]+"-"+Lt[t&255]+Lt[t>>8&255]+"-"+Lt[t>>16&15|64]+Lt[t>>24&255]+"-"+Lt[e&63|128]+Lt[e>>8&255]+"-"+Lt[e>>16&255]+Lt[e>>24&255]+Lt[i&255]+Lt[i>>8&255]+Lt[i>>16&255]+Lt[i>>24&255]).toLowerCase()}function It(n,t,e){return Math.max(t,Math.min(e,n))}function ur(n,t){return(n%t+t)%t}function M2(n,t,e,i,r){return i+(n-t)*(r-i)/(e-t)}function y2(n,t,e){return n!==t?(e-n)/(t-n):0}function ii(n,t,e){return(1-e)*n+e*t}function E2(n,t,e,i){return ii(n,t,1-Math.exp(-e*i))}function b2(n,t=1){return t-Math.abs(ur(n,t*2)-t)}function A2(n,t,e){return n<=t?0:n>=e?1:(n=(n-t)/(e-t),n*n*(3-2*n))}function T2(n,t,e){return n<=t?0:n>=e?1:(n=(n-t)/(e-t),n*n*n*(n*(n*6-15)+10))}function w2(n,t){return n+Math.floor(Math.random()*(t-n+1))}function C2(n,t){return n+Math.random()*(t-n)}function R2(n){return n*(.5-Math.random())}function P2(n){n!==void 0&&(Ar=n);let t=Ar+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function L2(n){return n*ni}function D2(n){return n*si}function U2(n){return(n&n-1)===0&&n!==0}function I2(n){return Math.pow(2,Math.ceil(Math.log(n)/Math.LN2))}function N2(n){return Math.pow(2,Math.floor(Math.log(n)/Math.LN2))}function F2(n,t,e,i,r){const s=Math.cos,a=Math.sin,o=s(e/2),l=a(e/2),c=s((t+i)/2),h=a((t+i)/2),p=s((t-i)/2),f=a((t-i)/2),m=s((i-t)/2),g=a((i-t)/2);switch(r){case"XYX":n.set(o*h,l*p,l*f,o*c);break;case"YZY":n.set(l*f,o*h,l*p,o*c);break;case"ZXZ":n.set(l*p,l*f,o*h,o*c);break;case"XZX":n.set(o*h,l*g,l*m,o*c);break;case"YXY":n.set(l*m,o*h,l*g,o*c);break;case"ZYZ":n.set(l*g,l*m,o*h,o*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+r)}}function se(n,t){switch(t.constructor){case Float32Array:return n;case Uint32Array:return n/4294967295;case Uint16Array:return n/65535;case Uint8Array:return n/255;case Int32Array:return Math.max(n/2147483647,-1);case Int16Array:return Math.max(n/32767,-1);case Int8Array:return Math.max(n/127,-1);default:throw new Error("Invalid component type.")}}function at(n,t){switch(t.constructor){case Float32Array:return n;case Uint32Array:return Math.round(n*4294967295);case Uint16Array:return Math.round(n*65535);case Uint8Array:return Math.round(n*255);case Int32Array:return Math.round(n*2147483647);case Int16Array:return Math.round(n*32767);case Int8Array:return Math.round(n*127);default:throw new Error("Invalid component type.")}}const $9={DEG2RAD:ni,RAD2DEG:si,generateUUID:be,clamp:It,euclideanModulo:ur,mapLinear:M2,inverseLerp:y2,lerp:ii,damp:E2,pingpong:b2,smoothstep:A2,smootherstep:T2,randInt:w2,randFloat:C2,randFloatSpread:R2,seededRandom:P2,degToRad:L2,radToDeg:D2,isPowerOfTwo:U2,ceilPowerOfTwo:I2,floorPowerOfTwo:N2,setQuaternionFromProperEuler:F2,normalize:at,denormalize:se};class F0{constructor(t=0,e=0){F0.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,i=this.y,r=t.elements;return this.x=r[0]*e+r[3]*i+r[6],this.y=r[1]*e+r[4]*i+r[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const i=this.dot(t)/e;return Math.acos(It(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y;return e*e+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const i=Math.cos(e),r=Math.sin(e),s=this.x-t.x,a=this.y-t.y;return this.x=s*i-a*r+t.x,this.y=s*r+a*i+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class H0{constructor(t,e,i,r,s,a,o,l,c){H0.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,i,r,s,a,o,l,c)}set(t,e,i,r,s,a,o,l,c){const h=this.elements;return h[0]=t,h[1]=r,h[2]=o,h[3]=e,h[4]=s,h[5]=l,h[6]=i,h[7]=a,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this}extractBasis(t,e,i){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,r=e.elements,s=this.elements,a=i[0],o=i[3],l=i[6],c=i[1],h=i[4],p=i[7],f=i[2],m=i[5],g=i[8],x=r[0],u=r[3],d=r[6],A=r[1],y=r[4],T=r[7],G=r[2],D=r[5],w=r[8];return s[0]=a*x+o*A+l*G,s[3]=a*u+o*y+l*D,s[6]=a*d+o*T+l*w,s[1]=c*x+h*A+p*G,s[4]=c*u+h*y+p*D,s[7]=c*d+h*T+p*w,s[2]=f*x+m*A+g*G,s[5]=f*u+m*y+g*D,s[8]=f*d+m*T+g*w,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[1],r=t[2],s=t[3],a=t[4],o=t[5],l=t[6],c=t[7],h=t[8];return e*a*h-e*o*c-i*s*h+i*o*l+r*s*c-r*a*l}invert(){const t=this.elements,e=t[0],i=t[1],r=t[2],s=t[3],a=t[4],o=t[5],l=t[6],c=t[7],h=t[8],p=h*a-o*c,f=o*l-h*s,m=c*s-a*l,g=e*p+i*f+r*m;if(g===0)return this.set(0,0,0,0,0,0,0,0,0);const x=1/g;return t[0]=p*x,t[1]=(r*c-h*i)*x,t[2]=(o*i-r*a)*x,t[3]=f*x,t[4]=(h*e-r*l)*x,t[5]=(r*s-o*e)*x,t[6]=m*x,t[7]=(i*l-c*e)*x,t[8]=(a*e-i*s)*x,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,i,r,s,a,o){const l=Math.cos(s),c=Math.sin(s);return this.set(i*l,i*c,-i*(l*a+c*o)+a+t,-r*c,r*l,-r*(-c*a+l*o)+o+e,0,0,1),this}scale(t,e){return this.premultiply(E1.makeScale(t,e)),this}rotate(t){return this.premultiply(E1.makeRotation(-t)),this}translate(t,e){return this.premultiply(E1.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,i,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,i=t.elements;for(let r=0;r<9;r++)if(e[r]!==i[r])return!1;return!0}fromArray(t,e=0){for(let i=0;i<9;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const E1=new H0;function Qs(n){for(let t=n.length-1;t>=0;--t)if(n[t]>=65535)return!0;return!1}function c1(n){return document.createElementNS("http://www.w3.org/1999/xhtml",n)}function O2(){const n=c1("canvas");return n.style.display="block",n}const Tr={};function t1(n){n in Tr||(Tr[n]=!0,console.warn(n))}function B2(n,t,e){return new Promise(function(i,r){function s(){switch(n.clientWaitSync(t,n.SYNC_FLUSH_COMMANDS_BIT,0)){case n.WAIT_FAILED:r();break;case n.TIMEOUT_EXPIRED:setTimeout(s,e);break;default:i()}}setTimeout(s,e)})}function z2(n){const t=n.elements;t[2]=.5*t[2]+.5*t[3],t[6]=.5*t[6]+.5*t[7],t[10]=.5*t[10]+.5*t[11],t[14]=.5*t[14]+.5*t[15]}function H2(n){const t=n.elements;t[11]===-1?(t[10]=-t[10]-1,t[14]=-t[14]):(t[10]=-t[10],t[14]=-t[14]+1)}const wr=new H0().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),Cr=new H0().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),Xn={[Ge]:{transfer:s1,primaries:a1,luminanceCoefficients:[.2126,.7152,.0722],toReference:n=>n,fromReference:n=>n},[he]:{transfer:pt,primaries:a1,luminanceCoefficients:[.2126,.7152,.0722],toReference:n=>n.convertSRGBToLinear(),fromReference:n=>n.convertLinearToSRGB()},[m1]:{transfer:s1,primaries:o1,luminanceCoefficients:[.2289,.6917,.0793],toReference:n=>n.applyMatrix3(Cr),fromReference:n=>n.applyMatrix3(wr)},[cr]:{transfer:pt,primaries:o1,luminanceCoefficients:[.2289,.6917,.0793],toReference:n=>n.convertSRGBToLinear().applyMatrix3(Cr),fromReference:n=>n.applyMatrix3(wr).convertLinearToSRGB()}},G2=new Set([Ge,m1]),rt={enabled:!0,_workingColorSpace:Ge,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(n){if(!G2.has(n))throw new Error(`Unsupported working color space, "${n}".`);this._workingColorSpace=n},convert:function(n,t,e){if(this.enabled===!1||t===e||!t||!e)return n;const i=Xn[t].toReference,r=Xn[e].fromReference;return r(i(n))},fromWorkingColorSpace:function(n,t){return this.convert(n,this._workingColorSpace,t)},toWorkingColorSpace:function(n,t){return this.convert(n,t,this._workingColorSpace)},getPrimaries:function(n){return Xn[n].primaries},getTransfer:function(n){return n===Oe?s1:Xn[n].transfer},getLuminanceCoefficients:function(n,t=this._workingColorSpace){return n.fromArray(Xn[t].luminanceCoefficients)}};function Un(n){return n<.04045?n*.0773993808:Math.pow(n*.9478672986+.0521327014,2.4)}function b1(n){return n<.0031308?n*12.92:1.055*Math.pow(n,.41666)-.055}let cn;class V2{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{cn===void 0&&(cn=c1("canvas")),cn.width=t.width,cn.height=t.height;const i=cn.getContext("2d");t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,t.width,t.height),e=cn}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=c1("canvas");e.width=t.width,e.height=t.height;const i=e.getContext("2d");i.drawImage(t,0,0,t.width,t.height);const r=i.getImageData(0,0,t.width,t.height),s=r.data;for(let a=0;a<s.length;a++)s[a]=Un(s[a]/255)*255;return i.putImageData(r,0,0),e}else if(t.data){const e=t.data.slice(0);for(let i=0;i<e.length;i++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[i]=Math.floor(Un(e[i]/255)*255):e[i]=Un(e[i]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let k2=0;class t8{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:k2++}),this.uuid=be(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const i={uuid:this.uuid,url:""},r=this.data;if(r!==null){let s;if(Array.isArray(r)){s=[];for(let a=0,o=r.length;a<o;a++)r[a].isDataTexture?s.push(A1(r[a].image)):s.push(A1(r[a]))}else s=A1(r);i.url=s}return e||(t.images[this.uuid]=i),i}}function A1(n){return typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&n instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&n instanceof ImageBitmap?V2.getDataURL(n):n.data?{data:Array.from(n.data),width:n.width,height:n.height,type:n.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let W2=0;class Bt extends sn{constructor(t=Bt.DEFAULT_IMAGE,e=Bt.DEFAULT_MAPPING,i=Qe,r=Qe,s=re,a=tn,o=ae,l=Ae,c=Bt.DEFAULT_ANISOTROPY,h=Oe){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:W2++}),this.uuid=be(),this.name="",this.source=new t8(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=i,this.wrapT=r,this.magFilter=s,this.minFilter=a,this.anisotropy=c,this.format=o,this.internalFormat=null,this.type=l,this.offset=new F0(0,0),this.repeat=new F0(1,1),this.center=new F0(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new H0,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=h,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const i={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(i.userData=this.userData),e||(t.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==Hs)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case y9:t.x=t.x-Math.floor(t.x);break;case Qe:t.x=t.x<0?0:1;break;case E9:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case y9:t.y=t.y-Math.floor(t.y);break;case Qe:t.y=t.y<0?0:1;break;case E9:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}}Bt.DEFAULT_IMAGE=null;Bt.DEFAULT_MAPPING=Hs;Bt.DEFAULT_ANISOTROPY=1;class ut{constructor(t=0,e=0,i=0,r=1){ut.prototype.isVector4=!0,this.x=t,this.y=e,this.z=i,this.w=r}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,i,r){return this.x=t,this.y=e,this.z=i,this.w=r,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,i=this.y,r=this.z,s=this.w,a=t.elements;return this.x=a[0]*e+a[4]*i+a[8]*r+a[12]*s,this.y=a[1]*e+a[5]*i+a[9]*r+a[13]*s,this.z=a[2]*e+a[6]*i+a[10]*r+a[14]*s,this.w=a[3]*e+a[7]*i+a[11]*r+a[15]*s,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,i,r,s;const l=t.elements,c=l[0],h=l[4],p=l[8],f=l[1],m=l[5],g=l[9],x=l[2],u=l[6],d=l[10];if(Math.abs(h-f)<.01&&Math.abs(p-x)<.01&&Math.abs(g-u)<.01){if(Math.abs(h+f)<.1&&Math.abs(p+x)<.1&&Math.abs(g+u)<.1&&Math.abs(c+m+d-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const y=(c+1)/2,T=(m+1)/2,G=(d+1)/2,D=(h+f)/4,w=(p+x)/4,O=(g+u)/4;return y>T&&y>G?y<.01?(i=0,r=.707106781,s=.707106781):(i=Math.sqrt(y),r=D/i,s=w/i):T>G?T<.01?(i=.707106781,r=0,s=.707106781):(r=Math.sqrt(T),i=D/r,s=O/r):G<.01?(i=.707106781,r=.707106781,s=0):(s=Math.sqrt(G),i=w/s,r=O/s),this.set(i,r,s,e),this}let A=Math.sqrt((u-g)*(u-g)+(p-x)*(p-x)+(f-h)*(f-h));return Math.abs(A)<.001&&(A=1),this.x=(u-g)/A,this.y=(p-x)/A,this.z=(f-h)/A,this.w=Math.acos((c+m+d-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this.w=t.w+(e.w-t.w)*i,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class X2 extends sn{constructor(t=1,e=1,i={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new ut(0,0,t,e),this.scissorTest=!1,this.viewport=new ut(0,0,t,e);const r={width:t,height:e,depth:1};i=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:re,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},i);const s=new Bt(r,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.colorSpace);s.flipY=!1,s.generateMipmaps=i.generateMipmaps,s.internalFormat=i.internalFormat,this.textures=[];const a=i.count;for(let o=0;o<a;o++)this.textures[o]=s.clone(),this.textures[o].isRenderTargetTexture=!0;this.depthBuffer=i.depthBuffer,this.stencilBuffer=i.stencilBuffer,this.resolveDepthBuffer=i.resolveDepthBuffer,this.resolveStencilBuffer=i.resolveStencilBuffer,this.depthTexture=i.depthTexture,this.samples=i.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}setSize(t,e,i=1){if(this.width!==t||this.height!==e||this.depth!==i){this.width=t,this.height=e,this.depth=i;for(let r=0,s=this.textures.length;r<s;r++)this.textures[r].image.width=t,this.textures[r].image.height=e,this.textures[r].image.depth=i;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let i=0,r=t.textures.length;i<r;i++)this.textures[i]=t.textures[i].clone(),this.textures[i].isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new t8(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class rn extends X2{constructor(t=1,e=1,i={}){super(t,e,i),this.isWebGLRenderTarget=!0}}class e8 extends Bt{constructor(t=null,e=1,i=1,r=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:i,depth:r},this.magFilter=Kt,this.minFilter=Kt,this.wrapR=Qe,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class q2 extends Bt{constructor(t=null,e=1,i=1,r=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:i,depth:r},this.magFilter=Kt,this.minFilter=Kt,this.wrapR=Qe,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Hn{constructor(t=0,e=0,i=0,r=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=i,this._w=r}static slerpFlat(t,e,i,r,s,a,o){let l=i[r+0],c=i[r+1],h=i[r+2],p=i[r+3];const f=s[a+0],m=s[a+1],g=s[a+2],x=s[a+3];if(o===0){t[e+0]=l,t[e+1]=c,t[e+2]=h,t[e+3]=p;return}if(o===1){t[e+0]=f,t[e+1]=m,t[e+2]=g,t[e+3]=x;return}if(p!==x||l!==f||c!==m||h!==g){let u=1-o;const d=l*f+c*m+h*g+p*x,A=d>=0?1:-1,y=1-d*d;if(y>Number.EPSILON){const G=Math.sqrt(y),D=Math.atan2(G,d*A);u=Math.sin(u*D)/G,o=Math.sin(o*D)/G}const T=o*A;if(l=l*u+f*T,c=c*u+m*T,h=h*u+g*T,p=p*u+x*T,u===1-o){const G=1/Math.sqrt(l*l+c*c+h*h+p*p);l*=G,c*=G,h*=G,p*=G}}t[e]=l,t[e+1]=c,t[e+2]=h,t[e+3]=p}static multiplyQuaternionsFlat(t,e,i,r,s,a){const o=i[r],l=i[r+1],c=i[r+2],h=i[r+3],p=s[a],f=s[a+1],m=s[a+2],g=s[a+3];return t[e]=o*g+h*p+l*m-c*f,t[e+1]=l*g+h*f+c*p-o*m,t[e+2]=c*g+h*m+o*f-l*p,t[e+3]=h*g-o*p-l*f-c*m,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,i,r){return this._x=t,this._y=e,this._z=i,this._w=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const i=t._x,r=t._y,s=t._z,a=t._order,o=Math.cos,l=Math.sin,c=o(i/2),h=o(r/2),p=o(s/2),f=l(i/2),m=l(r/2),g=l(s/2);switch(a){case"XYZ":this._x=f*h*p+c*m*g,this._y=c*m*p-f*h*g,this._z=c*h*g+f*m*p,this._w=c*h*p-f*m*g;break;case"YXZ":this._x=f*h*p+c*m*g,this._y=c*m*p-f*h*g,this._z=c*h*g-f*m*p,this._w=c*h*p+f*m*g;break;case"ZXY":this._x=f*h*p-c*m*g,this._y=c*m*p+f*h*g,this._z=c*h*g+f*m*p,this._w=c*h*p-f*m*g;break;case"ZYX":this._x=f*h*p-c*m*g,this._y=c*m*p+f*h*g,this._z=c*h*g-f*m*p,this._w=c*h*p+f*m*g;break;case"YZX":this._x=f*h*p+c*m*g,this._y=c*m*p+f*h*g,this._z=c*h*g-f*m*p,this._w=c*h*p-f*m*g;break;case"XZY":this._x=f*h*p-c*m*g,this._y=c*m*p-f*h*g,this._z=c*h*g+f*m*p,this._w=c*h*p+f*m*g;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const i=e/2,r=Math.sin(i);return this._x=t.x*r,this._y=t.y*r,this._z=t.z*r,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,i=e[0],r=e[4],s=e[8],a=e[1],o=e[5],l=e[9],c=e[2],h=e[6],p=e[10],f=i+o+p;if(f>0){const m=.5/Math.sqrt(f+1);this._w=.25/m,this._x=(h-l)*m,this._y=(s-c)*m,this._z=(a-r)*m}else if(i>o&&i>p){const m=2*Math.sqrt(1+i-o-p);this._w=(h-l)/m,this._x=.25*m,this._y=(r+a)/m,this._z=(s+c)/m}else if(o>p){const m=2*Math.sqrt(1+o-i-p);this._w=(s-c)/m,this._x=(r+a)/m,this._y=.25*m,this._z=(l+h)/m}else{const m=2*Math.sqrt(1+p-i-o);this._w=(a-r)/m,this._x=(s+c)/m,this._y=(l+h)/m,this._z=.25*m}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let i=t.dot(e)+1;return i<Number.EPSILON?(i=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=i):(this._x=0,this._y=-t.z,this._z=t.y,this._w=i)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=i),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(It(this.dot(t),-1,1)))}rotateTowards(t,e){const i=this.angleTo(t);if(i===0)return this;const r=Math.min(1,e/i);return this.slerp(t,r),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const i=t._x,r=t._y,s=t._z,a=t._w,o=e._x,l=e._y,c=e._z,h=e._w;return this._x=i*h+a*o+r*c-s*l,this._y=r*h+a*l+s*o-i*c,this._z=s*h+a*c+i*l-r*o,this._w=a*h-i*o-r*l-s*c,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const i=this._x,r=this._y,s=this._z,a=this._w;let o=a*t._w+i*t._x+r*t._y+s*t._z;if(o<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,o=-o):this.copy(t),o>=1)return this._w=a,this._x=i,this._y=r,this._z=s,this;const l=1-o*o;if(l<=Number.EPSILON){const m=1-e;return this._w=m*a+e*this._w,this._x=m*i+e*this._x,this._y=m*r+e*this._y,this._z=m*s+e*this._z,this.normalize(),this}const c=Math.sqrt(l),h=Math.atan2(c,o),p=Math.sin((1-e)*h)/c,f=Math.sin(e*h)/c;return this._w=a*p+this._w*f,this._x=i*p+this._x*f,this._y=r*p+this._y*f,this._z=s*p+this._z*f,this._onChangeCallback(),this}slerpQuaternions(t,e,i){return this.copy(t).slerp(e,i)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),i=Math.random(),r=Math.sqrt(1-i),s=Math.sqrt(i);return this.set(r*Math.sin(t),r*Math.cos(t),s*Math.sin(e),s*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class U{constructor(t=0,e=0,i=0){U.prototype.isVector3=!0,this.x=t,this.y=e,this.z=i}set(t,e,i){return i===void 0&&(i=this.z),this.x=t,this.y=e,this.z=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(Rr.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(Rr.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,i=this.y,r=this.z,s=t.elements;return this.x=s[0]*e+s[3]*i+s[6]*r,this.y=s[1]*e+s[4]*i+s[7]*r,this.z=s[2]*e+s[5]*i+s[8]*r,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,i=this.y,r=this.z,s=t.elements,a=1/(s[3]*e+s[7]*i+s[11]*r+s[15]);return this.x=(s[0]*e+s[4]*i+s[8]*r+s[12])*a,this.y=(s[1]*e+s[5]*i+s[9]*r+s[13])*a,this.z=(s[2]*e+s[6]*i+s[10]*r+s[14])*a,this}applyQuaternion(t){const e=this.x,i=this.y,r=this.z,s=t.x,a=t.y,o=t.z,l=t.w,c=2*(a*r-o*i),h=2*(o*e-s*r),p=2*(s*i-a*e);return this.x=e+l*c+a*p-o*h,this.y=i+l*h+o*c-s*p,this.z=r+l*p+s*h-a*c,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,i=this.y,r=this.z,s=t.elements;return this.x=s[0]*e+s[4]*i+s[8]*r,this.y=s[1]*e+s[5]*i+s[9]*r,this.z=s[2]*e+s[6]*i+s[10]*r,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const i=t.x,r=t.y,s=t.z,a=e.x,o=e.y,l=e.z;return this.x=r*l-s*o,this.y=s*a-i*l,this.z=i*o-r*a,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const i=t.dot(this)/e;return this.copy(t).multiplyScalar(i)}projectOnPlane(t){return T1.copy(this).projectOnVector(t),this.sub(T1)}reflect(t){return this.sub(T1.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const i=this.dot(t)/e;return Math.acos(It(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y,r=this.z-t.z;return e*e+i*i+r*r}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,i){const r=Math.sin(e)*t;return this.x=r*Math.sin(i),this.y=Math.cos(e)*t,this.z=r*Math.cos(i),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,i){return this.x=t*Math.sin(e),this.y=i,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),i=this.setFromMatrixColumn(t,1).length(),r=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=i,this.z=r,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,i=Math.sqrt(1-e*e);return this.x=i*Math.cos(t),this.y=e,this.z=i*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const T1=new U,Rr=new Hn;class Ve{constructor(t=new U(1/0,1/0,1/0),e=new U(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e+=3)this.expandByPoint(te.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,i=t.count;e<i;e++)this.expandByPoint(te.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=te.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const i=t.geometry;if(i!==void 0){const s=i.getAttribute("position");if(e===!0&&s!==void 0&&t.isInstancedMesh!==!0)for(let a=0,o=s.count;a<o;a++)t.isMesh===!0?t.getVertexPosition(a,te):te.fromBufferAttribute(s,a),te.applyMatrix4(t.matrixWorld),this.expandByPoint(te);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),hi.copy(t.boundingBox)):(i.boundingBox===null&&i.computeBoundingBox(),hi.copy(i.boundingBox)),hi.applyMatrix4(t.matrixWorld),this.union(hi)}const r=t.children;for(let s=0,a=r.length;s<a;s++)this.expandByObject(r[s],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,te),te.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(qn),fi.subVectors(this.max,qn),un.subVectors(t.a,qn),hn.subVectors(t.b,qn),fn.subVectors(t.c,qn),Ce.subVectors(hn,un),Re.subVectors(fn,hn),ke.subVectors(un,fn);let e=[0,-Ce.z,Ce.y,0,-Re.z,Re.y,0,-ke.z,ke.y,Ce.z,0,-Ce.x,Re.z,0,-Re.x,ke.z,0,-ke.x,-Ce.y,Ce.x,0,-Re.y,Re.x,0,-ke.y,ke.x,0];return!w1(e,un,hn,fn,fi)||(e=[1,0,0,0,1,0,0,0,1],!w1(e,un,hn,fn,fi))?!1:(di.crossVectors(Ce,Re),e=[di.x,di.y,di.z],w1(e,un,hn,fn,fi))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,te).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(te).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(_e[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),_e[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),_e[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),_e[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),_e[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),_e[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),_e[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),_e[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(_e),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const _e=[new U,new U,new U,new U,new U,new U,new U,new U],te=new U,hi=new Ve,un=new U,hn=new U,fn=new U,Ce=new U,Re=new U,ke=new U,qn=new U,fi=new U,di=new U,We=new U;function w1(n,t,e,i,r){for(let s=0,a=n.length-3;s<=a;s+=3){We.fromArray(n,s);const o=r.x*Math.abs(We.x)+r.y*Math.abs(We.y)+r.z*Math.abs(We.z),l=t.dot(We),c=e.dot(We),h=i.dot(We);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>o)return!1}return!0}const Y2=new Ve,Yn=new U,C1=new U;class Gn{constructor(t=new U,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const i=this.center;e!==void 0?i.copy(e):Y2.setFromPoints(t).getCenter(i);let r=0;for(let s=0,a=t.length;s<a;s++)r=Math.max(r,i.distanceToSquared(t[s]));return this.radius=Math.sqrt(r),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const i=this.center.distanceToSquared(t);return e.copy(t),i>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;Yn.subVectors(t,this.center);const e=Yn.lengthSq();if(e>this.radius*this.radius){const i=Math.sqrt(e),r=(i-this.radius)*.5;this.center.addScaledVector(Yn,r/i),this.radius+=r}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(C1.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(Yn.copy(t.center).add(C1)),this.expandByPoint(Yn.copy(t.center).sub(C1))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}}const ge=new U,R1=new U,pi=new U,Pe=new U,P1=new U,mi=new U,L1=new U;class n8{constructor(t=new U,e=new U(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,ge)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const i=e.dot(this.direction);return i<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,i)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=ge.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(ge.copy(this.origin).addScaledVector(this.direction,e),ge.distanceToSquared(t))}distanceSqToSegment(t,e,i,r){R1.copy(t).add(e).multiplyScalar(.5),pi.copy(e).sub(t).normalize(),Pe.copy(this.origin).sub(R1);const s=t.distanceTo(e)*.5,a=-this.direction.dot(pi),o=Pe.dot(this.direction),l=-Pe.dot(pi),c=Pe.lengthSq(),h=Math.abs(1-a*a);let p,f,m,g;if(h>0)if(p=a*l-o,f=a*o-l,g=s*h,p>=0)if(f>=-g)if(f<=g){const x=1/h;p*=x,f*=x,m=p*(p+a*f+2*o)+f*(a*p+f+2*l)+c}else f=s,p=Math.max(0,-(a*f+o)),m=-p*p+f*(f+2*l)+c;else f=-s,p=Math.max(0,-(a*f+o)),m=-p*p+f*(f+2*l)+c;else f<=-g?(p=Math.max(0,-(-a*s+o)),f=p>0?-s:Math.min(Math.max(-s,-l),s),m=-p*p+f*(f+2*l)+c):f<=g?(p=0,f=Math.min(Math.max(-s,-l),s),m=f*(f+2*l)+c):(p=Math.max(0,-(a*s+o)),f=p>0?s:Math.min(Math.max(-s,-l),s),m=-p*p+f*(f+2*l)+c);else f=a>0?-s:s,p=Math.max(0,-(a*f+o)),m=-p*p+f*(f+2*l)+c;return i&&i.copy(this.origin).addScaledVector(this.direction,p),r&&r.copy(R1).addScaledVector(pi,f),m}intersectSphere(t,e){ge.subVectors(t.center,this.origin);const i=ge.dot(this.direction),r=ge.dot(ge)-i*i,s=t.radius*t.radius;if(r>s)return null;const a=Math.sqrt(s-r),o=i-a,l=i+a;return l<0?null:o<0?this.at(l,e):this.at(o,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const i=-(this.origin.dot(t.normal)+t.constant)/e;return i>=0?i:null}intersectPlane(t,e){const i=this.distanceToPlane(t);return i===null?null:this.at(i,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let i,r,s,a,o,l;const c=1/this.direction.x,h=1/this.direction.y,p=1/this.direction.z,f=this.origin;return c>=0?(i=(t.min.x-f.x)*c,r=(t.max.x-f.x)*c):(i=(t.max.x-f.x)*c,r=(t.min.x-f.x)*c),h>=0?(s=(t.min.y-f.y)*h,a=(t.max.y-f.y)*h):(s=(t.max.y-f.y)*h,a=(t.min.y-f.y)*h),i>a||s>r||((s>i||isNaN(i))&&(i=s),(a<r||isNaN(r))&&(r=a),p>=0?(o=(t.min.z-f.z)*p,l=(t.max.z-f.z)*p):(o=(t.max.z-f.z)*p,l=(t.min.z-f.z)*p),i>l||o>r)||((o>i||i!==i)&&(i=o),(l<r||r!==r)&&(r=l),r<0)?null:this.at(i>=0?i:r,e)}intersectsBox(t){return this.intersectBox(t,ge)!==null}intersectTriangle(t,e,i,r,s){P1.subVectors(e,t),mi.subVectors(i,t),L1.crossVectors(P1,mi);let a=this.direction.dot(L1),o;if(a>0){if(r)return null;o=1}else if(a<0)o=-1,a=-a;else return null;Pe.subVectors(this.origin,t);const l=o*this.direction.dot(mi.crossVectors(Pe,mi));if(l<0)return null;const c=o*this.direction.dot(P1.cross(Pe));if(c<0||l+c>a)return null;const h=-o*Pe.dot(L1);return h<0?null:this.at(h/a,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class mt{constructor(t,e,i,r,s,a,o,l,c,h,p,f,m,g,x,u){mt.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,i,r,s,a,o,l,c,h,p,f,m,g,x,u)}set(t,e,i,r,s,a,o,l,c,h,p,f,m,g,x,u){const d=this.elements;return d[0]=t,d[4]=e,d[8]=i,d[12]=r,d[1]=s,d[5]=a,d[9]=o,d[13]=l,d[2]=c,d[6]=h,d[10]=p,d[14]=f,d[3]=m,d[7]=g,d[11]=x,d[15]=u,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new mt().fromArray(this.elements)}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this}copyPosition(t){const e=this.elements,i=t.elements;return e[12]=i[12],e[13]=i[13],e[14]=i[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,i){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(t,e,i){return this.set(t.x,e.x,i.x,0,t.y,e.y,i.y,0,t.z,e.z,i.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,i=t.elements,r=1/dn.setFromMatrixColumn(t,0).length(),s=1/dn.setFromMatrixColumn(t,1).length(),a=1/dn.setFromMatrixColumn(t,2).length();return e[0]=i[0]*r,e[1]=i[1]*r,e[2]=i[2]*r,e[3]=0,e[4]=i[4]*s,e[5]=i[5]*s,e[6]=i[6]*s,e[7]=0,e[8]=i[8]*a,e[9]=i[9]*a,e[10]=i[10]*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,i=t.x,r=t.y,s=t.z,a=Math.cos(i),o=Math.sin(i),l=Math.cos(r),c=Math.sin(r),h=Math.cos(s),p=Math.sin(s);if(t.order==="XYZ"){const f=a*h,m=a*p,g=o*h,x=o*p;e[0]=l*h,e[4]=-l*p,e[8]=c,e[1]=m+g*c,e[5]=f-x*c,e[9]=-o*l,e[2]=x-f*c,e[6]=g+m*c,e[10]=a*l}else if(t.order==="YXZ"){const f=l*h,m=l*p,g=c*h,x=c*p;e[0]=f+x*o,e[4]=g*o-m,e[8]=a*c,e[1]=a*p,e[5]=a*h,e[9]=-o,e[2]=m*o-g,e[6]=x+f*o,e[10]=a*l}else if(t.order==="ZXY"){const f=l*h,m=l*p,g=c*h,x=c*p;e[0]=f-x*o,e[4]=-a*p,e[8]=g+m*o,e[1]=m+g*o,e[5]=a*h,e[9]=x-f*o,e[2]=-a*c,e[6]=o,e[10]=a*l}else if(t.order==="ZYX"){const f=a*h,m=a*p,g=o*h,x=o*p;e[0]=l*h,e[4]=g*c-m,e[8]=f*c+x,e[1]=l*p,e[5]=x*c+f,e[9]=m*c-g,e[2]=-c,e[6]=o*l,e[10]=a*l}else if(t.order==="YZX"){const f=a*l,m=a*c,g=o*l,x=o*c;e[0]=l*h,e[4]=x-f*p,e[8]=g*p+m,e[1]=p,e[5]=a*h,e[9]=-o*h,e[2]=-c*h,e[6]=m*p+g,e[10]=f-x*p}else if(t.order==="XZY"){const f=a*l,m=a*c,g=o*l,x=o*c;e[0]=l*h,e[4]=-p,e[8]=c*h,e[1]=f*p+x,e[5]=a*h,e[9]=m*p-g,e[2]=g*p-m,e[6]=o*h,e[10]=x*p+f}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(j2,t,Z2)}lookAt(t,e,i){const r=this.elements;return Wt.subVectors(t,e),Wt.lengthSq()===0&&(Wt.z=1),Wt.normalize(),Le.crossVectors(i,Wt),Le.lengthSq()===0&&(Math.abs(i.z)===1?Wt.x+=1e-4:Wt.z+=1e-4,Wt.normalize(),Le.crossVectors(i,Wt)),Le.normalize(),_i.crossVectors(Wt,Le),r[0]=Le.x,r[4]=_i.x,r[8]=Wt.x,r[1]=Le.y,r[5]=_i.y,r[9]=Wt.y,r[2]=Le.z,r[6]=_i.z,r[10]=Wt.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,r=e.elements,s=this.elements,a=i[0],o=i[4],l=i[8],c=i[12],h=i[1],p=i[5],f=i[9],m=i[13],g=i[2],x=i[6],u=i[10],d=i[14],A=i[3],y=i[7],T=i[11],G=i[15],D=r[0],w=r[4],O=r[8],s0=r[12],_=r[1],M=r[5],j=r[9],k=r[13],J=r[2],X=r[6],q=r[10],t0=r[14],V=r[3],f0=r[7],d0=r[11],l0=r[15];return s[0]=a*D+o*_+l*J+c*V,s[4]=a*w+o*M+l*X+c*f0,s[8]=a*O+o*j+l*q+c*d0,s[12]=a*s0+o*k+l*t0+c*l0,s[1]=h*D+p*_+f*J+m*V,s[5]=h*w+p*M+f*X+m*f0,s[9]=h*O+p*j+f*q+m*d0,s[13]=h*s0+p*k+f*t0+m*l0,s[2]=g*D+x*_+u*J+d*V,s[6]=g*w+x*M+u*X+d*f0,s[10]=g*O+x*j+u*q+d*d0,s[14]=g*s0+x*k+u*t0+d*l0,s[3]=A*D+y*_+T*J+G*V,s[7]=A*w+y*M+T*X+G*f0,s[11]=A*O+y*j+T*q+G*d0,s[15]=A*s0+y*k+T*t0+G*l0,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[4],r=t[8],s=t[12],a=t[1],o=t[5],l=t[9],c=t[13],h=t[2],p=t[6],f=t[10],m=t[14],g=t[3],x=t[7],u=t[11],d=t[15];return g*(+s*l*p-r*c*p-s*o*f+i*c*f+r*o*m-i*l*m)+x*(+e*l*m-e*c*f+s*a*f-r*a*m+r*c*h-s*l*h)+u*(+e*c*p-e*o*m-s*a*p+i*a*m+s*o*h-i*c*h)+d*(-r*o*h-e*l*p+e*o*f+r*a*p-i*a*f+i*l*h)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,i){const r=this.elements;return t.isVector3?(r[12]=t.x,r[13]=t.y,r[14]=t.z):(r[12]=t,r[13]=e,r[14]=i),this}invert(){const t=this.elements,e=t[0],i=t[1],r=t[2],s=t[3],a=t[4],o=t[5],l=t[6],c=t[7],h=t[8],p=t[9],f=t[10],m=t[11],g=t[12],x=t[13],u=t[14],d=t[15],A=p*u*c-x*f*c+x*l*m-o*u*m-p*l*d+o*f*d,y=g*f*c-h*u*c-g*l*m+a*u*m+h*l*d-a*f*d,T=h*x*c-g*p*c+g*o*m-a*x*m-h*o*d+a*p*d,G=g*p*l-h*x*l-g*o*f+a*x*f+h*o*u-a*p*u,D=e*A+i*y+r*T+s*G;if(D===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const w=1/D;return t[0]=A*w,t[1]=(x*f*s-p*u*s-x*r*m+i*u*m+p*r*d-i*f*d)*w,t[2]=(o*u*s-x*l*s+x*r*c-i*u*c-o*r*d+i*l*d)*w,t[3]=(p*l*s-o*f*s-p*r*c+i*f*c+o*r*m-i*l*m)*w,t[4]=y*w,t[5]=(h*u*s-g*f*s+g*r*m-e*u*m-h*r*d+e*f*d)*w,t[6]=(g*l*s-a*u*s-g*r*c+e*u*c+a*r*d-e*l*d)*w,t[7]=(a*f*s-h*l*s+h*r*c-e*f*c-a*r*m+e*l*m)*w,t[8]=T*w,t[9]=(g*p*s-h*x*s-g*i*m+e*x*m+h*i*d-e*p*d)*w,t[10]=(a*x*s-g*o*s+g*i*c-e*x*c-a*i*d+e*o*d)*w,t[11]=(h*o*s-a*p*s-h*i*c+e*p*c+a*i*m-e*o*m)*w,t[12]=G*w,t[13]=(h*x*r-g*p*r+g*i*f-e*x*f-h*i*u+e*p*u)*w,t[14]=(g*o*r-a*x*r-g*i*l+e*x*l+a*i*u-e*o*u)*w,t[15]=(a*p*r-h*o*r+h*i*l-e*p*l-a*i*f+e*o*f)*w,this}scale(t){const e=this.elements,i=t.x,r=t.y,s=t.z;return e[0]*=i,e[4]*=r,e[8]*=s,e[1]*=i,e[5]*=r,e[9]*=s,e[2]*=i,e[6]*=r,e[10]*=s,e[3]*=i,e[7]*=r,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],i=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],r=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,i,r))}makeTranslation(t,e,i){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,i,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),i=Math.sin(t);return this.set(1,0,0,0,0,e,-i,0,0,i,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,0,i,0,0,1,0,0,-i,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const i=Math.cos(e),r=Math.sin(e),s=1-i,a=t.x,o=t.y,l=t.z,c=s*a,h=s*o;return this.set(c*a+i,c*o-r*l,c*l+r*o,0,c*o+r*l,h*o+i,h*l-r*a,0,c*l-r*o,h*l+r*a,s*l*l+i,0,0,0,0,1),this}makeScale(t,e,i){return this.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this}makeShear(t,e,i,r,s,a){return this.set(1,i,s,0,t,1,a,0,e,r,1,0,0,0,0,1),this}compose(t,e,i){const r=this.elements,s=e._x,a=e._y,o=e._z,l=e._w,c=s+s,h=a+a,p=o+o,f=s*c,m=s*h,g=s*p,x=a*h,u=a*p,d=o*p,A=l*c,y=l*h,T=l*p,G=i.x,D=i.y,w=i.z;return r[0]=(1-(x+d))*G,r[1]=(m+T)*G,r[2]=(g-y)*G,r[3]=0,r[4]=(m-T)*D,r[5]=(1-(f+d))*D,r[6]=(u+A)*D,r[7]=0,r[8]=(g+y)*w,r[9]=(u-A)*w,r[10]=(1-(f+x))*w,r[11]=0,r[12]=t.x,r[13]=t.y,r[14]=t.z,r[15]=1,this}decompose(t,e,i){const r=this.elements;let s=dn.set(r[0],r[1],r[2]).length();const a=dn.set(r[4],r[5],r[6]).length(),o=dn.set(r[8],r[9],r[10]).length();this.determinant()<0&&(s=-s),t.x=r[12],t.y=r[13],t.z=r[14],ee.copy(this);const c=1/s,h=1/a,p=1/o;return ee.elements[0]*=c,ee.elements[1]*=c,ee.elements[2]*=c,ee.elements[4]*=h,ee.elements[5]*=h,ee.elements[6]*=h,ee.elements[8]*=p,ee.elements[9]*=p,ee.elements[10]*=p,e.setFromRotationMatrix(ee),i.x=s,i.y=a,i.z=o,this}makePerspective(t,e,i,r,s,a,o=Ee){const l=this.elements,c=2*s/(e-t),h=2*s/(i-r),p=(e+t)/(e-t),f=(i+r)/(i-r);let m,g;if(o===Ee)m=-(a+s)/(a-s),g=-2*a*s/(a-s);else if(o===l1)m=-a/(a-s),g=-a*s/(a-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+o);return l[0]=c,l[4]=0,l[8]=p,l[12]=0,l[1]=0,l[5]=h,l[9]=f,l[13]=0,l[2]=0,l[6]=0,l[10]=m,l[14]=g,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(t,e,i,r,s,a,o=Ee){const l=this.elements,c=1/(e-t),h=1/(i-r),p=1/(a-s),f=(e+t)*c,m=(i+r)*h;let g,x;if(o===Ee)g=(a+s)*p,x=-2*p;else if(o===l1)g=s*p,x=-1*p;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+o);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-f,l[1]=0,l[5]=2*h,l[9]=0,l[13]=-m,l[2]=0,l[6]=0,l[10]=x,l[14]=-g,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(t){const e=this.elements,i=t.elements;for(let r=0;r<16;r++)if(e[r]!==i[r])return!1;return!0}fromArray(t,e=0){for(let i=0;i<16;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t[e+9]=i[9],t[e+10]=i[10],t[e+11]=i[11],t[e+12]=i[12],t[e+13]=i[13],t[e+14]=i[14],t[e+15]=i[15],t}}const dn=new U,ee=new mt,j2=new U(0,0,0),Z2=new U(1,1,1),Le=new U,_i=new U,Wt=new U,Pr=new mt,Lr=new Hn;class me{constructor(t=0,e=0,i=0,r=me.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=i,this._order=r}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,i,r=this._order){return this._x=t,this._y=e,this._z=i,this._order=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,i=!0){const r=t.elements,s=r[0],a=r[4],o=r[8],l=r[1],c=r[5],h=r[9],p=r[2],f=r[6],m=r[10];switch(e){case"XYZ":this._y=Math.asin(It(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-h,m),this._z=Math.atan2(-a,s)):(this._x=Math.atan2(f,c),this._z=0);break;case"YXZ":this._x=Math.asin(-It(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(o,m),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-p,s),this._z=0);break;case"ZXY":this._x=Math.asin(It(f,-1,1)),Math.abs(f)<.9999999?(this._y=Math.atan2(-p,m),this._z=Math.atan2(-a,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-It(p,-1,1)),Math.abs(p)<.9999999?(this._x=Math.atan2(f,m),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-a,c));break;case"YZX":this._z=Math.asin(It(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-p,s)):(this._x=0,this._y=Math.atan2(o,m));break;case"XZY":this._z=Math.asin(-It(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(f,c),this._y=Math.atan2(o,s)):(this._x=Math.atan2(-h,m),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,i===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,i){return Pr.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Pr,e,i)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return Lr.setFromEuler(this),this.setFromQuaternion(Lr,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}me.DEFAULT_ORDER="XYZ";class i8{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let K2=0;const Dr=new U,pn=new Hn,ve=new mt,gi=new U,jn=new U,$2=new U,J2=new Hn,Ur=new U(1,0,0),Ir=new U(0,1,0),Nr=new U(0,0,1),Fr={type:"added"},Q2={type:"removed"},mn={type:"childadded",child:null},D1={type:"childremoved",child:null};class At extends sn{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:K2++}),this.uuid=be(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=At.DEFAULT_UP.clone();const t=new U,e=new me,i=new Hn,r=new U(1,1,1);function s(){i.setFromEuler(e,!1)}function a(){e.setFromQuaternion(i,void 0,!1)}e._onChange(s),i._onChange(a),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:r},modelViewMatrix:{value:new mt},normalMatrix:{value:new H0}}),this.matrix=new mt,this.matrixWorld=new mt,this.matrixAutoUpdate=At.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=At.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new i8,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return pn.setFromAxisAngle(t,e),this.quaternion.multiply(pn),this}rotateOnWorldAxis(t,e){return pn.setFromAxisAngle(t,e),this.quaternion.premultiply(pn),this}rotateX(t){return this.rotateOnAxis(Ur,t)}rotateY(t){return this.rotateOnAxis(Ir,t)}rotateZ(t){return this.rotateOnAxis(Nr,t)}translateOnAxis(t,e){return Dr.copy(t).applyQuaternion(this.quaternion),this.position.add(Dr.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(Ur,t)}translateY(t){return this.translateOnAxis(Ir,t)}translateZ(t){return this.translateOnAxis(Nr,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(ve.copy(this.matrixWorld).invert())}lookAt(t,e,i){t.isVector3?gi.copy(t):gi.set(t,e,i);const r=this.parent;this.updateWorldMatrix(!0,!1),jn.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?ve.lookAt(jn,gi,this.up):ve.lookAt(gi,jn,this.up),this.quaternion.setFromRotationMatrix(ve),r&&(ve.extractRotation(r.matrixWorld),pn.setFromRotationMatrix(ve),this.quaternion.premultiply(pn.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(Fr),mn.child=t,this.dispatchEvent(mn),mn.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.remove(arguments[i]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(Q2),D1.child=t,this.dispatchEvent(D1),D1.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),ve.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),ve.multiply(t.parent.matrixWorld)),t.applyMatrix4(ve),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(Fr),mn.child=t,this.dispatchEvent(mn),mn.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let i=0,r=this.children.length;i<r;i++){const a=this.children[i].getObjectByProperty(t,e);if(a!==void 0)return a}}getObjectsByProperty(t,e,i=[]){this[t]===e&&i.push(this);const r=this.children;for(let s=0,a=r.length;s<a;s++)r[s].getObjectsByProperty(t,e,i);return i}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(jn,t,$2),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(jn,J2,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let i=0,r=e.length;i<r;i++)e[i].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let i=0,r=e.length;i<r;i++)e[i].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let i=0,r=e.length;i<r;i++)e[i].updateMatrixWorld(t)}updateWorldMatrix(t,e){const i=this.parent;if(t===!0&&i!==null&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const r=this.children;for(let s=0,a=r.length;s<a;s++)r[s].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",i={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},i.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const r={};r.uuid=this.uuid,r.type=this.type,this.name!==""&&(r.name=this.name),this.castShadow===!0&&(r.castShadow=!0),this.receiveShadow===!0&&(r.receiveShadow=!0),this.visible===!1&&(r.visible=!1),this.frustumCulled===!1&&(r.frustumCulled=!1),this.renderOrder!==0&&(r.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(r.userData=this.userData),r.layers=this.layers.mask,r.matrix=this.matrix.toArray(),r.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(r.matrixAutoUpdate=!1),this.isInstancedMesh&&(r.type="InstancedMesh",r.count=this.count,r.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(r.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(r.type="BatchedMesh",r.perObjectFrustumCulled=this.perObjectFrustumCulled,r.sortObjects=this.sortObjects,r.drawRanges=this._drawRanges,r.reservedRanges=this._reservedRanges,r.visibility=this._visibility,r.active=this._active,r.bounds=this._bounds.map(o=>({boxInitialized:o.boxInitialized,boxMin:o.box.min.toArray(),boxMax:o.box.max.toArray(),sphereInitialized:o.sphereInitialized,sphereRadius:o.sphere.radius,sphereCenter:o.sphere.center.toArray()})),r.maxInstanceCount=this._maxInstanceCount,r.maxVertexCount=this._maxVertexCount,r.maxIndexCount=this._maxIndexCount,r.geometryInitialized=this._geometryInitialized,r.geometryCount=this._geometryCount,r.matricesTexture=this._matricesTexture.toJSON(t),this._colorsTexture!==null&&(r.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(r.boundingSphere={center:r.boundingSphere.center.toArray(),radius:r.boundingSphere.radius}),this.boundingBox!==null&&(r.boundingBox={min:r.boundingBox.min.toArray(),max:r.boundingBox.max.toArray()}));function s(o,l){return o[l.uuid]===void 0&&(o[l.uuid]=l.toJSON(t)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?r.background=this.background.toJSON():this.background.isTexture&&(r.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(r.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){r.geometry=s(t.geometries,this.geometry);const o=this.geometry.parameters;if(o!==void 0&&o.shapes!==void 0){const l=o.shapes;if(Array.isArray(l))for(let c=0,h=l.length;c<h;c++){const p=l[c];s(t.shapes,p)}else s(t.shapes,l)}}if(this.isSkinnedMesh&&(r.bindMode=this.bindMode,r.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(t.skeletons,this.skeleton),r.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const o=[];for(let l=0,c=this.material.length;l<c;l++)o.push(s(t.materials,this.material[l]));r.material=o}else r.material=s(t.materials,this.material);if(this.children.length>0){r.children=[];for(let o=0;o<this.children.length;o++)r.children.push(this.children[o].toJSON(t).object)}if(this.animations.length>0){r.animations=[];for(let o=0;o<this.animations.length;o++){const l=this.animations[o];r.animations.push(s(t.animations,l))}}if(e){const o=a(t.geometries),l=a(t.materials),c=a(t.textures),h=a(t.images),p=a(t.shapes),f=a(t.skeletons),m=a(t.animations),g=a(t.nodes);o.length>0&&(i.geometries=o),l.length>0&&(i.materials=l),c.length>0&&(i.textures=c),h.length>0&&(i.images=h),p.length>0&&(i.shapes=p),f.length>0&&(i.skeletons=f),m.length>0&&(i.animations=m),g.length>0&&(i.nodes=g)}return i.object=r,i;function a(o){const l=[];for(const c in o){const h=o[c];delete h.metadata,l.push(h)}return l}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let i=0;i<t.children.length;i++){const r=t.children[i];this.add(r.clone())}return this}}At.DEFAULT_UP=new U(0,1,0);At.DEFAULT_MATRIX_AUTO_UPDATE=!0;At.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const ne=new U,xe=new U,U1=new U,Se=new U,_n=new U,gn=new U,Or=new U,I1=new U,N1=new U,F1=new U,O1=new ut,B1=new ut,z1=new ut;class Zt{constructor(t=new U,e=new U,i=new U){this.a=t,this.b=e,this.c=i}static getNormal(t,e,i,r){r.subVectors(i,e),ne.subVectors(t,e),r.cross(ne);const s=r.lengthSq();return s>0?r.multiplyScalar(1/Math.sqrt(s)):r.set(0,0,0)}static getBarycoord(t,e,i,r,s){ne.subVectors(r,e),xe.subVectors(i,e),U1.subVectors(t,e);const a=ne.dot(ne),o=ne.dot(xe),l=ne.dot(U1),c=xe.dot(xe),h=xe.dot(U1),p=a*c-o*o;if(p===0)return s.set(0,0,0),null;const f=1/p,m=(c*l-o*h)*f,g=(a*h-o*l)*f;return s.set(1-m-g,g,m)}static containsPoint(t,e,i,r){return this.getBarycoord(t,e,i,r,Se)===null?!1:Se.x>=0&&Se.y>=0&&Se.x+Se.y<=1}static getInterpolation(t,e,i,r,s,a,o,l){return this.getBarycoord(t,e,i,r,Se)===null?(l.x=0,l.y=0,"z"in l&&(l.z=0),"w"in l&&(l.w=0),null):(l.setScalar(0),l.addScaledVector(s,Se.x),l.addScaledVector(a,Se.y),l.addScaledVector(o,Se.z),l)}static getInterpolatedAttribute(t,e,i,r,s,a){return O1.setScalar(0),B1.setScalar(0),z1.setScalar(0),O1.fromBufferAttribute(t,e),B1.fromBufferAttribute(t,i),z1.fromBufferAttribute(t,r),a.setScalar(0),a.addScaledVector(O1,s.x),a.addScaledVector(B1,s.y),a.addScaledVector(z1,s.z),a}static isFrontFacing(t,e,i,r){return ne.subVectors(i,e),xe.subVectors(t,e),ne.cross(xe).dot(r)<0}set(t,e,i){return this.a.copy(t),this.b.copy(e),this.c.copy(i),this}setFromPointsAndIndices(t,e,i,r){return this.a.copy(t[e]),this.b.copy(t[i]),this.c.copy(t[r]),this}setFromAttributeAndIndices(t,e,i,r){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,i),this.c.fromBufferAttribute(t,r),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return ne.subVectors(this.c,this.b),xe.subVectors(this.a,this.b),ne.cross(xe).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Zt.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Zt.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,i,r,s){return Zt.getInterpolation(t,this.a,this.b,this.c,e,i,r,s)}containsPoint(t){return Zt.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Zt.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const i=this.a,r=this.b,s=this.c;let a,o;_n.subVectors(r,i),gn.subVectors(s,i),I1.subVectors(t,i);const l=_n.dot(I1),c=gn.dot(I1);if(l<=0&&c<=0)return e.copy(i);N1.subVectors(t,r);const h=_n.dot(N1),p=gn.dot(N1);if(h>=0&&p<=h)return e.copy(r);const f=l*p-h*c;if(f<=0&&l>=0&&h<=0)return a=l/(l-h),e.copy(i).addScaledVector(_n,a);F1.subVectors(t,s);const m=_n.dot(F1),g=gn.dot(F1);if(g>=0&&m<=g)return e.copy(s);const x=m*c-l*g;if(x<=0&&c>=0&&g<=0)return o=c/(c-g),e.copy(i).addScaledVector(gn,o);const u=h*g-m*p;if(u<=0&&p-h>=0&&m-g>=0)return Or.subVectors(s,r),o=(p-h)/(p-h+(m-g)),e.copy(r).addScaledVector(Or,o);const d=1/(u+x+f);return a=x*d,o=f*d,e.copy(i).addScaledVector(_n,a).addScaledVector(gn,o)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const r8={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},De={h:0,s:0,l:0},vi={h:0,s:0,l:0};function H1(n,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?n+(t-n)*6*e:e<1/2?t:e<2/3?n+(t-n)*6*(2/3-e):n}class j0{constructor(t,e,i){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,i)}set(t,e,i){if(e===void 0&&i===void 0){const r=t;r&&r.isColor?this.copy(r):typeof r=="number"?this.setHex(r):typeof r=="string"&&this.setStyle(r)}else this.setRGB(t,e,i);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=he){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,rt.toWorkingColorSpace(this,e),this}setRGB(t,e,i,r=rt.workingColorSpace){return this.r=t,this.g=e,this.b=i,rt.toWorkingColorSpace(this,r),this}setHSL(t,e,i,r=rt.workingColorSpace){if(t=ur(t,1),e=It(e,0,1),i=It(i,0,1),e===0)this.r=this.g=this.b=i;else{const s=i<=.5?i*(1+e):i+e-i*e,a=2*i-s;this.r=H1(a,s,t+1/3),this.g=H1(a,s,t),this.b=H1(a,s,t-1/3)}return rt.toWorkingColorSpace(this,r),this}setStyle(t,e=he){function i(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let r;if(r=/^(\w+)\(([^\)]*)\)/.exec(t)){let s;const a=r[1],o=r[2];switch(a){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return i(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,e);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return i(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,e);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return i(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(r=/^\#([A-Fa-f\d]+)$/.exec(t)){const s=r[1],a=s.length;if(a===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,e);if(a===6)return this.setHex(parseInt(s,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=he){const i=r8[t.toLowerCase()];return i!==void 0?this.setHex(i,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=Un(t.r),this.g=Un(t.g),this.b=Un(t.b),this}copyLinearToSRGB(t){return this.r=b1(t.r),this.g=b1(t.g),this.b=b1(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=he){return rt.fromWorkingColorSpace(Dt.copy(this),t),Math.round(It(Dt.r*255,0,255))*65536+Math.round(It(Dt.g*255,0,255))*256+Math.round(It(Dt.b*255,0,255))}getHexString(t=he){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=rt.workingColorSpace){rt.fromWorkingColorSpace(Dt.copy(this),e);const i=Dt.r,r=Dt.g,s=Dt.b,a=Math.max(i,r,s),o=Math.min(i,r,s);let l,c;const h=(o+a)/2;if(o===a)l=0,c=0;else{const p=a-o;switch(c=h<=.5?p/(a+o):p/(2-a-o),a){case i:l=(r-s)/p+(r<s?6:0);break;case r:l=(s-i)/p+2;break;case s:l=(i-r)/p+4;break}l/=6}return t.h=l,t.s=c,t.l=h,t}getRGB(t,e=rt.workingColorSpace){return rt.fromWorkingColorSpace(Dt.copy(this),e),t.r=Dt.r,t.g=Dt.g,t.b=Dt.b,t}getStyle(t=he){rt.fromWorkingColorSpace(Dt.copy(this),t);const e=Dt.r,i=Dt.g,r=Dt.b;return t!==he?`color(${t} ${e.toFixed(3)} ${i.toFixed(3)} ${r.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(i*255)},${Math.round(r*255)})`}offsetHSL(t,e,i){return this.getHSL(De),this.setHSL(De.h+t,De.s+e,De.l+i)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,i){return this.r=t.r+(e.r-t.r)*i,this.g=t.g+(e.g-t.g)*i,this.b=t.b+(e.b-t.b)*i,this}lerpHSL(t,e){this.getHSL(De),t.getHSL(vi);const i=ii(De.h,vi.h,e),r=ii(De.s,vi.s,e),s=ii(De.l,vi.l,e);return this.setHSL(i,r,s),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,i=this.g,r=this.b,s=t.elements;return this.r=s[0]*e+s[3]*i+s[6]*r,this.g=s[1]*e+s[4]*i+s[7]*r,this.b=s[2]*e+s[5]*i+s[8]*r,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Dt=new j0;j0.NAMES=r8;let ta=0;class an extends sn{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:ta++}),this.uuid=be(),this.name="",this.type="Material",this.blending=Ln,this.side=He,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=h9,this.blendDst=f9,this.blendEquation=$e,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new j0(0,0,0),this.blendAlpha=0,this.depthFunc=In,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Er,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=ln,this.stencilZFail=ln,this.stencilZPass=ln,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const i=t[e];if(i===void 0){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const r=this[e];if(r===void 0){console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);continue}r&&r.isColor?r.set(i):r&&r.isVector3&&i&&i.isVector3?r.copy(i):this[e]=i}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const i={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),this.roughness!==void 0&&(i.roughness=this.roughness),this.metalness!==void 0&&(i.metalness=this.metalness),this.sheen!==void 0&&(i.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(i.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(i.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(i.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(i.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(i.shininess=this.shininess),this.clearcoat!==void 0&&(i.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(i.dispersion=this.dispersion),this.iridescence!==void 0&&(i.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(i.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(i.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(i.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(i.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(i.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(i.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(i.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(t).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(t).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(t).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(t).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(t).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(i.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(i.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(i.combine=this.combine)),this.envMapRotation!==void 0&&(i.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(i.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(i.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(i.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(i.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(i.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(i.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(i.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(i.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(i.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(i.size=this.size),this.shadowSide!==null&&(i.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(i.sizeAttenuation=this.sizeAttenuation),this.blending!==Ln&&(i.blending=this.blending),this.side!==He&&(i.side=this.side),this.vertexColors===!0&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),this.transparent===!0&&(i.transparent=!0),this.blendSrc!==h9&&(i.blendSrc=this.blendSrc),this.blendDst!==f9&&(i.blendDst=this.blendDst),this.blendEquation!==$e&&(i.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(i.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(i.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(i.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(i.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(i.blendAlpha=this.blendAlpha),this.depthFunc!==In&&(i.depthFunc=this.depthFunc),this.depthTest===!1&&(i.depthTest=this.depthTest),this.depthWrite===!1&&(i.depthWrite=this.depthWrite),this.colorWrite===!1&&(i.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(i.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==Er&&(i.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(i.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(i.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==ln&&(i.stencilFail=this.stencilFail),this.stencilZFail!==ln&&(i.stencilZFail=this.stencilZFail),this.stencilZPass!==ln&&(i.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(i.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(i.rotation=this.rotation),this.polygonOffset===!0&&(i.polygonOffset=!0),this.polygonOffsetFactor!==0&&(i.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(i.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(i.linewidth=this.linewidth),this.dashSize!==void 0&&(i.dashSize=this.dashSize),this.gapSize!==void 0&&(i.gapSize=this.gapSize),this.scale!==void 0&&(i.scale=this.scale),this.dithering===!0&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),this.alphaHash===!0&&(i.alphaHash=!0),this.alphaToCoverage===!0&&(i.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(i.premultipliedAlpha=!0),this.forceSinglePass===!0&&(i.forceSinglePass=!0),this.wireframe===!0&&(i.wireframe=!0),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(i.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(i.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(i.flatShading=!0),this.visible===!1&&(i.visible=!1),this.toneMapped===!1&&(i.toneMapped=!1),this.fog===!1&&(i.fog=!1),Object.keys(this.userData).length>0&&(i.userData=this.userData);function r(s){const a=[];for(const o in s){const l=s[o];delete l.metadata,a.push(l)}return a}if(e){const s=r(t.textures),a=r(t.images);s.length>0&&(i.textures=s),a.length>0&&(i.images=a)}return i}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let i=null;if(e!==null){const r=e.length;i=new Array(r);for(let s=0;s!==r;++s)i[s]=e[s].clone()}return this.clippingPlanes=i,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class s8 extends an{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new j0(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new me,this.combine=zs,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const xt=new U,xi=new F0;class $t{constructor(t,e,i=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=i,this.usage=K9,this.updateRanges=[],this.gpuType=ye,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,i){t*=this.itemSize,i*=e.itemSize;for(let r=0,s=this.itemSize;r<s;r++)this.array[t+r]=e.array[i+r];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,i=this.count;e<i;e++)xi.fromBufferAttribute(this,e),xi.applyMatrix3(t),this.setXY(e,xi.x,xi.y);else if(this.itemSize===3)for(let e=0,i=this.count;e<i;e++)xt.fromBufferAttribute(this,e),xt.applyMatrix3(t),this.setXYZ(e,xt.x,xt.y,xt.z);return this}applyMatrix4(t){for(let e=0,i=this.count;e<i;e++)xt.fromBufferAttribute(this,e),xt.applyMatrix4(t),this.setXYZ(e,xt.x,xt.y,xt.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)xt.fromBufferAttribute(this,e),xt.applyNormalMatrix(t),this.setXYZ(e,xt.x,xt.y,xt.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)xt.fromBufferAttribute(this,e),xt.transformDirection(t),this.setXYZ(e,xt.x,xt.y,xt.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let i=this.array[t*this.itemSize+e];return this.normalized&&(i=se(i,this.array)),i}setComponent(t,e,i){return this.normalized&&(i=at(i,this.array)),this.array[t*this.itemSize+e]=i,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=se(e,this.array)),e}setX(t,e){return this.normalized&&(e=at(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=se(e,this.array)),e}setY(t,e){return this.normalized&&(e=at(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=se(e,this.array)),e}setZ(t,e){return this.normalized&&(e=at(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=se(e,this.array)),e}setW(t,e){return this.normalized&&(e=at(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,i){return t*=this.itemSize,this.normalized&&(e=at(e,this.array),i=at(i,this.array)),this.array[t+0]=e,this.array[t+1]=i,this}setXYZ(t,e,i,r){return t*=this.itemSize,this.normalized&&(e=at(e,this.array),i=at(i,this.array),r=at(r,this.array)),this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=r,this}setXYZW(t,e,i,r,s){return t*=this.itemSize,this.normalized&&(e=at(e,this.array),i=at(i,this.array),r=at(r,this.array),s=at(s,this.array)),this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=r,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==K9&&(t.usage=this.usage),t}}class a8 extends $t{constructor(t,e,i){super(new Uint16Array(t),e,i)}}class o8 extends $t{constructor(t,e,i){super(new Uint32Array(t),e,i)}}class Gt extends $t{constructor(t,e,i){super(new Float32Array(t),e,i)}}let ea=0;const Yt=new mt,G1=new At,vn=new U,Xt=new Ve,Zn=new Ve,bt=new U;class Jt extends sn{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:ea++}),this.uuid=be(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(Qs(t)?o8:a8)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,i=0){this.groups.push({start:t,count:e,materialIndex:i})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const i=this.attributes.normal;if(i!==void 0){const s=new H0().getNormalMatrix(t);i.applyNormalMatrix(s),i.needsUpdate=!0}const r=this.attributes.tangent;return r!==void 0&&(r.transformDirection(t),r.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return Yt.makeRotationFromQuaternion(t),this.applyMatrix4(Yt),this}rotateX(t){return Yt.makeRotationX(t),this.applyMatrix4(Yt),this}rotateY(t){return Yt.makeRotationY(t),this.applyMatrix4(Yt),this}rotateZ(t){return Yt.makeRotationZ(t),this.applyMatrix4(Yt),this}translate(t,e,i){return Yt.makeTranslation(t,e,i),this.applyMatrix4(Yt),this}scale(t,e,i){return Yt.makeScale(t,e,i),this.applyMatrix4(Yt),this}lookAt(t){return G1.lookAt(t),G1.updateMatrix(),this.applyMatrix4(G1.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(vn).negate(),this.translate(vn.x,vn.y,vn.z),this}setFromPoints(t){const e=[];for(let i=0,r=t.length;i<r;i++){const s=t[i];e.push(s.x,s.y,s.z||0)}return this.setAttribute("position",new Gt(e,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Ve);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new U(-1/0,-1/0,-1/0),new U(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let i=0,r=e.length;i<r;i++){const s=e[i];Xt.setFromBufferAttribute(s),this.morphTargetsRelative?(bt.addVectors(this.boundingBox.min,Xt.min),this.boundingBox.expandByPoint(bt),bt.addVectors(this.boundingBox.max,Xt.max),this.boundingBox.expandByPoint(bt)):(this.boundingBox.expandByPoint(Xt.min),this.boundingBox.expandByPoint(Xt.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Gn);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new U,1/0);return}if(t){const i=this.boundingSphere.center;if(Xt.setFromBufferAttribute(t),e)for(let s=0,a=e.length;s<a;s++){const o=e[s];Zn.setFromBufferAttribute(o),this.morphTargetsRelative?(bt.addVectors(Xt.min,Zn.min),Xt.expandByPoint(bt),bt.addVectors(Xt.max,Zn.max),Xt.expandByPoint(bt)):(Xt.expandByPoint(Zn.min),Xt.expandByPoint(Zn.max))}Xt.getCenter(i);let r=0;for(let s=0,a=t.count;s<a;s++)bt.fromBufferAttribute(t,s),r=Math.max(r,i.distanceToSquared(bt));if(e)for(let s=0,a=e.length;s<a;s++){const o=e[s],l=this.morphTargetsRelative;for(let c=0,h=o.count;c<h;c++)bt.fromBufferAttribute(o,c),l&&(vn.fromBufferAttribute(t,c),bt.add(vn)),r=Math.max(r,i.distanceToSquared(bt))}this.boundingSphere.radius=Math.sqrt(r),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const i=e.position,r=e.normal,s=e.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new $t(new Float32Array(4*i.count),4));const a=this.getAttribute("tangent"),o=[],l=[];for(let O=0;O<i.count;O++)o[O]=new U,l[O]=new U;const c=new U,h=new U,p=new U,f=new F0,m=new F0,g=new F0,x=new U,u=new U;function d(O,s0,_){c.fromBufferAttribute(i,O),h.fromBufferAttribute(i,s0),p.fromBufferAttribute(i,_),f.fromBufferAttribute(s,O),m.fromBufferAttribute(s,s0),g.fromBufferAttribute(s,_),h.sub(c),p.sub(c),m.sub(f),g.sub(f);const M=1/(m.x*g.y-g.x*m.y);isFinite(M)&&(x.copy(h).multiplyScalar(g.y).addScaledVector(p,-m.y).multiplyScalar(M),u.copy(p).multiplyScalar(m.x).addScaledVector(h,-g.x).multiplyScalar(M),o[O].add(x),o[s0].add(x),o[_].add(x),l[O].add(u),l[s0].add(u),l[_].add(u))}let A=this.groups;A.length===0&&(A=[{start:0,count:t.count}]);for(let O=0,s0=A.length;O<s0;++O){const _=A[O],M=_.start,j=_.count;for(let k=M,J=M+j;k<J;k+=3)d(t.getX(k+0),t.getX(k+1),t.getX(k+2))}const y=new U,T=new U,G=new U,D=new U;function w(O){G.fromBufferAttribute(r,O),D.copy(G);const s0=o[O];y.copy(s0),y.sub(G.multiplyScalar(G.dot(s0))).normalize(),T.crossVectors(D,s0);const M=T.dot(l[O])<0?-1:1;a.setXYZW(O,y.x,y.y,y.z,M)}for(let O=0,s0=A.length;O<s0;++O){const _=A[O],M=_.start,j=_.count;for(let k=M,J=M+j;k<J;k+=3)w(t.getX(k+0)),w(t.getX(k+1)),w(t.getX(k+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let i=this.getAttribute("normal");if(i===void 0)i=new $t(new Float32Array(e.count*3),3),this.setAttribute("normal",i);else for(let f=0,m=i.count;f<m;f++)i.setXYZ(f,0,0,0);const r=new U,s=new U,a=new U,o=new U,l=new U,c=new U,h=new U,p=new U;if(t)for(let f=0,m=t.count;f<m;f+=3){const g=t.getX(f+0),x=t.getX(f+1),u=t.getX(f+2);r.fromBufferAttribute(e,g),s.fromBufferAttribute(e,x),a.fromBufferAttribute(e,u),h.subVectors(a,s),p.subVectors(r,s),h.cross(p),o.fromBufferAttribute(i,g),l.fromBufferAttribute(i,x),c.fromBufferAttribute(i,u),o.add(h),l.add(h),c.add(h),i.setXYZ(g,o.x,o.y,o.z),i.setXYZ(x,l.x,l.y,l.z),i.setXYZ(u,c.x,c.y,c.z)}else for(let f=0,m=e.count;f<m;f+=3)r.fromBufferAttribute(e,f+0),s.fromBufferAttribute(e,f+1),a.fromBufferAttribute(e,f+2),h.subVectors(a,s),p.subVectors(r,s),h.cross(p),i.setXYZ(f+0,h.x,h.y,h.z),i.setXYZ(f+1,h.x,h.y,h.z),i.setXYZ(f+2,h.x,h.y,h.z);this.normalizeNormals(),i.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,i=t.count;e<i;e++)bt.fromBufferAttribute(t,e),bt.normalize(),t.setXYZ(e,bt.x,bt.y,bt.z)}toNonIndexed(){function t(o,l){const c=o.array,h=o.itemSize,p=o.normalized,f=new c.constructor(l.length*h);let m=0,g=0;for(let x=0,u=l.length;x<u;x++){o.isInterleavedBufferAttribute?m=l[x]*o.data.stride+o.offset:m=l[x]*h;for(let d=0;d<h;d++)f[g++]=c[m++]}return new $t(f,h,p)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Jt,i=this.index.array,r=this.attributes;for(const o in r){const l=r[o],c=t(l,i);e.setAttribute(o,c)}const s=this.morphAttributes;for(const o in s){const l=[],c=s[o];for(let h=0,p=c.length;h<p;h++){const f=c[h],m=t(f,i);l.push(m)}e.morphAttributes[o]=l}e.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let o=0,l=a.length;o<l;o++){const c=a[o];e.addGroup(c.start,c.count,c.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(t[c]=l[c]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const i=this.attributes;for(const l in i){const c=i[l];t.data.attributes[l]=c.toJSON(t.data)}const r={};let s=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],h=[];for(let p=0,f=c.length;p<f;p++){const m=c[p];h.push(m.toJSON(t.data))}h.length>0&&(r[l]=h,s=!0)}s&&(t.data.morphAttributes=r,t.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(t.data.groups=JSON.parse(JSON.stringify(a)));const o=this.boundingSphere;return o!==null&&(t.data.boundingSphere={center:o.center.toArray(),radius:o.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const i=t.index;i!==null&&this.setIndex(i.clone(e));const r=t.attributes;for(const c in r){const h=r[c];this.setAttribute(c,h.clone(e))}const s=t.morphAttributes;for(const c in s){const h=[],p=s[c];for(let f=0,m=p.length;f<m;f++)h.push(p[f].clone(e));this.morphAttributes[c]=h}this.morphTargetsRelative=t.morphTargetsRelative;const a=t.groups;for(let c=0,h=a.length;c<h;c++){const p=a[c];this.addGroup(p.start,p.count,p.materialIndex)}const o=t.boundingBox;o!==null&&(this.boundingBox=o.clone());const l=t.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Br=new mt,Xe=new n8,Si=new Gn,zr=new U,Mi=new U,yi=new U,Ei=new U,V1=new U,bi=new U,Hr=new U,Ai=new U;class oe extends At{constructor(t=new Jt,e=new s8){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,i=Object.keys(e);if(i.length>0){const r=e[i[0]];if(r!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,a=r.length;s<a;s++){const o=r[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}getVertexPosition(t,e){const i=this.geometry,r=i.attributes.position,s=i.morphAttributes.position,a=i.morphTargetsRelative;e.fromBufferAttribute(r,t);const o=this.morphTargetInfluences;if(s&&o){bi.set(0,0,0);for(let l=0,c=s.length;l<c;l++){const h=o[l],p=s[l];h!==0&&(V1.fromBufferAttribute(p,t),a?bi.addScaledVector(V1,h):bi.addScaledVector(V1.sub(e),h))}e.add(bi)}return e}raycast(t,e){const i=this.geometry,r=this.material,s=this.matrixWorld;r!==void 0&&(i.boundingSphere===null&&i.computeBoundingSphere(),Si.copy(i.boundingSphere),Si.applyMatrix4(s),Xe.copy(t.ray).recast(t.near),!(Si.containsPoint(Xe.origin)===!1&&(Xe.intersectSphere(Si,zr)===null||Xe.origin.distanceToSquared(zr)>(t.far-t.near)**2))&&(Br.copy(s).invert(),Xe.copy(t.ray).applyMatrix4(Br),!(i.boundingBox!==null&&Xe.intersectsBox(i.boundingBox)===!1)&&this._computeIntersections(t,e,Xe)))}_computeIntersections(t,e,i){let r;const s=this.geometry,a=this.material,o=s.index,l=s.attributes.position,c=s.attributes.uv,h=s.attributes.uv1,p=s.attributes.normal,f=s.groups,m=s.drawRange;if(o!==null)if(Array.isArray(a))for(let g=0,x=f.length;g<x;g++){const u=f[g],d=a[u.materialIndex],A=Math.max(u.start,m.start),y=Math.min(o.count,Math.min(u.start+u.count,m.start+m.count));for(let T=A,G=y;T<G;T+=3){const D=o.getX(T),w=o.getX(T+1),O=o.getX(T+2);r=Ti(this,d,t,i,c,h,p,D,w,O),r&&(r.faceIndex=Math.floor(T/3),r.face.materialIndex=u.materialIndex,e.push(r))}}else{const g=Math.max(0,m.start),x=Math.min(o.count,m.start+m.count);for(let u=g,d=x;u<d;u+=3){const A=o.getX(u),y=o.getX(u+1),T=o.getX(u+2);r=Ti(this,a,t,i,c,h,p,A,y,T),r&&(r.faceIndex=Math.floor(u/3),e.push(r))}}else if(l!==void 0)if(Array.isArray(a))for(let g=0,x=f.length;g<x;g++){const u=f[g],d=a[u.materialIndex],A=Math.max(u.start,m.start),y=Math.min(l.count,Math.min(u.start+u.count,m.start+m.count));for(let T=A,G=y;T<G;T+=3){const D=T,w=T+1,O=T+2;r=Ti(this,d,t,i,c,h,p,D,w,O),r&&(r.faceIndex=Math.floor(T/3),r.face.materialIndex=u.materialIndex,e.push(r))}}else{const g=Math.max(0,m.start),x=Math.min(l.count,m.start+m.count);for(let u=g,d=x;u<d;u+=3){const A=u,y=u+1,T=u+2;r=Ti(this,a,t,i,c,h,p,A,y,T),r&&(r.faceIndex=Math.floor(u/3),e.push(r))}}}}function na(n,t,e,i,r,s,a,o){let l;if(t.side===Ht?l=i.intersectTriangle(a,s,r,!0,o):l=i.intersectTriangle(r,s,a,t.side===He,o),l===null)return null;Ai.copy(o),Ai.applyMatrix4(n.matrixWorld);const c=e.ray.origin.distanceTo(Ai);return c<e.near||c>e.far?null:{distance:c,point:Ai.clone(),object:n}}function Ti(n,t,e,i,r,s,a,o,l,c){n.getVertexPosition(o,Mi),n.getVertexPosition(l,yi),n.getVertexPosition(c,Ei);const h=na(n,t,e,i,Mi,yi,Ei,Hr);if(h){const p=new U;Zt.getBarycoord(Hr,Mi,yi,Ei,p),r&&(h.uv=Zt.getInterpolatedAttribute(r,o,l,c,p,new F0)),s&&(h.uv1=Zt.getInterpolatedAttribute(s,o,l,c,p,new F0)),a&&(h.normal=Zt.getInterpolatedAttribute(a,o,l,c,p,new U),h.normal.dot(i.direction)>0&&h.normal.multiplyScalar(-1));const f={a:o,b:l,c,normal:new U,materialIndex:0};Zt.getNormal(Mi,yi,Ei,f.normal),h.face=f,h.barycoord=p}return h}class li extends Jt{constructor(t=1,e=1,i=1,r=1,s=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:r,heightSegments:s,depthSegments:a};const o=this;r=Math.floor(r),s=Math.floor(s),a=Math.floor(a);const l=[],c=[],h=[],p=[];let f=0,m=0;g("z","y","x",-1,-1,i,e,t,a,s,0),g("z","y","x",1,-1,i,e,-t,a,s,1),g("x","z","y",1,1,t,i,e,r,a,2),g("x","z","y",1,-1,t,i,-e,r,a,3),g("x","y","z",1,-1,t,e,i,r,s,4),g("x","y","z",-1,-1,t,e,-i,r,s,5),this.setIndex(l),this.setAttribute("position",new Gt(c,3)),this.setAttribute("normal",new Gt(h,3)),this.setAttribute("uv",new Gt(p,2));function g(x,u,d,A,y,T,G,D,w,O,s0){const _=T/w,M=G/O,j=T/2,k=G/2,J=D/2,X=w+1,q=O+1;let t0=0,V=0;const f0=new U;for(let d0=0;d0<q;d0++){const l0=d0*M-k;for(let k0=0;k0<X;k0++){const K0=k0*_-j;f0[x]=K0*A,f0[u]=l0*y,f0[d]=J,c.push(f0.x,f0.y,f0.z),f0[x]=0,f0[u]=0,f0[d]=D>0?1:-1,h.push(f0.x,f0.y,f0.z),p.push(k0/w),p.push(1-d0/O),t0+=1}}for(let d0=0;d0<O;d0++)for(let l0=0;l0<w;l0++){const k0=f+l0+X*d0,K0=f+l0+X*(d0+1),Z=f+(l0+1)+X*(d0+1),n0=f+(l0+1)+X*d0;l.push(k0,K0,n0),l.push(K0,Z,n0),V+=6}o.addGroup(m,V,s0),m+=V,f+=t0}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new li(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function zn(n){const t={};for(const e in n){t[e]={};for(const i in n[e]){const r=n[e][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?r.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][i]=null):t[e][i]=r.clone():Array.isArray(r)?t[e][i]=r.slice():t[e][i]=r}}return t}function Ft(n){const t={};for(let e=0;e<n.length;e++){const i=zn(n[e]);for(const r in i)t[r]=i[r]}return t}function ia(n){const t=[];for(let e=0;e<n.length;e++)t.push(n[e].clone());return t}function l8(n){const t=n.getRenderTarget();return t===null?n.outputColorSpace:t.isXRRenderTarget===!0?t.texture.colorSpace:rt.workingColorSpace}const hr={clone:zn,merge:Ft};var ra=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,sa=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class Te extends an{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=ra,this.fragmentShader=sa,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=zn(t.uniforms),this.uniformsGroups=ia(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const r in this.uniforms){const a=this.uniforms[r].value;a&&a.isTexture?e.uniforms[r]={type:"t",value:a.toJSON(t).uuid}:a&&a.isColor?e.uniforms[r]={type:"c",value:a.getHex()}:a&&a.isVector2?e.uniforms[r]={type:"v2",value:a.toArray()}:a&&a.isVector3?e.uniforms[r]={type:"v3",value:a.toArray()}:a&&a.isVector4?e.uniforms[r]={type:"v4",value:a.toArray()}:a&&a.isMatrix3?e.uniforms[r]={type:"m3",value:a.toArray()}:a&&a.isMatrix4?e.uniforms[r]={type:"m4",value:a.toArray()}:e.uniforms[r]={value:a}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const i={};for(const r in this.extensions)this.extensions[r]===!0&&(i[r]=!0);return Object.keys(i).length>0&&(e.extensions=i),e}}class c8 extends At{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new mt,this.projectionMatrix=new mt,this.projectionMatrixInverse=new mt,this.coordinateSystem=Ee}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const Ue=new U,Gr=new F0,Vr=new F0;class jt extends c8{constructor(t=50,e=1,i=.1,r=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=i,this.far=r,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=si*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(ni*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return si*2*Math.atan(Math.tan(ni*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,i){Ue.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(Ue.x,Ue.y).multiplyScalar(-t/Ue.z),Ue.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),i.set(Ue.x,Ue.y).multiplyScalar(-t/Ue.z)}getViewSize(t,e){return this.getViewBounds(t,Gr,Vr),e.subVectors(Vr,Gr)}setViewOffset(t,e,i,r,s,a){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=r,this.view.width=s,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(ni*.5*this.fov)/this.zoom,i=2*e,r=this.aspect*i,s=-.5*r;const a=this.view;if(this.view!==null&&this.view.enabled){const l=a.fullWidth,c=a.fullHeight;s+=a.offsetX*r/l,e-=a.offsetY*i/c,r*=a.width/l,i*=a.height/c}const o=this.filmOffset;o!==0&&(s+=t*o/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+r,e,e-i,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const xn=-90,Sn=1;class aa extends At{constructor(t,e,i){super(),this.type="CubeCamera",this.renderTarget=i,this.coordinateSystem=null,this.activeMipmapLevel=0;const r=new jt(xn,Sn,t,e);r.layers=this.layers,this.add(r);const s=new jt(xn,Sn,t,e);s.layers=this.layers,this.add(s);const a=new jt(xn,Sn,t,e);a.layers=this.layers,this.add(a);const o=new jt(xn,Sn,t,e);o.layers=this.layers,this.add(o);const l=new jt(xn,Sn,t,e);l.layers=this.layers,this.add(l);const c=new jt(xn,Sn,t,e);c.layers=this.layers,this.add(c)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[i,r,s,a,o,l]=e;for(const c of e)this.remove(c);if(t===Ee)i.up.set(0,1,0),i.lookAt(1,0,0),r.up.set(0,1,0),r.lookAt(-1,0,0),s.up.set(0,0,-1),s.lookAt(0,1,0),a.up.set(0,0,1),a.lookAt(0,-1,0),o.up.set(0,1,0),o.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(t===l1)i.up.set(0,-1,0),i.lookAt(-1,0,0),r.up.set(0,-1,0),r.lookAt(1,0,0),s.up.set(0,0,1),s.lookAt(0,1,0),a.up.set(0,0,-1),a.lookAt(0,-1,0),o.up.set(0,-1,0),o.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);for(const c of e)this.add(c),c.updateMatrixWorld()}update(t,e){this.parent===null&&this.updateMatrixWorld();const{renderTarget:i,activeMipmapLevel:r}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[s,a,o,l,c,h]=this.children,p=t.getRenderTarget(),f=t.getActiveCubeFace(),m=t.getActiveMipmapLevel(),g=t.xr.enabled;t.xr.enabled=!1;const x=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,t.setRenderTarget(i,0,r),t.render(e,s),t.setRenderTarget(i,1,r),t.render(e,a),t.setRenderTarget(i,2,r),t.render(e,o),t.setRenderTarget(i,3,r),t.render(e,l),t.setRenderTarget(i,4,r),t.render(e,c),i.texture.generateMipmaps=x,t.setRenderTarget(i,5,r),t.render(e,h),t.setRenderTarget(p,f,m),t.xr.enabled=g,i.texture.needsPMREMUpdate=!0}}class u8 extends Bt{constructor(t,e,i,r,s,a,o,l,c,h){t=t!==void 0?t:[],e=e!==void 0?e:Nn,super(t,e,i,r,s,a,o,l,c,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class oa extends rn{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const i={width:t,height:t,depth:1},r=[i,i,i,i,i,i];this.texture=new u8(r,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=e.generateMipmaps!==void 0?e.generateMipmaps:!1,this.texture.minFilter=e.minFilter!==void 0?e.minFilter:re}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const i={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},r=new li(5,5,5),s=new Te({name:"CubemapFromEquirect",uniforms:zn(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:Ht,blending:Be});s.uniforms.tEquirect.value=e;const a=new oe(r,s),o=e.minFilter;return e.minFilter===tn&&(e.minFilter=re),new aa(1,10,this).update(t,a),e.minFilter=o,a.geometry.dispose(),a.material.dispose(),this}clear(t,e,i,r){const s=t.getRenderTarget();for(let a=0;a<6;a++)t.setRenderTarget(this,a),t.clear(e,i,r);t.setRenderTarget(s)}}const k1=new U,la=new U,ca=new H0;class Ze{constructor(t=new U(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,i,r){return this.normal.set(t,e,i),this.constant=r,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,i){const r=k1.subVectors(i,e).cross(la.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(r,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const i=t.delta(k1),r=this.normal.dot(i);if(r===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/r;return s<0||s>1?null:e.copy(t.start).addScaledVector(i,s)}intersectsLine(t){const e=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return e<0&&i>0||i<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const i=e||ca.getNormalMatrix(t),r=this.coplanarPoint(k1).applyMatrix4(t),s=this.normal.applyMatrix3(i).normalize();return this.constant=-r.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}const qe=new Gn,wi=new U;class fr{constructor(t=new Ze,e=new Ze,i=new Ze,r=new Ze,s=new Ze,a=new Ze){this.planes=[t,e,i,r,s,a]}set(t,e,i,r,s,a){const o=this.planes;return o[0].copy(t),o[1].copy(e),o[2].copy(i),o[3].copy(r),o[4].copy(s),o[5].copy(a),this}copy(t){const e=this.planes;for(let i=0;i<6;i++)e[i].copy(t.planes[i]);return this}setFromProjectionMatrix(t,e=Ee){const i=this.planes,r=t.elements,s=r[0],a=r[1],o=r[2],l=r[3],c=r[4],h=r[5],p=r[6],f=r[7],m=r[8],g=r[9],x=r[10],u=r[11],d=r[12],A=r[13],y=r[14],T=r[15];if(i[0].setComponents(l-s,f-c,u-m,T-d).normalize(),i[1].setComponents(l+s,f+c,u+m,T+d).normalize(),i[2].setComponents(l+a,f+h,u+g,T+A).normalize(),i[3].setComponents(l-a,f-h,u-g,T-A).normalize(),i[4].setComponents(l-o,f-p,u-x,T-y).normalize(),e===Ee)i[5].setComponents(l+o,f+p,u+x,T+y).normalize();else if(e===l1)i[5].setComponents(o,p,x,y).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);return this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),qe.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;e.boundingSphere===null&&e.computeBoundingSphere(),qe.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(qe)}intersectsSprite(t){return qe.center.set(0,0,0),qe.radius=.7071067811865476,qe.applyMatrix4(t.matrixWorld),this.intersectsSphere(qe)}intersectsSphere(t){const e=this.planes,i=t.center,r=-t.radius;for(let s=0;s<6;s++)if(e[s].distanceToPoint(i)<r)return!1;return!0}intersectsBox(t){const e=this.planes;for(let i=0;i<6;i++){const r=e[i];if(wi.x=r.normal.x>0?t.max.x:t.min.x,wi.y=r.normal.y>0?t.max.y:t.min.y,wi.z=r.normal.z>0?t.max.z:t.min.z,r.distanceToPoint(wi)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function h8(){let n=null,t=!1,e=null,i=null;function r(s,a){e(s,a),i=n.requestAnimationFrame(r)}return{start:function(){t!==!0&&e!==null&&(i=n.requestAnimationFrame(r),t=!0)},stop:function(){n.cancelAnimationFrame(i),t=!1},setAnimationLoop:function(s){e=s},setContext:function(s){n=s}}}function ua(n){const t=new WeakMap;function e(o,l){const c=o.array,h=o.usage,p=c.byteLength,f=n.createBuffer();n.bindBuffer(l,f),n.bufferData(l,c,h),o.onUploadCallback();let m;if(c instanceof Float32Array)m=n.FLOAT;else if(c instanceof Uint16Array)o.isFloat16BufferAttribute?m=n.HALF_FLOAT:m=n.UNSIGNED_SHORT;else if(c instanceof Int16Array)m=n.SHORT;else if(c instanceof Uint32Array)m=n.UNSIGNED_INT;else if(c instanceof Int32Array)m=n.INT;else if(c instanceof Int8Array)m=n.BYTE;else if(c instanceof Uint8Array)m=n.UNSIGNED_BYTE;else if(c instanceof Uint8ClampedArray)m=n.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+c);return{buffer:f,type:m,bytesPerElement:c.BYTES_PER_ELEMENT,version:o.version,size:p}}function i(o,l,c){const h=l.array,p=l.updateRanges;if(n.bindBuffer(c,o),p.length===0)n.bufferSubData(c,0,h);else{p.sort((m,g)=>m.start-g.start);let f=0;for(let m=1;m<p.length;m++){const g=p[f],x=p[m];x.start<=g.start+g.count+1?g.count=Math.max(g.count,x.start+x.count-g.start):(++f,p[f]=x)}p.length=f+1;for(let m=0,g=p.length;m<g;m++){const x=p[m];n.bufferSubData(c,x.start*h.BYTES_PER_ELEMENT,h,x.start,x.count)}l.clearUpdateRanges()}l.onUploadCallback()}function r(o){return o.isInterleavedBufferAttribute&&(o=o.data),t.get(o)}function s(o){o.isInterleavedBufferAttribute&&(o=o.data);const l=t.get(o);l&&(n.deleteBuffer(l.buffer),t.delete(o))}function a(o,l){if(o.isInterleavedBufferAttribute&&(o=o.data),o.isGLBufferAttribute){const h=t.get(o);(!h||h.version<o.version)&&t.set(o,{buffer:o.buffer,type:o.type,bytesPerElement:o.elementSize,version:o.version});return}const c=t.get(o);if(c===void 0)t.set(o,e(o,l));else if(c.version<o.version){if(c.size!==o.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");i(c.buffer,o,l),c.version=o.version}}return{get:r,remove:s,update:a}}class ci extends Jt{constructor(t=1,e=1,i=1,r=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:r};const s=t/2,a=e/2,o=Math.floor(i),l=Math.floor(r),c=o+1,h=l+1,p=t/o,f=e/l,m=[],g=[],x=[],u=[];for(let d=0;d<h;d++){const A=d*f-a;for(let y=0;y<c;y++){const T=y*p-s;g.push(T,-A,0),x.push(0,0,1),u.push(y/o),u.push(1-d/l)}}for(let d=0;d<l;d++)for(let A=0;A<o;A++){const y=A+c*d,T=A+c*(d+1),G=A+1+c*(d+1),D=A+1+c*d;m.push(y,T,D),m.push(T,G,D)}this.setIndex(m),this.setAttribute("position",new Gt(g,3)),this.setAttribute("normal",new Gt(x,3)),this.setAttribute("uv",new Gt(u,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new ci(t.width,t.height,t.widthSegments,t.heightSegments)}}var ha=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,fa=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,da=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,pa=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,ma=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,_a=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,ga=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,va=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,xa=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,Sa=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,Ma=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,ya=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,Ea=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,ba=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,Aa=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,Ta=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,wa=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,Ca=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,Ra=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,Pa=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,La=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,Da=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,Ua=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,Ia=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,Na=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,Fa=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,Oa=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,Ba=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,za=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,Ha=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,Ga="gl_FragColor = linearToOutputTexel( gl_FragColor );",Va=`
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);
vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}
vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}
vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,ka=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,Wa=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,Xa=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,qa=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,Ya=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,ja=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,Za=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,Ka=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,$a=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,Ja=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,Qa=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,t4=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,e4=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,n4=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,i4=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,r4=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,s4=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,a4=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,o4=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,l4=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,c4=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,u4=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,h4=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,f4=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,d4=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,p4=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,m4=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,_4=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,g4=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,v4=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,x4=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,S4=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,M4=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,y4=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,E4=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,b4=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,A4=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,T4=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,w4=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,C4=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,R4=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,P4=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,L4=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,D4=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,U4=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,I4=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,N4=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,F4=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,O4=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,B4=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,z4=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,H4=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,G4=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,V4=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,k4=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,W4=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,X4=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,q4=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,Y4=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,j4=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,Z4=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,K4=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,$4=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,J4=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,Q4=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,to=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,eo=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,no=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,io=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,ro=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,so=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
		
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
		
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		
		#else
		
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,ao=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,oo=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,lo=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,co=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const uo=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,ho=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,fo=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,po=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,mo=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,_o=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,go=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,vo=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,xo=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,So=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,Mo=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,yo=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,Eo=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,bo=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Ao=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,To=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,wo=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Co=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Ro=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,Po=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Lo=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,Do=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,Uo=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Io=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,No=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,Fo=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Oo=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Bo=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,zo=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,Ho=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Go=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Vo=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,ko=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,Wo=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,z0={alphahash_fragment:ha,alphahash_pars_fragment:fa,alphamap_fragment:da,alphamap_pars_fragment:pa,alphatest_fragment:ma,alphatest_pars_fragment:_a,aomap_fragment:ga,aomap_pars_fragment:va,batching_pars_vertex:xa,batching_vertex:Sa,begin_vertex:Ma,beginnormal_vertex:ya,bsdfs:Ea,iridescence_fragment:ba,bumpmap_pars_fragment:Aa,clipping_planes_fragment:Ta,clipping_planes_pars_fragment:wa,clipping_planes_pars_vertex:Ca,clipping_planes_vertex:Ra,color_fragment:Pa,color_pars_fragment:La,color_pars_vertex:Da,color_vertex:Ua,common:Ia,cube_uv_reflection_fragment:Na,defaultnormal_vertex:Fa,displacementmap_pars_vertex:Oa,displacementmap_vertex:Ba,emissivemap_fragment:za,emissivemap_pars_fragment:Ha,colorspace_fragment:Ga,colorspace_pars_fragment:Va,envmap_fragment:ka,envmap_common_pars_fragment:Wa,envmap_pars_fragment:Xa,envmap_pars_vertex:qa,envmap_physical_pars_fragment:i4,envmap_vertex:Ya,fog_vertex:ja,fog_pars_vertex:Za,fog_fragment:Ka,fog_pars_fragment:$a,gradientmap_pars_fragment:Ja,lightmap_pars_fragment:Qa,lights_lambert_fragment:t4,lights_lambert_pars_fragment:e4,lights_pars_begin:n4,lights_toon_fragment:r4,lights_toon_pars_fragment:s4,lights_phong_fragment:a4,lights_phong_pars_fragment:o4,lights_physical_fragment:l4,lights_physical_pars_fragment:c4,lights_fragment_begin:u4,lights_fragment_maps:h4,lights_fragment_end:f4,logdepthbuf_fragment:d4,logdepthbuf_pars_fragment:p4,logdepthbuf_pars_vertex:m4,logdepthbuf_vertex:_4,map_fragment:g4,map_pars_fragment:v4,map_particle_fragment:x4,map_particle_pars_fragment:S4,metalnessmap_fragment:M4,metalnessmap_pars_fragment:y4,morphinstance_vertex:E4,morphcolor_vertex:b4,morphnormal_vertex:A4,morphtarget_pars_vertex:T4,morphtarget_vertex:w4,normal_fragment_begin:C4,normal_fragment_maps:R4,normal_pars_fragment:P4,normal_pars_vertex:L4,normal_vertex:D4,normalmap_pars_fragment:U4,clearcoat_normal_fragment_begin:I4,clearcoat_normal_fragment_maps:N4,clearcoat_pars_fragment:F4,iridescence_pars_fragment:O4,opaque_fragment:B4,packing:z4,premultiplied_alpha_fragment:H4,project_vertex:G4,dithering_fragment:V4,dithering_pars_fragment:k4,roughnessmap_fragment:W4,roughnessmap_pars_fragment:X4,shadowmap_pars_fragment:q4,shadowmap_pars_vertex:Y4,shadowmap_vertex:j4,shadowmask_pars_fragment:Z4,skinbase_vertex:K4,skinning_pars_vertex:$4,skinning_vertex:J4,skinnormal_vertex:Q4,specularmap_fragment:to,specularmap_pars_fragment:eo,tonemapping_fragment:no,tonemapping_pars_fragment:io,transmission_fragment:ro,transmission_pars_fragment:so,uv_pars_fragment:ao,uv_pars_vertex:oo,uv_vertex:lo,worldpos_vertex:co,background_vert:uo,background_frag:ho,backgroundCube_vert:fo,backgroundCube_frag:po,cube_vert:mo,cube_frag:_o,depth_vert:go,depth_frag:vo,distanceRGBA_vert:xo,distanceRGBA_frag:So,equirect_vert:Mo,equirect_frag:yo,linedashed_vert:Eo,linedashed_frag:bo,meshbasic_vert:Ao,meshbasic_frag:To,meshlambert_vert:wo,meshlambert_frag:Co,meshmatcap_vert:Ro,meshmatcap_frag:Po,meshnormal_vert:Lo,meshnormal_frag:Do,meshphong_vert:Uo,meshphong_frag:Io,meshphysical_vert:No,meshphysical_frag:Fo,meshtoon_vert:Oo,meshtoon_frag:Bo,points_vert:zo,points_frag:Ho,shadow_vert:Go,shadow_frag:Vo,sprite_vert:ko,sprite_frag:Wo},c0={common:{diffuse:{value:new j0(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new H0},alphaMap:{value:null},alphaMapTransform:{value:new H0},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new H0}},envmap:{envMap:{value:null},envMapRotation:{value:new H0},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new H0}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new H0}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new H0},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new H0},normalScale:{value:new F0(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new H0},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new H0}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new H0}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new H0}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new j0(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new j0(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new H0},alphaTest:{value:0},uvTransform:{value:new H0}},sprite:{diffuse:{value:new j0(16777215)},opacity:{value:1},center:{value:new F0(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new H0},alphaMap:{value:null},alphaMapTransform:{value:new H0},alphaTest:{value:0}}},zt={basic:{uniforms:Ft([c0.common,c0.specularmap,c0.envmap,c0.aomap,c0.lightmap,c0.fog]),vertexShader:z0.meshbasic_vert,fragmentShader:z0.meshbasic_frag},lambert:{uniforms:Ft([c0.common,c0.specularmap,c0.envmap,c0.aomap,c0.lightmap,c0.emissivemap,c0.bumpmap,c0.normalmap,c0.displacementmap,c0.fog,c0.lights,{emissive:{value:new j0(0)}}]),vertexShader:z0.meshlambert_vert,fragmentShader:z0.meshlambert_frag},phong:{uniforms:Ft([c0.common,c0.specularmap,c0.envmap,c0.aomap,c0.lightmap,c0.emissivemap,c0.bumpmap,c0.normalmap,c0.displacementmap,c0.fog,c0.lights,{emissive:{value:new j0(0)},specular:{value:new j0(1118481)},shininess:{value:30}}]),vertexShader:z0.meshphong_vert,fragmentShader:z0.meshphong_frag},standard:{uniforms:Ft([c0.common,c0.envmap,c0.aomap,c0.lightmap,c0.emissivemap,c0.bumpmap,c0.normalmap,c0.displacementmap,c0.roughnessmap,c0.metalnessmap,c0.fog,c0.lights,{emissive:{value:new j0(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:z0.meshphysical_vert,fragmentShader:z0.meshphysical_frag},toon:{uniforms:Ft([c0.common,c0.aomap,c0.lightmap,c0.emissivemap,c0.bumpmap,c0.normalmap,c0.displacementmap,c0.gradientmap,c0.fog,c0.lights,{emissive:{value:new j0(0)}}]),vertexShader:z0.meshtoon_vert,fragmentShader:z0.meshtoon_frag},matcap:{uniforms:Ft([c0.common,c0.bumpmap,c0.normalmap,c0.displacementmap,c0.fog,{matcap:{value:null}}]),vertexShader:z0.meshmatcap_vert,fragmentShader:z0.meshmatcap_frag},points:{uniforms:Ft([c0.points,c0.fog]),vertexShader:z0.points_vert,fragmentShader:z0.points_frag},dashed:{uniforms:Ft([c0.common,c0.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:z0.linedashed_vert,fragmentShader:z0.linedashed_frag},depth:{uniforms:Ft([c0.common,c0.displacementmap]),vertexShader:z0.depth_vert,fragmentShader:z0.depth_frag},normal:{uniforms:Ft([c0.common,c0.bumpmap,c0.normalmap,c0.displacementmap,{opacity:{value:1}}]),vertexShader:z0.meshnormal_vert,fragmentShader:z0.meshnormal_frag},sprite:{uniforms:Ft([c0.sprite,c0.fog]),vertexShader:z0.sprite_vert,fragmentShader:z0.sprite_frag},background:{uniforms:{uvTransform:{value:new H0},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:z0.background_vert,fragmentShader:z0.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new H0}},vertexShader:z0.backgroundCube_vert,fragmentShader:z0.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:z0.cube_vert,fragmentShader:z0.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:z0.equirect_vert,fragmentShader:z0.equirect_frag},distanceRGBA:{uniforms:Ft([c0.common,c0.displacementmap,{referencePosition:{value:new U},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:z0.distanceRGBA_vert,fragmentShader:z0.distanceRGBA_frag},shadow:{uniforms:Ft([c0.lights,c0.fog,{color:{value:new j0(0)},opacity:{value:1}}]),vertexShader:z0.shadow_vert,fragmentShader:z0.shadow_frag}};zt.physical={uniforms:Ft([zt.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new H0},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new H0},clearcoatNormalScale:{value:new F0(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new H0},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new H0},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new H0},sheen:{value:0},sheenColor:{value:new j0(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new H0},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new H0},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new H0},transmissionSamplerSize:{value:new F0},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new H0},attenuationDistance:{value:0},attenuationColor:{value:new j0(0)},specularColor:{value:new j0(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new H0},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new H0},anisotropyVector:{value:new F0},anisotropyMap:{value:null},anisotropyMapTransform:{value:new H0}}]),vertexShader:z0.meshphysical_vert,fragmentShader:z0.meshphysical_frag};const Ci={r:0,b:0,g:0},Ye=new me,Xo=new mt;function qo(n,t,e,i,r,s,a){const o=new j0(0);let l=s===!0?0:1,c,h,p=null,f=0,m=null;function g(A){let y=A.isScene===!0?A.background:null;return y&&y.isTexture&&(y=(A.backgroundBlurriness>0?e:t).get(y)),y}function x(A){let y=!1;const T=g(A);T===null?d(o,l):T&&T.isColor&&(d(T,1),y=!0);const G=n.xr.getEnvironmentBlendMode();G==="additive"?i.buffers.color.setClear(0,0,0,1,a):G==="alpha-blend"&&i.buffers.color.setClear(0,0,0,0,a),(n.autoClear||y)&&(i.buffers.depth.setTest(!0),i.buffers.depth.setMask(!0),i.buffers.color.setMask(!0),n.clear(n.autoClearColor,n.autoClearDepth,n.autoClearStencil))}function u(A,y){const T=g(y);T&&(T.isCubeTexture||T.mapping===p1)?(h===void 0&&(h=new oe(new li(1,1,1),new Te({name:"BackgroundCubeMaterial",uniforms:zn(zt.backgroundCube.uniforms),vertexShader:zt.backgroundCube.vertexShader,fragmentShader:zt.backgroundCube.fragmentShader,side:Ht,depthTest:!1,depthWrite:!1,fog:!1})),h.geometry.deleteAttribute("normal"),h.geometry.deleteAttribute("uv"),h.onBeforeRender=function(G,D,w){this.matrixWorld.copyPosition(w.matrixWorld)},Object.defineProperty(h.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),r.update(h)),Ye.copy(y.backgroundRotation),Ye.x*=-1,Ye.y*=-1,Ye.z*=-1,T.isCubeTexture&&T.isRenderTargetTexture===!1&&(Ye.y*=-1,Ye.z*=-1),h.material.uniforms.envMap.value=T,h.material.uniforms.flipEnvMap.value=T.isCubeTexture&&T.isRenderTargetTexture===!1?-1:1,h.material.uniforms.backgroundBlurriness.value=y.backgroundBlurriness,h.material.uniforms.backgroundIntensity.value=y.backgroundIntensity,h.material.uniforms.backgroundRotation.value.setFromMatrix4(Xo.makeRotationFromEuler(Ye)),h.material.toneMapped=rt.getTransfer(T.colorSpace)!==pt,(p!==T||f!==T.version||m!==n.toneMapping)&&(h.material.needsUpdate=!0,p=T,f=T.version,m=n.toneMapping),h.layers.enableAll(),A.unshift(h,h.geometry,h.material,0,0,null)):T&&T.isTexture&&(c===void 0&&(c=new oe(new ci(2,2),new Te({name:"BackgroundMaterial",uniforms:zn(zt.background.uniforms),vertexShader:zt.background.vertexShader,fragmentShader:zt.background.fragmentShader,side:He,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(c)),c.material.uniforms.t2D.value=T,c.material.uniforms.backgroundIntensity.value=y.backgroundIntensity,c.material.toneMapped=rt.getTransfer(T.colorSpace)!==pt,T.matrixAutoUpdate===!0&&T.updateMatrix(),c.material.uniforms.uvTransform.value.copy(T.matrix),(p!==T||f!==T.version||m!==n.toneMapping)&&(c.material.needsUpdate=!0,p=T,f=T.version,m=n.toneMapping),c.layers.enableAll(),A.unshift(c,c.geometry,c.material,0,0,null))}function d(A,y){A.getRGB(Ci,l8(n)),i.buffers.color.setClear(Ci.r,Ci.g,Ci.b,y,a)}return{getClearColor:function(){return o},setClearColor:function(A,y=1){o.set(A),l=y,d(o,l)},getClearAlpha:function(){return l},setClearAlpha:function(A){l=A,d(o,l)},render:x,addToRenderList:u}}function Yo(n,t){const e=n.getParameter(n.MAX_VERTEX_ATTRIBS),i={},r=f(null);let s=r,a=!1;function o(_,M,j,k,J){let X=!1;const q=p(k,j,M);s!==q&&(s=q,c(s.object)),X=m(_,k,j,J),X&&g(_,k,j,J),J!==null&&t.update(J,n.ELEMENT_ARRAY_BUFFER),(X||a)&&(a=!1,T(_,M,j,k),J!==null&&n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,t.get(J).buffer))}function l(){return n.createVertexArray()}function c(_){return n.bindVertexArray(_)}function h(_){return n.deleteVertexArray(_)}function p(_,M,j){const k=j.wireframe===!0;let J=i[_.id];J===void 0&&(J={},i[_.id]=J);let X=J[M.id];X===void 0&&(X={},J[M.id]=X);let q=X[k];return q===void 0&&(q=f(l()),X[k]=q),q}function f(_){const M=[],j=[],k=[];for(let J=0;J<e;J++)M[J]=0,j[J]=0,k[J]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:M,enabledAttributes:j,attributeDivisors:k,object:_,attributes:{},index:null}}function m(_,M,j,k){const J=s.attributes,X=M.attributes;let q=0;const t0=j.getAttributes();for(const V in t0)if(t0[V].location>=0){const d0=J[V];let l0=X[V];if(l0===void 0&&(V==="instanceMatrix"&&_.instanceMatrix&&(l0=_.instanceMatrix),V==="instanceColor"&&_.instanceColor&&(l0=_.instanceColor)),d0===void 0||d0.attribute!==l0||l0&&d0.data!==l0.data)return!0;q++}return s.attributesNum!==q||s.index!==k}function g(_,M,j,k){const J={},X=M.attributes;let q=0;const t0=j.getAttributes();for(const V in t0)if(t0[V].location>=0){let d0=X[V];d0===void 0&&(V==="instanceMatrix"&&_.instanceMatrix&&(d0=_.instanceMatrix),V==="instanceColor"&&_.instanceColor&&(d0=_.instanceColor));const l0={};l0.attribute=d0,d0&&d0.data&&(l0.data=d0.data),J[V]=l0,q++}s.attributes=J,s.attributesNum=q,s.index=k}function x(){const _=s.newAttributes;for(let M=0,j=_.length;M<j;M++)_[M]=0}function u(_){d(_,0)}function d(_,M){const j=s.newAttributes,k=s.enabledAttributes,J=s.attributeDivisors;j[_]=1,k[_]===0&&(n.enableVertexAttribArray(_),k[_]=1),J[_]!==M&&(n.vertexAttribDivisor(_,M),J[_]=M)}function A(){const _=s.newAttributes,M=s.enabledAttributes;for(let j=0,k=M.length;j<k;j++)M[j]!==_[j]&&(n.disableVertexAttribArray(j),M[j]=0)}function y(_,M,j,k,J,X,q){q===!0?n.vertexAttribIPointer(_,M,j,J,X):n.vertexAttribPointer(_,M,j,k,J,X)}function T(_,M,j,k){x();const J=k.attributes,X=j.getAttributes(),q=M.defaultAttributeValues;for(const t0 in X){const V=X[t0];if(V.location>=0){let f0=J[t0];if(f0===void 0&&(t0==="instanceMatrix"&&_.instanceMatrix&&(f0=_.instanceMatrix),t0==="instanceColor"&&_.instanceColor&&(f0=_.instanceColor)),f0!==void 0){const d0=f0.normalized,l0=f0.itemSize,k0=t.get(f0);if(k0===void 0)continue;const K0=k0.buffer,Z=k0.type,n0=k0.bytesPerElement,y0=Z===n.INT||Z===n.UNSIGNED_INT||f0.gpuType===ir;if(f0.isInterleavedBufferAttribute){const x0=f0.data,R0=x0.stride,L0=f0.offset;if(x0.isInstancedInterleavedBuffer){for(let W0=0;W0<V.locationSize;W0++)d(V.location+W0,x0.meshPerAttribute);_.isInstancedMesh!==!0&&k._maxInstanceCount===void 0&&(k._maxInstanceCount=x0.meshPerAttribute*x0.count)}else for(let W0=0;W0<V.locationSize;W0++)u(V.location+W0);n.bindBuffer(n.ARRAY_BUFFER,K0);for(let W0=0;W0<V.locationSize;W0++)y(V.location+W0,l0/V.locationSize,Z,d0,R0*n0,(L0+l0/V.locationSize*W0)*n0,y0)}else{if(f0.isInstancedBufferAttribute){for(let x0=0;x0<V.locationSize;x0++)d(V.location+x0,f0.meshPerAttribute);_.isInstancedMesh!==!0&&k._maxInstanceCount===void 0&&(k._maxInstanceCount=f0.meshPerAttribute*f0.count)}else for(let x0=0;x0<V.locationSize;x0++)u(V.location+x0);n.bindBuffer(n.ARRAY_BUFFER,K0);for(let x0=0;x0<V.locationSize;x0++)y(V.location+x0,l0/V.locationSize,Z,d0,l0*n0,l0/V.locationSize*x0*n0,y0)}}else if(q!==void 0){const d0=q[t0];if(d0!==void 0)switch(d0.length){case 2:n.vertexAttrib2fv(V.location,d0);break;case 3:n.vertexAttrib3fv(V.location,d0);break;case 4:n.vertexAttrib4fv(V.location,d0);break;default:n.vertexAttrib1fv(V.location,d0)}}}}A()}function G(){O();for(const _ in i){const M=i[_];for(const j in M){const k=M[j];for(const J in k)h(k[J].object),delete k[J];delete M[j]}delete i[_]}}function D(_){if(i[_.id]===void 0)return;const M=i[_.id];for(const j in M){const k=M[j];for(const J in k)h(k[J].object),delete k[J];delete M[j]}delete i[_.id]}function w(_){for(const M in i){const j=i[M];if(j[_.id]===void 0)continue;const k=j[_.id];for(const J in k)h(k[J].object),delete k[J];delete j[_.id]}}function O(){s0(),a=!0,s!==r&&(s=r,c(s.object))}function s0(){r.geometry=null,r.program=null,r.wireframe=!1}return{setup:o,reset:O,resetDefaultState:s0,dispose:G,releaseStatesOfGeometry:D,releaseStatesOfProgram:w,initAttributes:x,enableAttribute:u,disableUnusedAttributes:A}}function jo(n,t,e){let i;function r(c){i=c}function s(c,h){n.drawArrays(i,c,h),e.update(h,i,1)}function a(c,h,p){p!==0&&(n.drawArraysInstanced(i,c,h,p),e.update(h,i,p))}function o(c,h,p){if(p===0)return;t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(i,c,0,h,0,p);let m=0;for(let g=0;g<p;g++)m+=h[g];e.update(m,i,1)}function l(c,h,p,f){if(p===0)return;const m=t.get("WEBGL_multi_draw");if(m===null)for(let g=0;g<c.length;g++)a(c[g],h[g],f[g]);else{m.multiDrawArraysInstancedWEBGL(i,c,0,h,0,f,0,p);let g=0;for(let x=0;x<p;x++)g+=h[x];for(let x=0;x<f.length;x++)e.update(g,i,f[x])}}this.setMode=r,this.render=s,this.renderInstances=a,this.renderMultiDraw=o,this.renderMultiDrawInstances=l}function Zo(n,t,e,i){let r;function s(){if(r!==void 0)return r;if(t.has("EXT_texture_filter_anisotropic")===!0){const w=t.get("EXT_texture_filter_anisotropic");r=n.getParameter(w.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else r=0;return r}function a(w){return!(w!==ae&&i.convert(w)!==n.getParameter(n.IMPLEMENTATION_COLOR_READ_FORMAT))}function o(w){const O=w===oi&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(w!==Ae&&i.convert(w)!==n.getParameter(n.IMPLEMENTATION_COLOR_READ_TYPE)&&w!==ye&&!O)}function l(w){if(w==="highp"){if(n.getShaderPrecisionFormat(n.VERTEX_SHADER,n.HIGH_FLOAT).precision>0&&n.getShaderPrecisionFormat(n.FRAGMENT_SHADER,n.HIGH_FLOAT).precision>0)return"highp";w="mediump"}return w==="mediump"&&n.getShaderPrecisionFormat(n.VERTEX_SHADER,n.MEDIUM_FLOAT).precision>0&&n.getShaderPrecisionFormat(n.FRAGMENT_SHADER,n.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let c=e.precision!==void 0?e.precision:"highp";const h=l(c);h!==c&&(console.warn("THREE.WebGLRenderer:",c,"not supported, using",h,"instead."),c=h);const p=e.logarithmicDepthBuffer===!0,f=e.reverseDepthBuffer===!0&&t.has("EXT_clip_control");if(f===!0){const w=t.get("EXT_clip_control");w.clipControlEXT(w.LOWER_LEFT_EXT,w.ZERO_TO_ONE_EXT)}const m=n.getParameter(n.MAX_TEXTURE_IMAGE_UNITS),g=n.getParameter(n.MAX_VERTEX_TEXTURE_IMAGE_UNITS),x=n.getParameter(n.MAX_TEXTURE_SIZE),u=n.getParameter(n.MAX_CUBE_MAP_TEXTURE_SIZE),d=n.getParameter(n.MAX_VERTEX_ATTRIBS),A=n.getParameter(n.MAX_VERTEX_UNIFORM_VECTORS),y=n.getParameter(n.MAX_VARYING_VECTORS),T=n.getParameter(n.MAX_FRAGMENT_UNIFORM_VECTORS),G=g>0,D=n.getParameter(n.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:s,getMaxPrecision:l,textureFormatReadable:a,textureTypeReadable:o,precision:c,logarithmicDepthBuffer:p,reverseDepthBuffer:f,maxTextures:m,maxVertexTextures:g,maxTextureSize:x,maxCubemapSize:u,maxAttributes:d,maxVertexUniforms:A,maxVaryings:y,maxFragmentUniforms:T,vertexTextures:G,maxSamples:D}}function Ko(n){const t=this;let e=null,i=0,r=!1,s=!1;const a=new Ze,o=new H0,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(p,f){const m=p.length!==0||f||i!==0||r;return r=f,i=p.length,m},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1},this.setGlobalState=function(p,f){e=h(p,f,0)},this.setState=function(p,f,m){const g=p.clippingPlanes,x=p.clipIntersection,u=p.clipShadows,d=n.get(p);if(!r||g===null||g.length===0||s&&!u)s?h(null):c();else{const A=s?0:i,y=A*4;let T=d.clippingState||null;l.value=T,T=h(g,f,y,m);for(let G=0;G!==y;++G)T[G]=e[G];d.clippingState=T,this.numIntersection=x?this.numPlanes:0,this.numPlanes+=A}};function c(){l.value!==e&&(l.value=e,l.needsUpdate=i>0),t.numPlanes=i,t.numIntersection=0}function h(p,f,m,g){const x=p!==null?p.length:0;let u=null;if(x!==0){if(u=l.value,g!==!0||u===null){const d=m+x*4,A=f.matrixWorldInverse;o.getNormalMatrix(A),(u===null||u.length<d)&&(u=new Float32Array(d));for(let y=0,T=m;y!==x;++y,T+=4)a.copy(p[y]).applyMatrix4(A,o),a.normal.toArray(u,T),u[T+3]=a.constant}l.value=u,l.needsUpdate=!0}return t.numPlanes=x,t.numIntersection=0,u}}function $o(n){let t=new WeakMap;function e(a,o){return o===S9?a.mapping=Nn:o===M9&&(a.mapping=Fn),a}function i(a){if(a&&a.isTexture){const o=a.mapping;if(o===S9||o===M9)if(t.has(a)){const l=t.get(a).texture;return e(l,a.mapping)}else{const l=a.image;if(l&&l.height>0){const c=new oa(l.height);return c.fromEquirectangularTexture(n,a),t.set(a,c),a.addEventListener("dispose",r),e(c.texture,a.mapping)}else return null}}return a}function r(a){const o=a.target;o.removeEventListener("dispose",r);const l=t.get(o);l!==void 0&&(t.delete(o),l.dispose())}function s(){t=new WeakMap}return{get:i,dispose:s}}class dr extends c8{constructor(t=-1,e=1,i=1,r=-1,s=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=i,this.bottom=r,this.near=s,this.far=a,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,i,r,s,a){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=r,this.view.width=s,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,r=(this.top+this.bottom)/2;let s=i-t,a=i+t,o=r+e,l=r-e;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,a=s+c*this.view.width,o-=h*this.view.offsetY,l=o-h*this.view.height}this.projectionMatrix.makeOrthographic(s,a,o,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}}const Rn=4,kr=[.125,.215,.35,.446,.526,.582],Je=20,W1=new dr,Wr=new j0;let X1=null,q1=0,Y1=0,j1=!1;const Ke=(1+Math.sqrt(5))/2,Mn=1/Ke,Xr=[new U(-Ke,Mn,0),new U(Ke,Mn,0),new U(-Mn,0,Ke),new U(Mn,0,Ke),new U(0,Ke,-Mn),new U(0,Ke,Mn),new U(-1,1,-1),new U(1,1,-1),new U(-1,1,1),new U(1,1,1)];class qr{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,i=.1,r=100){X1=this._renderer.getRenderTarget(),q1=this._renderer.getActiveCubeFace(),Y1=this._renderer.getActiveMipmapLevel(),j1=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const s=this._allocateTargets();return s.depthBuffer=!0,this._sceneToCubeUV(t,i,r,s),e>0&&this._blur(s,0,0,e),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=Zr(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=jr(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(X1,q1,Y1),this._renderer.xr.enabled=j1,t.scissorTest=!1,Ri(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===Nn||t.mapping===Fn?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),X1=this._renderer.getRenderTarget(),q1=this._renderer.getActiveCubeFace(),Y1=this._renderer.getActiveMipmapLevel(),j1=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const i=e||this._allocateTargets();return this._textureToCubeUV(t,i),this._applyPMREM(i),this._cleanup(i),i}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,i={magFilter:re,minFilter:re,generateMipmaps:!1,type:oi,format:ae,colorSpace:Ge,depthBuffer:!1},r=Yr(t,e,i);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=Yr(t,e,i);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=Jo(s)),this._blurMaterial=Qo(s,t,e)}return r}_compileMaterial(t){const e=new oe(this._lodPlanes[0],t);this._renderer.compile(e,W1)}_sceneToCubeUV(t,e,i,r){const o=new jt(90,1,e,i),l=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],h=this._renderer,p=h.autoClear,f=h.toneMapping;h.getClearColor(Wr),h.toneMapping=ze,h.autoClear=!1;const m=new s8({name:"PMREM.Background",side:Ht,depthWrite:!1,depthTest:!1}),g=new oe(new li,m);let x=!1;const u=t.background;u?u.isColor&&(m.color.copy(u),t.background=null,x=!0):(m.color.copy(Wr),x=!0);for(let d=0;d<6;d++){const A=d%3;A===0?(o.up.set(0,l[d],0),o.lookAt(c[d],0,0)):A===1?(o.up.set(0,0,l[d]),o.lookAt(0,c[d],0)):(o.up.set(0,l[d],0),o.lookAt(0,0,c[d]));const y=this._cubeSize;Ri(r,A*y,d>2?y:0,y,y),h.setRenderTarget(r),x&&h.render(g,o),h.render(t,o)}g.geometry.dispose(),g.material.dispose(),h.toneMapping=f,h.autoClear=p,t.background=u}_textureToCubeUV(t,e){const i=this._renderer,r=t.mapping===Nn||t.mapping===Fn;r?(this._cubemapMaterial===null&&(this._cubemapMaterial=Zr()),this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=jr());const s=r?this._cubemapMaterial:this._equirectMaterial,a=new oe(this._lodPlanes[0],s),o=s.uniforms;o.envMap.value=t;const l=this._cubeSize;Ri(e,0,0,3*l,2*l),i.setRenderTarget(e),i.render(a,W1)}_applyPMREM(t){const e=this._renderer,i=e.autoClear;e.autoClear=!1;const r=this._lodPlanes.length;for(let s=1;s<r;s++){const a=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]),o=Xr[(r-s-1)%Xr.length];this._blur(t,s-1,s,a,o)}e.autoClear=i}_blur(t,e,i,r,s){const a=this._pingPongRenderTarget;this._halfBlur(t,a,e,i,r,"latitudinal",s),this._halfBlur(a,t,i,i,r,"longitudinal",s)}_halfBlur(t,e,i,r,s,a,o){const l=this._renderer,c=this._blurMaterial;a!=="latitudinal"&&a!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const h=3,p=new oe(this._lodPlanes[r],c),f=c.uniforms,m=this._sizeLods[i]-1,g=isFinite(s)?Math.PI/(2*m):2*Math.PI/(2*Je-1),x=s/g,u=isFinite(s)?1+Math.floor(h*x):Je;u>Je&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${u} samples when the maximum is set to ${Je}`);const d=[];let A=0;for(let w=0;w<Je;++w){const O=w/x,s0=Math.exp(-O*O/2);d.push(s0),w===0?A+=s0:w<u&&(A+=2*s0)}for(let w=0;w<d.length;w++)d[w]=d[w]/A;f.envMap.value=t.texture,f.samples.value=u,f.weights.value=d,f.latitudinal.value=a==="latitudinal",o&&(f.poleAxis.value=o);const{_lodMax:y}=this;f.dTheta.value=g,f.mipInt.value=y-i;const T=this._sizeLods[r],G=3*T*(r>y-Rn?r-y+Rn:0),D=4*(this._cubeSize-T);Ri(e,G,D,3*T,2*T),l.setRenderTarget(e),l.render(p,W1)}}function Jo(n){const t=[],e=[],i=[];let r=n;const s=n-Rn+1+kr.length;for(let a=0;a<s;a++){const o=Math.pow(2,r);e.push(o);let l=1/o;a>n-Rn?l=kr[a-n+Rn-1]:a===0&&(l=0),i.push(l);const c=1/(o-2),h=-c,p=1+c,f=[h,h,p,h,p,p,h,h,p,p,h,p],m=6,g=6,x=3,u=2,d=1,A=new Float32Array(x*g*m),y=new Float32Array(u*g*m),T=new Float32Array(d*g*m);for(let D=0;D<m;D++){const w=D%3*2/3-1,O=D>2?0:-1,s0=[w,O,0,w+2/3,O,0,w+2/3,O+1,0,w,O,0,w+2/3,O+1,0,w,O+1,0];A.set(s0,x*g*D),y.set(f,u*g*D);const _=[D,D,D,D,D,D];T.set(_,d*g*D)}const G=new Jt;G.setAttribute("position",new $t(A,x)),G.setAttribute("uv",new $t(y,u)),G.setAttribute("faceIndex",new $t(T,d)),t.push(G),r>Rn&&r--}return{lodPlanes:t,sizeLods:e,sigmas:i}}function Yr(n,t,e){const i=new rn(n,t,e);return i.texture.mapping=p1,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function Ri(n,t,e,i,r){n.viewport.set(t,e,i,r),n.scissor.set(t,e,i,r)}function Qo(n,t,e){const i=new Float32Array(Je),r=new U(0,1,0);return new Te({name:"SphericalGaussianBlur",defines:{n:Je,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/e,CUBEUV_MAX_MIP:`${n}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:pr(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:Be,depthTest:!1,depthWrite:!1})}function jr(){return new Te({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:pr(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:Be,depthTest:!1,depthWrite:!1})}function Zr(){return new Te({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:pr(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:Be,depthTest:!1,depthWrite:!1})}function pr(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function t3(n){let t=new WeakMap,e=null;function i(o){if(o&&o.isTexture){const l=o.mapping,c=l===S9||l===M9,h=l===Nn||l===Fn;if(c||h){let p=t.get(o);const f=p!==void 0?p.texture.pmremVersion:0;if(o.isRenderTargetTexture&&o.pmremVersion!==f)return e===null&&(e=new qr(n)),p=c?e.fromEquirectangular(o,p):e.fromCubemap(o,p),p.texture.pmremVersion=o.pmremVersion,t.set(o,p),p.texture;if(p!==void 0)return p.texture;{const m=o.image;return c&&m&&m.height>0||h&&m&&r(m)?(e===null&&(e=new qr(n)),p=c?e.fromEquirectangular(o):e.fromCubemap(o),p.texture.pmremVersion=o.pmremVersion,t.set(o,p),o.addEventListener("dispose",s),p.texture):null}}}return o}function r(o){let l=0;const c=6;for(let h=0;h<c;h++)o[h]!==void 0&&l++;return l===c}function s(o){const l=o.target;l.removeEventListener("dispose",s);const c=t.get(l);c!==void 0&&(t.delete(l),c.dispose())}function a(){t=new WeakMap,e!==null&&(e.dispose(),e=null)}return{get:i,dispose:a}}function e3(n){const t={};function e(i){if(t[i]!==void 0)return t[i];let r;switch(i){case"WEBGL_depth_texture":r=n.getExtension("WEBGL_depth_texture")||n.getExtension("MOZ_WEBGL_depth_texture")||n.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=n.getExtension("EXT_texture_filter_anisotropic")||n.getExtension("MOZ_EXT_texture_filter_anisotropic")||n.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=n.getExtension("WEBGL_compressed_texture_s3tc")||n.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=n.getExtension("WEBGL_compressed_texture_pvrtc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=n.getExtension(i)}return t[i]=r,r}return{has:function(i){return e(i)!==null},init:function(){e("EXT_color_buffer_float"),e("WEBGL_clip_cull_distance"),e("OES_texture_float_linear"),e("EXT_color_buffer_half_float"),e("WEBGL_multisampled_render_to_texture"),e("WEBGL_render_shared_exponent")},get:function(i){const r=e(i);return r===null&&t1("THREE.WebGLRenderer: "+i+" extension not supported."),r}}}function n3(n,t,e,i){const r={},s=new WeakMap;function a(p){const f=p.target;f.index!==null&&t.remove(f.index);for(const g in f.attributes)t.remove(f.attributes[g]);for(const g in f.morphAttributes){const x=f.morphAttributes[g];for(let u=0,d=x.length;u<d;u++)t.remove(x[u])}f.removeEventListener("dispose",a),delete r[f.id];const m=s.get(f);m&&(t.remove(m),s.delete(f)),i.releaseStatesOfGeometry(f),f.isInstancedBufferGeometry===!0&&delete f._maxInstanceCount,e.memory.geometries--}function o(p,f){return r[f.id]===!0||(f.addEventListener("dispose",a),r[f.id]=!0,e.memory.geometries++),f}function l(p){const f=p.attributes;for(const g in f)t.update(f[g],n.ARRAY_BUFFER);const m=p.morphAttributes;for(const g in m){const x=m[g];for(let u=0,d=x.length;u<d;u++)t.update(x[u],n.ARRAY_BUFFER)}}function c(p){const f=[],m=p.index,g=p.attributes.position;let x=0;if(m!==null){const A=m.array;x=m.version;for(let y=0,T=A.length;y<T;y+=3){const G=A[y+0],D=A[y+1],w=A[y+2];f.push(G,D,D,w,w,G)}}else if(g!==void 0){const A=g.array;x=g.version;for(let y=0,T=A.length/3-1;y<T;y+=3){const G=y+0,D=y+1,w=y+2;f.push(G,D,D,w,w,G)}}else return;const u=new(Qs(f)?o8:a8)(f,1);u.version=x;const d=s.get(p);d&&t.remove(d),s.set(p,u)}function h(p){const f=s.get(p);if(f){const m=p.index;m!==null&&f.version<m.version&&c(p)}else c(p);return s.get(p)}return{get:o,update:l,getWireframeAttribute:h}}function i3(n,t,e){let i;function r(f){i=f}let s,a;function o(f){s=f.type,a=f.bytesPerElement}function l(f,m){n.drawElements(i,m,s,f*a),e.update(m,i,1)}function c(f,m,g){g!==0&&(n.drawElementsInstanced(i,m,s,f*a,g),e.update(m,i,g))}function h(f,m,g){if(g===0)return;t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(i,m,0,s,f,0,g);let u=0;for(let d=0;d<g;d++)u+=m[d];e.update(u,i,1)}function p(f,m,g,x){if(g===0)return;const u=t.get("WEBGL_multi_draw");if(u===null)for(let d=0;d<f.length;d++)c(f[d]/a,m[d],x[d]);else{u.multiDrawElementsInstancedWEBGL(i,m,0,s,f,0,x,0,g);let d=0;for(let A=0;A<g;A++)d+=m[A];for(let A=0;A<x.length;A++)e.update(d,i,x[A])}}this.setMode=r,this.setIndex=o,this.render=l,this.renderInstances=c,this.renderMultiDraw=h,this.renderMultiDrawInstances=p}function r3(n){const t={geometries:0,textures:0},e={frame:0,calls:0,triangles:0,points:0,lines:0};function i(s,a,o){switch(e.calls++,a){case n.TRIANGLES:e.triangles+=o*(s/3);break;case n.LINES:e.lines+=o*(s/2);break;case n.LINE_STRIP:e.lines+=o*(s-1);break;case n.LINE_LOOP:e.lines+=o*s;break;case n.POINTS:e.points+=o*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",a);break}}function r(){e.calls=0,e.triangles=0,e.points=0,e.lines=0}return{memory:t,render:e,programs:null,autoReset:!0,reset:r,update:i}}function s3(n,t,e){const i=new WeakMap,r=new ut;function s(a,o,l){const c=a.morphTargetInfluences,h=o.morphAttributes.position||o.morphAttributes.normal||o.morphAttributes.color,p=h!==void 0?h.length:0;let f=i.get(o);if(f===void 0||f.count!==p){let _=function(){O.dispose(),i.delete(o),o.removeEventListener("dispose",_)};var m=_;f!==void 0&&f.texture.dispose();const g=o.morphAttributes.position!==void 0,x=o.morphAttributes.normal!==void 0,u=o.morphAttributes.color!==void 0,d=o.morphAttributes.position||[],A=o.morphAttributes.normal||[],y=o.morphAttributes.color||[];let T=0;g===!0&&(T=1),x===!0&&(T=2),u===!0&&(T=3);let G=o.attributes.position.count*T,D=1;G>t.maxTextureSize&&(D=Math.ceil(G/t.maxTextureSize),G=t.maxTextureSize);const w=new Float32Array(G*D*4*p),O=new e8(w,G,D,p);O.type=ye,O.needsUpdate=!0;const s0=T*4;for(let M=0;M<p;M++){const j=d[M],k=A[M],J=y[M],X=G*D*4*M;for(let q=0;q<j.count;q++){const t0=q*s0;g===!0&&(r.fromBufferAttribute(j,q),w[X+t0+0]=r.x,w[X+t0+1]=r.y,w[X+t0+2]=r.z,w[X+t0+3]=0),x===!0&&(r.fromBufferAttribute(k,q),w[X+t0+4]=r.x,w[X+t0+5]=r.y,w[X+t0+6]=r.z,w[X+t0+7]=0),u===!0&&(r.fromBufferAttribute(J,q),w[X+t0+8]=r.x,w[X+t0+9]=r.y,w[X+t0+10]=r.z,w[X+t0+11]=J.itemSize===4?r.w:1)}}f={count:p,texture:O,size:new F0(G,D)},i.set(o,f),o.addEventListener("dispose",_)}if(a.isInstancedMesh===!0&&a.morphTexture!==null)l.getUniforms().setValue(n,"morphTexture",a.morphTexture,e);else{let g=0;for(let u=0;u<c.length;u++)g+=c[u];const x=o.morphTargetsRelative?1:1-g;l.getUniforms().setValue(n,"morphTargetBaseInfluence",x),l.getUniforms().setValue(n,"morphTargetInfluences",c)}l.getUniforms().setValue(n,"morphTargetsTexture",f.texture,e),l.getUniforms().setValue(n,"morphTargetsTextureSize",f.size)}return{update:s}}function a3(n,t,e,i){let r=new WeakMap;function s(l){const c=i.render.frame,h=l.geometry,p=t.get(l,h);if(r.get(p)!==c&&(t.update(p),r.set(p,c)),l.isInstancedMesh&&(l.hasEventListener("dispose",o)===!1&&l.addEventListener("dispose",o),r.get(l)!==c&&(e.update(l.instanceMatrix,n.ARRAY_BUFFER),l.instanceColor!==null&&e.update(l.instanceColor,n.ARRAY_BUFFER),r.set(l,c))),l.isSkinnedMesh){const f=l.skeleton;r.get(f)!==c&&(f.update(),r.set(f,c))}return p}function a(){r=new WeakMap}function o(l){const c=l.target;c.removeEventListener("dispose",o),e.remove(c.instanceMatrix),c.instanceColor!==null&&e.remove(c.instanceColor)}return{update:s,dispose:a}}class f8 extends Bt{constructor(t,e,i,r,s,a,o,l,c,h=Dn){if(h!==Dn&&h!==Bn)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");i===void 0&&h===Dn&&(i=nn),i===void 0&&h===Bn&&(i=On),super(null,r,s,a,o,l,h,i,c),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=o!==void 0?o:Kt,this.minFilter=l!==void 0?l:Kt,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}}const d8=new Bt,Kr=new f8(1,1),p8=new e8,m8=new q2,_8=new u8,$r=[],Jr=[],Qr=new Float32Array(16),ts=new Float32Array(9),es=new Float32Array(4);function Vn(n,t,e){const i=n[0];if(i<=0||i>0)return n;const r=t*e;let s=$r[r];if(s===void 0&&(s=new Float32Array(r),$r[r]=s),t!==0){i.toArray(s,0);for(let a=1,o=0;a!==t;++a)o+=e,n[a].toArray(s,o)}return s}function yt(n,t){if(n.length!==t.length)return!1;for(let e=0,i=n.length;e<i;e++)if(n[e]!==t[e])return!1;return!0}function Et(n,t){for(let e=0,i=t.length;e<i;e++)n[e]=t[e]}function _1(n,t){let e=Jr[t];e===void 0&&(e=new Int32Array(t),Jr[t]=e);for(let i=0;i!==t;++i)e[i]=n.allocateTextureUnit();return e}function o3(n,t){const e=this.cache;e[0]!==t&&(n.uniform1f(this.addr,t),e[0]=t)}function l3(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(n.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(yt(e,t))return;n.uniform2fv(this.addr,t),Et(e,t)}}function c3(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(n.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(t.r!==void 0)(e[0]!==t.r||e[1]!==t.g||e[2]!==t.b)&&(n.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(yt(e,t))return;n.uniform3fv(this.addr,t),Et(e,t)}}function u3(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(n.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(yt(e,t))return;n.uniform4fv(this.addr,t),Et(e,t)}}function h3(n,t){const e=this.cache,i=t.elements;if(i===void 0){if(yt(e,t))return;n.uniformMatrix2fv(this.addr,!1,t),Et(e,t)}else{if(yt(e,i))return;es.set(i),n.uniformMatrix2fv(this.addr,!1,es),Et(e,i)}}function f3(n,t){const e=this.cache,i=t.elements;if(i===void 0){if(yt(e,t))return;n.uniformMatrix3fv(this.addr,!1,t),Et(e,t)}else{if(yt(e,i))return;ts.set(i),n.uniformMatrix3fv(this.addr,!1,ts),Et(e,i)}}function d3(n,t){const e=this.cache,i=t.elements;if(i===void 0){if(yt(e,t))return;n.uniformMatrix4fv(this.addr,!1,t),Et(e,t)}else{if(yt(e,i))return;Qr.set(i),n.uniformMatrix4fv(this.addr,!1,Qr),Et(e,i)}}function p3(n,t){const e=this.cache;e[0]!==t&&(n.uniform1i(this.addr,t),e[0]=t)}function m3(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(n.uniform2i(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(yt(e,t))return;n.uniform2iv(this.addr,t),Et(e,t)}}function _3(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(n.uniform3i(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(yt(e,t))return;n.uniform3iv(this.addr,t),Et(e,t)}}function g3(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(n.uniform4i(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(yt(e,t))return;n.uniform4iv(this.addr,t),Et(e,t)}}function v3(n,t){const e=this.cache;e[0]!==t&&(n.uniform1ui(this.addr,t),e[0]=t)}function x3(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(n.uniform2ui(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(yt(e,t))return;n.uniform2uiv(this.addr,t),Et(e,t)}}function S3(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(n.uniform3ui(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(yt(e,t))return;n.uniform3uiv(this.addr,t),Et(e,t)}}function M3(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(n.uniform4ui(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(yt(e,t))return;n.uniform4uiv(this.addr,t),Et(e,t)}}function y3(n,t,e){const i=this.cache,r=e.allocateTextureUnit();i[0]!==r&&(n.uniform1i(this.addr,r),i[0]=r);let s;this.type===n.SAMPLER_2D_SHADOW?(Kr.compareFunction=Js,s=Kr):s=d8,e.setTexture2D(t||s,r)}function E3(n,t,e){const i=this.cache,r=e.allocateTextureUnit();i[0]!==r&&(n.uniform1i(this.addr,r),i[0]=r),e.setTexture3D(t||m8,r)}function b3(n,t,e){const i=this.cache,r=e.allocateTextureUnit();i[0]!==r&&(n.uniform1i(this.addr,r),i[0]=r),e.setTextureCube(t||_8,r)}function A3(n,t,e){const i=this.cache,r=e.allocateTextureUnit();i[0]!==r&&(n.uniform1i(this.addr,r),i[0]=r),e.setTexture2DArray(t||p8,r)}function T3(n){switch(n){case 5126:return o3;case 35664:return l3;case 35665:return c3;case 35666:return u3;case 35674:return h3;case 35675:return f3;case 35676:return d3;case 5124:case 35670:return p3;case 35667:case 35671:return m3;case 35668:case 35672:return _3;case 35669:case 35673:return g3;case 5125:return v3;case 36294:return x3;case 36295:return S3;case 36296:return M3;case 35678:case 36198:case 36298:case 36306:case 35682:return y3;case 35679:case 36299:case 36307:return E3;case 35680:case 36300:case 36308:case 36293:return b3;case 36289:case 36303:case 36311:case 36292:return A3}}function w3(n,t){n.uniform1fv(this.addr,t)}function C3(n,t){const e=Vn(t,this.size,2);n.uniform2fv(this.addr,e)}function R3(n,t){const e=Vn(t,this.size,3);n.uniform3fv(this.addr,e)}function P3(n,t){const e=Vn(t,this.size,4);n.uniform4fv(this.addr,e)}function L3(n,t){const e=Vn(t,this.size,4);n.uniformMatrix2fv(this.addr,!1,e)}function D3(n,t){const e=Vn(t,this.size,9);n.uniformMatrix3fv(this.addr,!1,e)}function U3(n,t){const e=Vn(t,this.size,16);n.uniformMatrix4fv(this.addr,!1,e)}function I3(n,t){n.uniform1iv(this.addr,t)}function N3(n,t){n.uniform2iv(this.addr,t)}function F3(n,t){n.uniform3iv(this.addr,t)}function O3(n,t){n.uniform4iv(this.addr,t)}function B3(n,t){n.uniform1uiv(this.addr,t)}function z3(n,t){n.uniform2uiv(this.addr,t)}function H3(n,t){n.uniform3uiv(this.addr,t)}function G3(n,t){n.uniform4uiv(this.addr,t)}function V3(n,t,e){const i=this.cache,r=t.length,s=_1(e,r);yt(i,s)||(n.uniform1iv(this.addr,s),Et(i,s));for(let a=0;a!==r;++a)e.setTexture2D(t[a]||d8,s[a])}function k3(n,t,e){const i=this.cache,r=t.length,s=_1(e,r);yt(i,s)||(n.uniform1iv(this.addr,s),Et(i,s));for(let a=0;a!==r;++a)e.setTexture3D(t[a]||m8,s[a])}function W3(n,t,e){const i=this.cache,r=t.length,s=_1(e,r);yt(i,s)||(n.uniform1iv(this.addr,s),Et(i,s));for(let a=0;a!==r;++a)e.setTextureCube(t[a]||_8,s[a])}function X3(n,t,e){const i=this.cache,r=t.length,s=_1(e,r);yt(i,s)||(n.uniform1iv(this.addr,s),Et(i,s));for(let a=0;a!==r;++a)e.setTexture2DArray(t[a]||p8,s[a])}function q3(n){switch(n){case 5126:return w3;case 35664:return C3;case 35665:return R3;case 35666:return P3;case 35674:return L3;case 35675:return D3;case 35676:return U3;case 5124:case 35670:return I3;case 35667:case 35671:return N3;case 35668:case 35672:return F3;case 35669:case 35673:return O3;case 5125:return B3;case 36294:return z3;case 36295:return H3;case 36296:return G3;case 35678:case 36198:case 36298:case 36306:case 35682:return V3;case 35679:case 36299:case 36307:return k3;case 35680:case 36300:case 36308:case 36293:return W3;case 36289:case 36303:case 36311:case 36292:return X3}}class Y3{constructor(t,e,i){this.id=t,this.addr=i,this.cache=[],this.type=e.type,this.setValue=T3(e.type)}}class j3{constructor(t,e,i){this.id=t,this.addr=i,this.cache=[],this.type=e.type,this.size=e.size,this.setValue=q3(e.type)}}class Z3{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,i){const r=this.seq;for(let s=0,a=r.length;s!==a;++s){const o=r[s];o.setValue(t,e[o.id],i)}}}const Z1=/(\w+)(\])?(\[|\.)?/g;function ns(n,t){n.seq.push(t),n.map[t.id]=t}function K3(n,t,e){const i=n.name,r=i.length;for(Z1.lastIndex=0;;){const s=Z1.exec(i),a=Z1.lastIndex;let o=s[1];const l=s[2]==="]",c=s[3];if(l&&(o=o|0),c===void 0||c==="["&&a+2===r){ns(e,c===void 0?new Y3(o,n,t):new j3(o,n,t));break}else{let p=e.map[o];p===void 0&&(p=new Z3(o),ns(e,p)),e=p}}}class e1{constructor(t,e){this.seq=[],this.map={};const i=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let r=0;r<i;++r){const s=t.getActiveUniform(e,r),a=t.getUniformLocation(e,s.name);K3(s,a,this)}}setValue(t,e,i,r){const s=this.map[e];s!==void 0&&s.setValue(t,i,r)}setOptional(t,e,i){const r=e[i];r!==void 0&&this.setValue(t,i,r)}static upload(t,e,i,r){for(let s=0,a=e.length;s!==a;++s){const o=e[s],l=i[o.id];l.needsUpdate!==!1&&o.setValue(t,l.value,r)}}static seqWithValue(t,e){const i=[];for(let r=0,s=t.length;r!==s;++r){const a=t[r];a.id in e&&i.push(a)}return i}}function is(n,t,e){const i=n.createShader(t);return n.shaderSource(i,e),n.compileShader(i),i}const $3=37297;let J3=0;function Q3(n,t){const e=n.split(`
`),i=[],r=Math.max(t-6,0),s=Math.min(t+6,e.length);for(let a=r;a<s;a++){const o=a+1;i.push(`${o===t?">":" "} ${o}: ${e[a]}`)}return i.join(`
`)}function t7(n){const t=rt.getPrimaries(rt.workingColorSpace),e=rt.getPrimaries(n);let i;switch(t===e?i="":t===o1&&e===a1?i="LinearDisplayP3ToLinearSRGB":t===a1&&e===o1&&(i="LinearSRGBToLinearDisplayP3"),n){case Ge:case m1:return[i,"LinearTransferOETF"];case he:case cr:return[i,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",n),[i,"LinearTransferOETF"]}}function rs(n,t,e){const i=n.getShaderParameter(t,n.COMPILE_STATUS),r=n.getShaderInfoLog(t).trim();if(i&&r==="")return"";const s=/ERROR: 0:(\d+)/.exec(r);if(s){const a=parseInt(s[1]);return e.toUpperCase()+`

`+r+`

`+Q3(n.getShaderSource(t),a)}else return r}function e7(n,t){const e=t7(t);return`vec4 ${n}( vec4 value ) { return ${e[0]}( ${e[1]}( value ) ); }`}function n7(n,t){let e;switch(t){case i2:e="Linear";break;case r2:e="Reinhard";break;case s2:e="Cineon";break;case a2:e="ACESFilmic";break;case l2:e="AgX";break;case c2:e="Neutral";break;case o2:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+n+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}const Pi=new U;function i7(){rt.getLuminanceCoefficients(Pi);const n=Pi.x.toFixed(4),t=Pi.y.toFixed(4),e=Pi.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${n}, ${t}, ${e} );`,"	return dot( weights, rgb );","}"].join(`
`)}function r7(n){return[n.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",n.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(ei).join(`
`)}function s7(n){const t=[];for(const e in n){const i=n[e];i!==!1&&t.push("#define "+e+" "+i)}return t.join(`
`)}function a7(n,t){const e={},i=n.getProgramParameter(t,n.ACTIVE_ATTRIBUTES);for(let r=0;r<i;r++){const s=n.getActiveAttrib(t,r),a=s.name;let o=1;s.type===n.FLOAT_MAT2&&(o=2),s.type===n.FLOAT_MAT3&&(o=3),s.type===n.FLOAT_MAT4&&(o=4),e[a]={type:s.type,location:n.getAttribLocation(t,a),locationSize:o}}return e}function ei(n){return n!==""}function ss(n,t){const e=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return n.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,e).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function as(n,t){return n.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const o7=/^[ \t]*#include +<([\w\d./]+)>/gm;function J9(n){return n.replace(o7,c7)}const l7=new Map;function c7(n,t){let e=z0[t];if(e===void 0){const i=l7.get(t);if(i!==void 0)e=z0[i],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,i);else throw new Error("Can not resolve #include <"+t+">")}return J9(e)}const u7=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function os(n){return n.replace(u7,h7)}function h7(n,t,e,i){let r="";for(let s=parseInt(t);s<parseInt(e);s++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return r}function ls(n){let t=`precision ${n.precision} float;
	precision ${n.precision} int;
	precision ${n.precision} sampler2D;
	precision ${n.precision} samplerCube;
	precision ${n.precision} sampler3D;
	precision ${n.precision} sampler2DArray;
	precision ${n.precision} sampler2DShadow;
	precision ${n.precision} samplerCubeShadow;
	precision ${n.precision} sampler2DArrayShadow;
	precision ${n.precision} isampler2D;
	precision ${n.precision} isampler3D;
	precision ${n.precision} isamplerCube;
	precision ${n.precision} isampler2DArray;
	precision ${n.precision} usampler2D;
	precision ${n.precision} usampler3D;
	precision ${n.precision} usamplerCube;
	precision ${n.precision} usampler2DArray;
	`;return n.precision==="highp"?t+=`
#define HIGH_PRECISION`:n.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:n.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function f7(n){let t="SHADOWMAP_TYPE_BASIC";return n.shadowMapType===Bs?t="SHADOWMAP_TYPE_PCF":n.shadowMapType===F8?t="SHADOWMAP_TYPE_PCF_SOFT":n.shadowMapType===Me&&(t="SHADOWMAP_TYPE_VSM"),t}function d7(n){let t="ENVMAP_TYPE_CUBE";if(n.envMap)switch(n.envMapMode){case Nn:case Fn:t="ENVMAP_TYPE_CUBE";break;case p1:t="ENVMAP_TYPE_CUBE_UV";break}return t}function p7(n){let t="ENVMAP_MODE_REFLECTION";if(n.envMap)switch(n.envMapMode){case Fn:t="ENVMAP_MODE_REFRACTION";break}return t}function m7(n){let t="ENVMAP_BLENDING_NONE";if(n.envMap)switch(n.combine){case zs:t="ENVMAP_BLENDING_MULTIPLY";break;case e2:t="ENVMAP_BLENDING_MIX";break;case n2:t="ENVMAP_BLENDING_ADD";break}return t}function _7(n){const t=n.envMapCubeUVHeight;if(t===null)return null;const e=Math.log2(t)-2,i=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,e),7*16)),texelHeight:i,maxMip:e}}function g7(n,t,e,i){const r=n.getContext(),s=e.defines;let a=e.vertexShader,o=e.fragmentShader;const l=f7(e),c=d7(e),h=p7(e),p=m7(e),f=_7(e),m=r7(e),g=s7(s),x=r.createProgram();let u,d,A=e.glslVersion?"#version "+e.glslVersion+`
`:"";e.isRawShaderMaterial?(u=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,g].filter(ei).join(`
`),u.length>0&&(u+=`
`),d=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,g].filter(ei).join(`
`),d.length>0&&(d+=`
`)):(u=[ls(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,g,e.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",e.batching?"#define USE_BATCHING":"",e.batchingColor?"#define USE_BATCHING_COLOR":"",e.instancing?"#define USE_INSTANCING":"",e.instancingColor?"#define USE_INSTANCING_COLOR":"",e.instancingMorph?"#define USE_INSTANCING_MORPH":"",e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+h:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.displacementMap?"#define USE_DISPLACEMENTMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.mapUv?"#define MAP_UV "+e.mapUv:"",e.alphaMapUv?"#define ALPHAMAP_UV "+e.alphaMapUv:"",e.lightMapUv?"#define LIGHTMAP_UV "+e.lightMapUv:"",e.aoMapUv?"#define AOMAP_UV "+e.aoMapUv:"",e.emissiveMapUv?"#define EMISSIVEMAP_UV "+e.emissiveMapUv:"",e.bumpMapUv?"#define BUMPMAP_UV "+e.bumpMapUv:"",e.normalMapUv?"#define NORMALMAP_UV "+e.normalMapUv:"",e.displacementMapUv?"#define DISPLACEMENTMAP_UV "+e.displacementMapUv:"",e.metalnessMapUv?"#define METALNESSMAP_UV "+e.metalnessMapUv:"",e.roughnessMapUv?"#define ROUGHNESSMAP_UV "+e.roughnessMapUv:"",e.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+e.anisotropyMapUv:"",e.clearcoatMapUv?"#define CLEARCOATMAP_UV "+e.clearcoatMapUv:"",e.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+e.clearcoatNormalMapUv:"",e.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+e.clearcoatRoughnessMapUv:"",e.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+e.iridescenceMapUv:"",e.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+e.iridescenceThicknessMapUv:"",e.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+e.sheenColorMapUv:"",e.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+e.sheenRoughnessMapUv:"",e.specularMapUv?"#define SPECULARMAP_UV "+e.specularMapUv:"",e.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+e.specularColorMapUv:"",e.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+e.specularIntensityMapUv:"",e.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+e.transmissionMapUv:"",e.thicknessMapUv?"#define THICKNESSMAP_UV "+e.thicknessMapUv:"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals&&e.flatShading===!1?"#define USE_MORPHNORMALS":"",e.morphColors?"#define USE_MORPHCOLORS":"",e.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+e.morphTextureStride:"",e.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+e.morphTargetsCount:"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(ei).join(`
`),d=[ls(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,g,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",e.map?"#define USE_MAP":"",e.matcap?"#define USE_MATCAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+c:"",e.envMap?"#define "+h:"",e.envMap?"#define "+p:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoat?"#define USE_CLEARCOAT":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.dispersion?"#define USE_DISPERSION":"",e.iridescence?"#define USE_IRIDESCENCE":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaTest?"#define USE_ALPHATEST":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.sheen?"#define USE_SHEEN":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors||e.instancingColor||e.batchingColor?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.gradientMap?"#define USE_GRADIENTMAP":"",e.flatShading?"#define FLAT_SHADED":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",e.toneMapping!==ze?"#define TONE_MAPPING":"",e.toneMapping!==ze?z0.tonemapping_pars_fragment:"",e.toneMapping!==ze?n7("toneMapping",e.toneMapping):"",e.dithering?"#define DITHERING":"",e.opaque?"#define OPAQUE":"",z0.colorspace_pars_fragment,e7("linearToOutputTexel",e.outputColorSpace),i7(),e.useDepthPacking?"#define DEPTH_PACKING "+e.depthPacking:"",`
`].filter(ei).join(`
`)),a=J9(a),a=ss(a,e),a=as(a,e),o=J9(o),o=ss(o,e),o=as(o,e),a=os(a),o=os(o),e.isRawShaderMaterial!==!0&&(A=`#version 300 es
`,u=[m,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+u,d=["#define varying in",e.glslVersion===br?"":"layout(location = 0) out highp vec4 pc_fragColor;",e.glslVersion===br?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+d);const y=A+u+a,T=A+d+o,G=is(r,r.VERTEX_SHADER,y),D=is(r,r.FRAGMENT_SHADER,T);r.attachShader(x,G),r.attachShader(x,D),e.index0AttributeName!==void 0?r.bindAttribLocation(x,0,e.index0AttributeName):e.morphTargets===!0&&r.bindAttribLocation(x,0,"position"),r.linkProgram(x);function w(M){if(n.debug.checkShaderErrors){const j=r.getProgramInfoLog(x).trim(),k=r.getShaderInfoLog(G).trim(),J=r.getShaderInfoLog(D).trim();let X=!0,q=!0;if(r.getProgramParameter(x,r.LINK_STATUS)===!1)if(X=!1,typeof n.debug.onShaderError=="function")n.debug.onShaderError(r,x,G,D);else{const t0=rs(r,G,"vertex"),V=rs(r,D,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(x,r.VALIDATE_STATUS)+`

Material Name: `+M.name+`
Material Type: `+M.type+`

Program Info Log: `+j+`
`+t0+`
`+V)}else j!==""?console.warn("THREE.WebGLProgram: Program Info Log:",j):(k===""||J==="")&&(q=!1);q&&(M.diagnostics={runnable:X,programLog:j,vertexShader:{log:k,prefix:u},fragmentShader:{log:J,prefix:d}})}r.deleteShader(G),r.deleteShader(D),O=new e1(r,x),s0=a7(r,x)}let O;this.getUniforms=function(){return O===void 0&&w(this),O};let s0;this.getAttributes=function(){return s0===void 0&&w(this),s0};let _=e.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return _===!1&&(_=r.getProgramParameter(x,$3)),_},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(x),this.program=void 0},this.type=e.shaderType,this.name=e.shaderName,this.id=J3++,this.cacheKey=t,this.usedTimes=1,this.program=x,this.vertexShader=G,this.fragmentShader=D,this}let v7=0;class x7{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,i=t.fragmentShader,r=this._getShaderStage(e),s=this._getShaderStage(i),a=this._getShaderCacheForMaterial(t);return a.has(r)===!1&&(a.add(r),r.usedTimes++),a.has(s)===!1&&(a.add(s),s.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const i of e)i.usedTimes--,i.usedTimes===0&&this.shaderCache.delete(i.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let i=e.get(t);return i===void 0&&(i=new Set,e.set(t,i)),i}_getShaderStage(t){const e=this.shaderCache;let i=e.get(t);return i===void 0&&(i=new S7(t),e.set(t,i)),i}}class S7{constructor(t){this.id=v7++,this.code=t,this.usedTimes=0}}function M7(n,t,e,i,r,s,a){const o=new i8,l=new x7,c=new Set,h=[],p=r.logarithmicDepthBuffer,f=r.reverseDepthBuffer,m=r.vertexTextures;let g=r.precision;const x={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function u(_){return c.add(_),_===0?"uv":`uv${_}`}function d(_,M,j,k,J){const X=k.fog,q=J.geometry,t0=_.isMeshStandardMaterial?k.environment:null,V=(_.isMeshStandardMaterial?e:t).get(_.envMap||t0),f0=V&&V.mapping===p1?V.image.height:null,d0=x[_.type];_.precision!==null&&(g=r.getMaxPrecision(_.precision),g!==_.precision&&console.warn("THREE.WebGLProgram.getParameters:",_.precision,"not supported, using",g,"instead."));const l0=q.morphAttributes.position||q.morphAttributes.normal||q.morphAttributes.color,k0=l0!==void 0?l0.length:0;let K0=0;q.morphAttributes.position!==void 0&&(K0=1),q.morphAttributes.normal!==void 0&&(K0=2),q.morphAttributes.color!==void 0&&(K0=3);let Z,n0,y0,x0;if(d0){const $=zt[d0];Z=$.vertexShader,n0=$.fragmentShader}else Z=_.vertexShader,n0=_.fragmentShader,l.update(_),y0=l.getVertexShaderID(_),x0=l.getFragmentShaderID(_);const R0=n.getRenderTarget(),L0=J.isInstancedMesh===!0,W0=J.isBatchedMesh===!0,tt=!!_.map,Y0=!!_.matcap,C=!!V,Tt=!!_.aoMap,G0=!!_.lightMap,Z0=!!_.bumpMap,U0=!!_.normalMap,ct=!!_.displacementMap,I0=!!_.emissiveMap,b=!!_.metalnessMap,v=!!_.roughnessMap,B=_.anisotropy>0,W=_.clearcoat>0,e0=_.dispersion>0,K=_.iridescence>0,b0=_.sheen>0,u0=_.transmission>0,S0=B&&!!_.anisotropyMap,X0=W&&!!_.clearcoatMap,i0=W&&!!_.clearcoatNormalMap,m0=W&&!!_.clearcoatRoughnessMap,D0=K&&!!_.iridescenceMap,P0=K&&!!_.iridescenceThicknessMap,M0=b0&&!!_.sheenColorMap,q0=b0&&!!_.sheenRoughnessMap,B0=!!_.specularMap,ot=!!_.specularColorMap,L=!!_.specularIntensityMap,_0=u0&&!!_.transmissionMap,Y=u0&&!!_.thicknessMap,Q=!!_.gradientMap,p0=!!_.alphaMap,g0=_.alphaTest>0,V0=!!_.alphaHash,E=!!_.extensions;let R=ze;_.toneMapped&&(R0===null||R0.isXRRenderTarget===!0)&&(R=n.toneMapping);const P={shaderID:d0,shaderType:_.type,shaderName:_.name,vertexShader:Z,fragmentShader:n0,defines:_.defines,customVertexShaderID:y0,customFragmentShaderID:x0,isRawShaderMaterial:_.isRawShaderMaterial===!0,glslVersion:_.glslVersion,precision:g,batching:W0,batchingColor:W0&&J._colorsTexture!==null,instancing:L0,instancingColor:L0&&J.instanceColor!==null,instancingMorph:L0&&J.morphTexture!==null,supportsVertexTextures:m,outputColorSpace:R0===null?n.outputColorSpace:R0.isXRRenderTarget===!0?R0.texture.colorSpace:Ge,alphaToCoverage:!!_.alphaToCoverage,map:tt,matcap:Y0,envMap:C,envMapMode:C&&V.mapping,envMapCubeUVHeight:f0,aoMap:Tt,lightMap:G0,bumpMap:Z0,normalMap:U0,displacementMap:m&&ct,emissiveMap:I0,normalMapObjectSpace:U0&&_.normalMapType===d2,normalMapTangentSpace:U0&&_.normalMapType===$s,metalnessMap:b,roughnessMap:v,anisotropy:B,anisotropyMap:S0,clearcoat:W,clearcoatMap:X0,clearcoatNormalMap:i0,clearcoatRoughnessMap:m0,dispersion:e0,iridescence:K,iridescenceMap:D0,iridescenceThicknessMap:P0,sheen:b0,sheenColorMap:M0,sheenRoughnessMap:q0,specularMap:B0,specularColorMap:ot,specularIntensityMap:L,transmission:u0,transmissionMap:_0,thicknessMap:Y,gradientMap:Q,opaque:_.transparent===!1&&_.blending===Ln&&_.alphaToCoverage===!1,alphaMap:p0,alphaTest:g0,alphaHash:V0,combine:_.combine,mapUv:tt&&u(_.map.channel),aoMapUv:Tt&&u(_.aoMap.channel),lightMapUv:G0&&u(_.lightMap.channel),bumpMapUv:Z0&&u(_.bumpMap.channel),normalMapUv:U0&&u(_.normalMap.channel),displacementMapUv:ct&&u(_.displacementMap.channel),emissiveMapUv:I0&&u(_.emissiveMap.channel),metalnessMapUv:b&&u(_.metalnessMap.channel),roughnessMapUv:v&&u(_.roughnessMap.channel),anisotropyMapUv:S0&&u(_.anisotropyMap.channel),clearcoatMapUv:X0&&u(_.clearcoatMap.channel),clearcoatNormalMapUv:i0&&u(_.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:m0&&u(_.clearcoatRoughnessMap.channel),iridescenceMapUv:D0&&u(_.iridescenceMap.channel),iridescenceThicknessMapUv:P0&&u(_.iridescenceThicknessMap.channel),sheenColorMapUv:M0&&u(_.sheenColorMap.channel),sheenRoughnessMapUv:q0&&u(_.sheenRoughnessMap.channel),specularMapUv:B0&&u(_.specularMap.channel),specularColorMapUv:ot&&u(_.specularColorMap.channel),specularIntensityMapUv:L&&u(_.specularIntensityMap.channel),transmissionMapUv:_0&&u(_.transmissionMap.channel),thicknessMapUv:Y&&u(_.thicknessMap.channel),alphaMapUv:p0&&u(_.alphaMap.channel),vertexTangents:!!q.attributes.tangent&&(U0||B),vertexColors:_.vertexColors,vertexAlphas:_.vertexColors===!0&&!!q.attributes.color&&q.attributes.color.itemSize===4,pointsUvs:J.isPoints===!0&&!!q.attributes.uv&&(tt||p0),fog:!!X,useFog:_.fog===!0,fogExp2:!!X&&X.isFogExp2,flatShading:_.flatShading===!0,sizeAttenuation:_.sizeAttenuation===!0,logarithmicDepthBuffer:p,reverseDepthBuffer:f,skinning:J.isSkinnedMesh===!0,morphTargets:q.morphAttributes.position!==void 0,morphNormals:q.morphAttributes.normal!==void 0,morphColors:q.morphAttributes.color!==void 0,morphTargetsCount:k0,morphTextureStride:K0,numDirLights:M.directional.length,numPointLights:M.point.length,numSpotLights:M.spot.length,numSpotLightMaps:M.spotLightMap.length,numRectAreaLights:M.rectArea.length,numHemiLights:M.hemi.length,numDirLightShadows:M.directionalShadowMap.length,numPointLightShadows:M.pointShadowMap.length,numSpotLightShadows:M.spotShadowMap.length,numSpotLightShadowsWithMaps:M.numSpotLightShadowsWithMaps,numLightProbes:M.numLightProbes,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:_.dithering,shadowMapEnabled:n.shadowMap.enabled&&j.length>0,shadowMapType:n.shadowMap.type,toneMapping:R,decodeVideoTexture:tt&&_.map.isVideoTexture===!0&&rt.getTransfer(_.map.colorSpace)===pt,premultipliedAlpha:_.premultipliedAlpha,doubleSided:_.side===fe,flipSided:_.side===Ht,useDepthPacking:_.depthPacking>=0,depthPacking:_.depthPacking||0,index0AttributeName:_.index0AttributeName,extensionClipCullDistance:E&&_.extensions.clipCullDistance===!0&&i.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(E&&_.extensions.multiDraw===!0||W0)&&i.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:i.has("KHR_parallel_shader_compile"),customProgramCacheKey:_.customProgramCacheKey()};return P.vertexUv1s=c.has(1),P.vertexUv2s=c.has(2),P.vertexUv3s=c.has(3),c.clear(),P}function A(_){const M=[];if(_.shaderID?M.push(_.shaderID):(M.push(_.customVertexShaderID),M.push(_.customFragmentShaderID)),_.defines!==void 0)for(const j in _.defines)M.push(j),M.push(_.defines[j]);return _.isRawShaderMaterial===!1&&(y(M,_),T(M,_),M.push(n.outputColorSpace)),M.push(_.customProgramCacheKey),M.join()}function y(_,M){_.push(M.precision),_.push(M.outputColorSpace),_.push(M.envMapMode),_.push(M.envMapCubeUVHeight),_.push(M.mapUv),_.push(M.alphaMapUv),_.push(M.lightMapUv),_.push(M.aoMapUv),_.push(M.bumpMapUv),_.push(M.normalMapUv),_.push(M.displacementMapUv),_.push(M.emissiveMapUv),_.push(M.metalnessMapUv),_.push(M.roughnessMapUv),_.push(M.anisotropyMapUv),_.push(M.clearcoatMapUv),_.push(M.clearcoatNormalMapUv),_.push(M.clearcoatRoughnessMapUv),_.push(M.iridescenceMapUv),_.push(M.iridescenceThicknessMapUv),_.push(M.sheenColorMapUv),_.push(M.sheenRoughnessMapUv),_.push(M.specularMapUv),_.push(M.specularColorMapUv),_.push(M.specularIntensityMapUv),_.push(M.transmissionMapUv),_.push(M.thicknessMapUv),_.push(M.combine),_.push(M.fogExp2),_.push(M.sizeAttenuation),_.push(M.morphTargetsCount),_.push(M.morphAttributeCount),_.push(M.numDirLights),_.push(M.numPointLights),_.push(M.numSpotLights),_.push(M.numSpotLightMaps),_.push(M.numHemiLights),_.push(M.numRectAreaLights),_.push(M.numDirLightShadows),_.push(M.numPointLightShadows),_.push(M.numSpotLightShadows),_.push(M.numSpotLightShadowsWithMaps),_.push(M.numLightProbes),_.push(M.shadowMapType),_.push(M.toneMapping),_.push(M.numClippingPlanes),_.push(M.numClipIntersection),_.push(M.depthPacking)}function T(_,M){o.disableAll(),M.supportsVertexTextures&&o.enable(0),M.instancing&&o.enable(1),M.instancingColor&&o.enable(2),M.instancingMorph&&o.enable(3),M.matcap&&o.enable(4),M.envMap&&o.enable(5),M.normalMapObjectSpace&&o.enable(6),M.normalMapTangentSpace&&o.enable(7),M.clearcoat&&o.enable(8),M.iridescence&&o.enable(9),M.alphaTest&&o.enable(10),M.vertexColors&&o.enable(11),M.vertexAlphas&&o.enable(12),M.vertexUv1s&&o.enable(13),M.vertexUv2s&&o.enable(14),M.vertexUv3s&&o.enable(15),M.vertexTangents&&o.enable(16),M.anisotropy&&o.enable(17),M.alphaHash&&o.enable(18),M.batching&&o.enable(19),M.dispersion&&o.enable(20),M.batchingColor&&o.enable(21),_.push(o.mask),o.disableAll(),M.fog&&o.enable(0),M.useFog&&o.enable(1),M.flatShading&&o.enable(2),M.logarithmicDepthBuffer&&o.enable(3),M.reverseDepthBuffer&&o.enable(4),M.skinning&&o.enable(5),M.morphTargets&&o.enable(6),M.morphNormals&&o.enable(7),M.morphColors&&o.enable(8),M.premultipliedAlpha&&o.enable(9),M.shadowMapEnabled&&o.enable(10),M.doubleSided&&o.enable(11),M.flipSided&&o.enable(12),M.useDepthPacking&&o.enable(13),M.dithering&&o.enable(14),M.transmission&&o.enable(15),M.sheen&&o.enable(16),M.opaque&&o.enable(17),M.pointsUvs&&o.enable(18),M.decodeVideoTexture&&o.enable(19),M.alphaToCoverage&&o.enable(20),_.push(o.mask)}function G(_){const M=x[_.type];let j;if(M){const k=zt[M];j=hr.clone(k.uniforms)}else j=_.uniforms;return j}function D(_,M){let j;for(let k=0,J=h.length;k<J;k++){const X=h[k];if(X.cacheKey===M){j=X,++j.usedTimes;break}}return j===void 0&&(j=new g7(n,M,_,s),h.push(j)),j}function w(_){if(--_.usedTimes===0){const M=h.indexOf(_);h[M]=h[h.length-1],h.pop(),_.destroy()}}function O(_){l.remove(_)}function s0(){l.dispose()}return{getParameters:d,getProgramCacheKey:A,getUniforms:G,acquireProgram:D,releaseProgram:w,releaseShaderCache:O,programs:h,dispose:s0}}function y7(){let n=new WeakMap;function t(a){return n.has(a)}function e(a){let o=n.get(a);return o===void 0&&(o={},n.set(a,o)),o}function i(a){n.delete(a)}function r(a,o,l){n.get(a)[o]=l}function s(){n=new WeakMap}return{has:t,get:e,remove:i,update:r,dispose:s}}function E7(n,t){return n.groupOrder!==t.groupOrder?n.groupOrder-t.groupOrder:n.renderOrder!==t.renderOrder?n.renderOrder-t.renderOrder:n.material.id!==t.material.id?n.material.id-t.material.id:n.z!==t.z?n.z-t.z:n.id-t.id}function cs(n,t){return n.groupOrder!==t.groupOrder?n.groupOrder-t.groupOrder:n.renderOrder!==t.renderOrder?n.renderOrder-t.renderOrder:n.z!==t.z?t.z-n.z:n.id-t.id}function us(){const n=[];let t=0;const e=[],i=[],r=[];function s(){t=0,e.length=0,i.length=0,r.length=0}function a(p,f,m,g,x,u){let d=n[t];return d===void 0?(d={id:p.id,object:p,geometry:f,material:m,groupOrder:g,renderOrder:p.renderOrder,z:x,group:u},n[t]=d):(d.id=p.id,d.object=p,d.geometry=f,d.material=m,d.groupOrder=g,d.renderOrder=p.renderOrder,d.z=x,d.group=u),t++,d}function o(p,f,m,g,x,u){const d=a(p,f,m,g,x,u);m.transmission>0?i.push(d):m.transparent===!0?r.push(d):e.push(d)}function l(p,f,m,g,x,u){const d=a(p,f,m,g,x,u);m.transmission>0?i.unshift(d):m.transparent===!0?r.unshift(d):e.unshift(d)}function c(p,f){e.length>1&&e.sort(p||E7),i.length>1&&i.sort(f||cs),r.length>1&&r.sort(f||cs)}function h(){for(let p=t,f=n.length;p<f;p++){const m=n[p];if(m.id===null)break;m.id=null,m.object=null,m.geometry=null,m.material=null,m.group=null}}return{opaque:e,transmissive:i,transparent:r,init:s,push:o,unshift:l,finish:h,sort:c}}function b7(){let n=new WeakMap;function t(i,r){const s=n.get(i);let a;return s===void 0?(a=new us,n.set(i,[a])):r>=s.length?(a=new us,s.push(a)):a=s[r],a}function e(){n=new WeakMap}return{get:t,dispose:e}}function A7(){const n={};return{get:function(t){if(n[t.id]!==void 0)return n[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new U,color:new j0};break;case"SpotLight":e={position:new U,direction:new U,color:new j0,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new U,color:new j0,distance:0,decay:0};break;case"HemisphereLight":e={direction:new U,skyColor:new j0,groundColor:new j0};break;case"RectAreaLight":e={color:new j0,position:new U,halfWidth:new U,halfHeight:new U};break}return n[t.id]=e,e}}}function T7(){const n={};return{get:function(t){if(n[t.id]!==void 0)return n[t.id];let e;switch(t.type){case"DirectionalLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new F0};break;case"SpotLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new F0};break;case"PointLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new F0,shadowCameraNear:1,shadowCameraFar:1e3};break}return n[t.id]=e,e}}}let w7=0;function C7(n,t){return(t.castShadow?2:0)-(n.castShadow?2:0)+(t.map?1:0)-(n.map?1:0)}function R7(n){const t=new A7,e=T7(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let c=0;c<9;c++)i.probe.push(new U);const r=new U,s=new mt,a=new mt;function o(c){let h=0,p=0,f=0;for(let s0=0;s0<9;s0++)i.probe[s0].set(0,0,0);let m=0,g=0,x=0,u=0,d=0,A=0,y=0,T=0,G=0,D=0,w=0;c.sort(C7);for(let s0=0,_=c.length;s0<_;s0++){const M=c[s0],j=M.color,k=M.intensity,J=M.distance,X=M.shadow&&M.shadow.map?M.shadow.map.texture:null;if(M.isAmbientLight)h+=j.r*k,p+=j.g*k,f+=j.b*k;else if(M.isLightProbe){for(let q=0;q<9;q++)i.probe[q].addScaledVector(M.sh.coefficients[q],k);w++}else if(M.isDirectionalLight){const q=t.get(M);if(q.color.copy(M.color).multiplyScalar(M.intensity),M.castShadow){const t0=M.shadow,V=e.get(M);V.shadowIntensity=t0.intensity,V.shadowBias=t0.bias,V.shadowNormalBias=t0.normalBias,V.shadowRadius=t0.radius,V.shadowMapSize=t0.mapSize,i.directionalShadow[m]=V,i.directionalShadowMap[m]=X,i.directionalShadowMatrix[m]=M.shadow.matrix,A++}i.directional[m]=q,m++}else if(M.isSpotLight){const q=t.get(M);q.position.setFromMatrixPosition(M.matrixWorld),q.color.copy(j).multiplyScalar(k),q.distance=J,q.coneCos=Math.cos(M.angle),q.penumbraCos=Math.cos(M.angle*(1-M.penumbra)),q.decay=M.decay,i.spot[x]=q;const t0=M.shadow;if(M.map&&(i.spotLightMap[G]=M.map,G++,t0.updateMatrices(M),M.castShadow&&D++),i.spotLightMatrix[x]=t0.matrix,M.castShadow){const V=e.get(M);V.shadowIntensity=t0.intensity,V.shadowBias=t0.bias,V.shadowNormalBias=t0.normalBias,V.shadowRadius=t0.radius,V.shadowMapSize=t0.mapSize,i.spotShadow[x]=V,i.spotShadowMap[x]=X,T++}x++}else if(M.isRectAreaLight){const q=t.get(M);q.color.copy(j).multiplyScalar(k),q.halfWidth.set(M.width*.5,0,0),q.halfHeight.set(0,M.height*.5,0),i.rectArea[u]=q,u++}else if(M.isPointLight){const q=t.get(M);if(q.color.copy(M.color).multiplyScalar(M.intensity),q.distance=M.distance,q.decay=M.decay,M.castShadow){const t0=M.shadow,V=e.get(M);V.shadowIntensity=t0.intensity,V.shadowBias=t0.bias,V.shadowNormalBias=t0.normalBias,V.shadowRadius=t0.radius,V.shadowMapSize=t0.mapSize,V.shadowCameraNear=t0.camera.near,V.shadowCameraFar=t0.camera.far,i.pointShadow[g]=V,i.pointShadowMap[g]=X,i.pointShadowMatrix[g]=M.shadow.matrix,y++}i.point[g]=q,g++}else if(M.isHemisphereLight){const q=t.get(M);q.skyColor.copy(M.color).multiplyScalar(k),q.groundColor.copy(M.groundColor).multiplyScalar(k),i.hemi[d]=q,d++}}u>0&&(n.has("OES_texture_float_linear")===!0?(i.rectAreaLTC1=c0.LTC_FLOAT_1,i.rectAreaLTC2=c0.LTC_FLOAT_2):(i.rectAreaLTC1=c0.LTC_HALF_1,i.rectAreaLTC2=c0.LTC_HALF_2)),i.ambient[0]=h,i.ambient[1]=p,i.ambient[2]=f;const O=i.hash;(O.directionalLength!==m||O.pointLength!==g||O.spotLength!==x||O.rectAreaLength!==u||O.hemiLength!==d||O.numDirectionalShadows!==A||O.numPointShadows!==y||O.numSpotShadows!==T||O.numSpotMaps!==G||O.numLightProbes!==w)&&(i.directional.length=m,i.spot.length=x,i.rectArea.length=u,i.point.length=g,i.hemi.length=d,i.directionalShadow.length=A,i.directionalShadowMap.length=A,i.pointShadow.length=y,i.pointShadowMap.length=y,i.spotShadow.length=T,i.spotShadowMap.length=T,i.directionalShadowMatrix.length=A,i.pointShadowMatrix.length=y,i.spotLightMatrix.length=T+G-D,i.spotLightMap.length=G,i.numSpotLightShadowsWithMaps=D,i.numLightProbes=w,O.directionalLength=m,O.pointLength=g,O.spotLength=x,O.rectAreaLength=u,O.hemiLength=d,O.numDirectionalShadows=A,O.numPointShadows=y,O.numSpotShadows=T,O.numSpotMaps=G,O.numLightProbes=w,i.version=w7++)}function l(c,h){let p=0,f=0,m=0,g=0,x=0;const u=h.matrixWorldInverse;for(let d=0,A=c.length;d<A;d++){const y=c[d];if(y.isDirectionalLight){const T=i.directional[p];T.direction.setFromMatrixPosition(y.matrixWorld),r.setFromMatrixPosition(y.target.matrixWorld),T.direction.sub(r),T.direction.transformDirection(u),p++}else if(y.isSpotLight){const T=i.spot[m];T.position.setFromMatrixPosition(y.matrixWorld),T.position.applyMatrix4(u),T.direction.setFromMatrixPosition(y.matrixWorld),r.setFromMatrixPosition(y.target.matrixWorld),T.direction.sub(r),T.direction.transformDirection(u),m++}else if(y.isRectAreaLight){const T=i.rectArea[g];T.position.setFromMatrixPosition(y.matrixWorld),T.position.applyMatrix4(u),a.identity(),s.copy(y.matrixWorld),s.premultiply(u),a.extractRotation(s),T.halfWidth.set(y.width*.5,0,0),T.halfHeight.set(0,y.height*.5,0),T.halfWidth.applyMatrix4(a),T.halfHeight.applyMatrix4(a),g++}else if(y.isPointLight){const T=i.point[f];T.position.setFromMatrixPosition(y.matrixWorld),T.position.applyMatrix4(u),f++}else if(y.isHemisphereLight){const T=i.hemi[x];T.direction.setFromMatrixPosition(y.matrixWorld),T.direction.transformDirection(u),x++}}}return{setup:o,setupView:l,state:i}}function hs(n){const t=new R7(n),e=[],i=[];function r(h){c.camera=h,e.length=0,i.length=0}function s(h){e.push(h)}function a(h){i.push(h)}function o(){t.setup(e)}function l(h){t.setupView(e,h)}const c={lightsArray:e,shadowsArray:i,camera:null,lights:t,transmissionRenderTarget:{}};return{init:r,state:c,setupLights:o,setupLightsView:l,pushLight:s,pushShadow:a}}function P7(n){let t=new WeakMap;function e(r,s=0){const a=t.get(r);let o;return a===void 0?(o=new hs(n),t.set(r,[o])):s>=a.length?(o=new hs(n),a.push(o)):o=a[s],o}function i(){t=new WeakMap}return{get:e,dispose:i}}class L7 extends an{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=h2,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class D7 extends an{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}const U7=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,I7=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function N7(n,t,e){let i=new fr;const r=new F0,s=new F0,a=new ut,o=new L7({depthPacking:f2}),l=new D7,c={},h=e.maxTextureSize,p={[He]:Ht,[Ht]:He,[fe]:fe},f=new Te({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new F0},radius:{value:4}},vertexShader:U7,fragmentShader:I7}),m=f.clone();m.defines.HORIZONTAL_PASS=1;const g=new Jt;g.setAttribute("position",new $t(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const x=new oe(g,f),u=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Bs;let d=this.type;this.render=function(D,w,O){if(u.enabled===!1||u.autoUpdate===!1&&u.needsUpdate===!1||D.length===0)return;const s0=n.getRenderTarget(),_=n.getActiveCubeFace(),M=n.getActiveMipmapLevel(),j=n.state;j.setBlending(Be),j.buffers.color.setClear(1,1,1,1),j.buffers.depth.setTest(!0),j.setScissorTest(!1);const k=d!==Me&&this.type===Me,J=d===Me&&this.type!==Me;for(let X=0,q=D.length;X<q;X++){const t0=D[X],V=t0.shadow;if(V===void 0){console.warn("THREE.WebGLShadowMap:",t0,"has no shadow.");continue}if(V.autoUpdate===!1&&V.needsUpdate===!1)continue;r.copy(V.mapSize);const f0=V.getFrameExtents();if(r.multiply(f0),s.copy(V.mapSize),(r.x>h||r.y>h)&&(r.x>h&&(s.x=Math.floor(h/f0.x),r.x=s.x*f0.x,V.mapSize.x=s.x),r.y>h&&(s.y=Math.floor(h/f0.y),r.y=s.y*f0.y,V.mapSize.y=s.y)),V.map===null||k===!0||J===!0){const l0=this.type!==Me?{minFilter:Kt,magFilter:Kt}:{};V.map!==null&&V.map.dispose(),V.map=new rn(r.x,r.y,l0),V.map.texture.name=t0.name+".shadowMap",V.camera.updateProjectionMatrix()}n.setRenderTarget(V.map),n.clear();const d0=V.getViewportCount();for(let l0=0;l0<d0;l0++){const k0=V.getViewport(l0);a.set(s.x*k0.x,s.y*k0.y,s.x*k0.z,s.y*k0.w),j.viewport(a),V.updateMatrices(t0,l0),i=V.getFrustum(),T(w,O,V.camera,t0,this.type)}V.isPointLightShadow!==!0&&this.type===Me&&A(V,O),V.needsUpdate=!1}d=this.type,u.needsUpdate=!1,n.setRenderTarget(s0,_,M)};function A(D,w){const O=t.update(x);f.defines.VSM_SAMPLES!==D.blurSamples&&(f.defines.VSM_SAMPLES=D.blurSamples,m.defines.VSM_SAMPLES=D.blurSamples,f.needsUpdate=!0,m.needsUpdate=!0),D.mapPass===null&&(D.mapPass=new rn(r.x,r.y)),f.uniforms.shadow_pass.value=D.map.texture,f.uniforms.resolution.value=D.mapSize,f.uniforms.radius.value=D.radius,n.setRenderTarget(D.mapPass),n.clear(),n.renderBufferDirect(w,null,O,f,x,null),m.uniforms.shadow_pass.value=D.mapPass.texture,m.uniforms.resolution.value=D.mapSize,m.uniforms.radius.value=D.radius,n.setRenderTarget(D.map),n.clear(),n.renderBufferDirect(w,null,O,m,x,null)}function y(D,w,O,s0){let _=null;const M=O.isPointLight===!0?D.customDistanceMaterial:D.customDepthMaterial;if(M!==void 0)_=M;else if(_=O.isPointLight===!0?l:o,n.localClippingEnabled&&w.clipShadows===!0&&Array.isArray(w.clippingPlanes)&&w.clippingPlanes.length!==0||w.displacementMap&&w.displacementScale!==0||w.alphaMap&&w.alphaTest>0||w.map&&w.alphaTest>0){const j=_.uuid,k=w.uuid;let J=c[j];J===void 0&&(J={},c[j]=J);let X=J[k];X===void 0&&(X=_.clone(),J[k]=X,w.addEventListener("dispose",G)),_=X}if(_.visible=w.visible,_.wireframe=w.wireframe,s0===Me?_.side=w.shadowSide!==null?w.shadowSide:w.side:_.side=w.shadowSide!==null?w.shadowSide:p[w.side],_.alphaMap=w.alphaMap,_.alphaTest=w.alphaTest,_.map=w.map,_.clipShadows=w.clipShadows,_.clippingPlanes=w.clippingPlanes,_.clipIntersection=w.clipIntersection,_.displacementMap=w.displacementMap,_.displacementScale=w.displacementScale,_.displacementBias=w.displacementBias,_.wireframeLinewidth=w.wireframeLinewidth,_.linewidth=w.linewidth,O.isPointLight===!0&&_.isMeshDistanceMaterial===!0){const j=n.properties.get(_);j.light=O}return _}function T(D,w,O,s0,_){if(D.visible===!1)return;if(D.layers.test(w.layers)&&(D.isMesh||D.isLine||D.isPoints)&&(D.castShadow||D.receiveShadow&&_===Me)&&(!D.frustumCulled||i.intersectsObject(D))){D.modelViewMatrix.multiplyMatrices(O.matrixWorldInverse,D.matrixWorld);const k=t.update(D),J=D.material;if(Array.isArray(J)){const X=k.groups;for(let q=0,t0=X.length;q<t0;q++){const V=X[q],f0=J[V.materialIndex];if(f0&&f0.visible){const d0=y(D,f0,s0,_);D.onBeforeShadow(n,D,w,O,k,d0,V),n.renderBufferDirect(O,null,k,d0,D,V),D.onAfterShadow(n,D,w,O,k,d0,V)}}}else if(J.visible){const X=y(D,J,s0,_);D.onBeforeShadow(n,D,w,O,k,X,null),n.renderBufferDirect(O,null,k,X,D,null),D.onAfterShadow(n,D,w,O,k,X,null)}}const j=D.children;for(let k=0,J=j.length;k<J;k++)T(j[k],w,O,s0,_)}function G(D){D.target.removeEventListener("dispose",G);for(const O in c){const s0=c[O],_=D.target.uuid;_ in s0&&(s0[_].dispose(),delete s0[_])}}}const F7={[d9]:p9,[m9]:v9,[_9]:x9,[In]:g9,[p9]:d9,[v9]:m9,[x9]:_9,[g9]:In};function O7(n){function t(){let L=!1;const _0=new ut;let Y=null;const Q=new ut(0,0,0,0);return{setMask:function(p0){Y!==p0&&!L&&(n.colorMask(p0,p0,p0,p0),Y=p0)},setLocked:function(p0){L=p0},setClear:function(p0,g0,V0,E,R){R===!0&&(p0*=E,g0*=E,V0*=E),_0.set(p0,g0,V0,E),Q.equals(_0)===!1&&(n.clearColor(p0,g0,V0,E),Q.copy(_0))},reset:function(){L=!1,Y=null,Q.set(-1,0,0,0)}}}function e(){let L=!1,_0=!1,Y=null,Q=null,p0=null;return{setReversed:function(g0){_0=g0},setTest:function(g0){g0?y0(n.DEPTH_TEST):x0(n.DEPTH_TEST)},setMask:function(g0){Y!==g0&&!L&&(n.depthMask(g0),Y=g0)},setFunc:function(g0){if(_0&&(g0=F7[g0]),Q!==g0){switch(g0){case d9:n.depthFunc(n.NEVER);break;case p9:n.depthFunc(n.ALWAYS);break;case m9:n.depthFunc(n.LESS);break;case In:n.depthFunc(n.LEQUAL);break;case _9:n.depthFunc(n.EQUAL);break;case g9:n.depthFunc(n.GEQUAL);break;case v9:n.depthFunc(n.GREATER);break;case x9:n.depthFunc(n.NOTEQUAL);break;default:n.depthFunc(n.LEQUAL)}Q=g0}},setLocked:function(g0){L=g0},setClear:function(g0){p0!==g0&&(n.clearDepth(g0),p0=g0)},reset:function(){L=!1,Y=null,Q=null,p0=null}}}function i(){let L=!1,_0=null,Y=null,Q=null,p0=null,g0=null,V0=null,E=null,R=null;return{setTest:function(P){L||(P?y0(n.STENCIL_TEST):x0(n.STENCIL_TEST))},setMask:function(P){_0!==P&&!L&&(n.stencilMask(P),_0=P)},setFunc:function(P,$,r0){(Y!==P||Q!==$||p0!==r0)&&(n.stencilFunc(P,$,r0),Y=P,Q=$,p0=r0)},setOp:function(P,$,r0){(g0!==P||V0!==$||E!==r0)&&(n.stencilOp(P,$,r0),g0=P,V0=$,E=r0)},setLocked:function(P){L=P},setClear:function(P){R!==P&&(n.clearStencil(P),R=P)},reset:function(){L=!1,_0=null,Y=null,Q=null,p0=null,g0=null,V0=null,E=null,R=null}}}const r=new t,s=new e,a=new i,o=new WeakMap,l=new WeakMap;let c={},h={},p=new WeakMap,f=[],m=null,g=!1,x=null,u=null,d=null,A=null,y=null,T=null,G=null,D=new j0(0,0,0),w=0,O=!1,s0=null,_=null,M=null,j=null,k=null;const J=n.getParameter(n.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let X=!1,q=0;const t0=n.getParameter(n.VERSION);t0.indexOf("WebGL")!==-1?(q=parseFloat(/^WebGL (\d)/.exec(t0)[1]),X=q>=1):t0.indexOf("OpenGL ES")!==-1&&(q=parseFloat(/^OpenGL ES (\d)/.exec(t0)[1]),X=q>=2);let V=null,f0={};const d0=n.getParameter(n.SCISSOR_BOX),l0=n.getParameter(n.VIEWPORT),k0=new ut().fromArray(d0),K0=new ut().fromArray(l0);function Z(L,_0,Y,Q){const p0=new Uint8Array(4),g0=n.createTexture();n.bindTexture(L,g0),n.texParameteri(L,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(L,n.TEXTURE_MAG_FILTER,n.NEAREST);for(let V0=0;V0<Y;V0++)L===n.TEXTURE_3D||L===n.TEXTURE_2D_ARRAY?n.texImage3D(_0,0,n.RGBA,1,1,Q,0,n.RGBA,n.UNSIGNED_BYTE,p0):n.texImage2D(_0+V0,0,n.RGBA,1,1,0,n.RGBA,n.UNSIGNED_BYTE,p0);return g0}const n0={};n0[n.TEXTURE_2D]=Z(n.TEXTURE_2D,n.TEXTURE_2D,1),n0[n.TEXTURE_CUBE_MAP]=Z(n.TEXTURE_CUBE_MAP,n.TEXTURE_CUBE_MAP_POSITIVE_X,6),n0[n.TEXTURE_2D_ARRAY]=Z(n.TEXTURE_2D_ARRAY,n.TEXTURE_2D_ARRAY,1,1),n0[n.TEXTURE_3D]=Z(n.TEXTURE_3D,n.TEXTURE_3D,1,1),r.setClear(0,0,0,1),s.setClear(1),a.setClear(0),y0(n.DEPTH_TEST),s.setFunc(In),G0(!1),Z0(xr),y0(n.CULL_FACE),C(Be);function y0(L){c[L]!==!0&&(n.enable(L),c[L]=!0)}function x0(L){c[L]!==!1&&(n.disable(L),c[L]=!1)}function R0(L,_0){return h[L]!==_0?(n.bindFramebuffer(L,_0),h[L]=_0,L===n.DRAW_FRAMEBUFFER&&(h[n.FRAMEBUFFER]=_0),L===n.FRAMEBUFFER&&(h[n.DRAW_FRAMEBUFFER]=_0),!0):!1}function L0(L,_0){let Y=f,Q=!1;if(L){Y=p.get(_0),Y===void 0&&(Y=[],p.set(_0,Y));const p0=L.textures;if(Y.length!==p0.length||Y[0]!==n.COLOR_ATTACHMENT0){for(let g0=0,V0=p0.length;g0<V0;g0++)Y[g0]=n.COLOR_ATTACHMENT0+g0;Y.length=p0.length,Q=!0}}else Y[0]!==n.BACK&&(Y[0]=n.BACK,Q=!0);Q&&n.drawBuffers(Y)}function W0(L){return m!==L?(n.useProgram(L),m=L,!0):!1}const tt={[$e]:n.FUNC_ADD,[B8]:n.FUNC_SUBTRACT,[z8]:n.FUNC_REVERSE_SUBTRACT};tt[H8]=n.MIN,tt[G8]=n.MAX;const Y0={[V8]:n.ZERO,[k8]:n.ONE,[W8]:n.SRC_COLOR,[h9]:n.SRC_ALPHA,[K8]:n.SRC_ALPHA_SATURATE,[j8]:n.DST_COLOR,[q8]:n.DST_ALPHA,[X8]:n.ONE_MINUS_SRC_COLOR,[f9]:n.ONE_MINUS_SRC_ALPHA,[Z8]:n.ONE_MINUS_DST_COLOR,[Y8]:n.ONE_MINUS_DST_ALPHA,[$8]:n.CONSTANT_COLOR,[J8]:n.ONE_MINUS_CONSTANT_COLOR,[Q8]:n.CONSTANT_ALPHA,[t2]:n.ONE_MINUS_CONSTANT_ALPHA};function C(L,_0,Y,Q,p0,g0,V0,E,R,P){if(L===Be){g===!0&&(x0(n.BLEND),g=!1);return}if(g===!1&&(y0(n.BLEND),g=!0),L!==O8){if(L!==x||P!==O){if((u!==$e||y!==$e)&&(n.blendEquation(n.FUNC_ADD),u=$e,y=$e),P)switch(L){case Ln:n.blendFuncSeparate(n.ONE,n.ONE_MINUS_SRC_ALPHA,n.ONE,n.ONE_MINUS_SRC_ALPHA);break;case Sr:n.blendFunc(n.ONE,n.ONE);break;case Mr:n.blendFuncSeparate(n.ZERO,n.ONE_MINUS_SRC_COLOR,n.ZERO,n.ONE);break;case yr:n.blendFuncSeparate(n.ZERO,n.SRC_COLOR,n.ZERO,n.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",L);break}else switch(L){case Ln:n.blendFuncSeparate(n.SRC_ALPHA,n.ONE_MINUS_SRC_ALPHA,n.ONE,n.ONE_MINUS_SRC_ALPHA);break;case Sr:n.blendFunc(n.SRC_ALPHA,n.ONE);break;case Mr:n.blendFuncSeparate(n.ZERO,n.ONE_MINUS_SRC_COLOR,n.ZERO,n.ONE);break;case yr:n.blendFunc(n.ZERO,n.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",L);break}d=null,A=null,T=null,G=null,D.set(0,0,0),w=0,x=L,O=P}return}p0=p0||_0,g0=g0||Y,V0=V0||Q,(_0!==u||p0!==y)&&(n.blendEquationSeparate(tt[_0],tt[p0]),u=_0,y=p0),(Y!==d||Q!==A||g0!==T||V0!==G)&&(n.blendFuncSeparate(Y0[Y],Y0[Q],Y0[g0],Y0[V0]),d=Y,A=Q,T=g0,G=V0),(E.equals(D)===!1||R!==w)&&(n.blendColor(E.r,E.g,E.b,R),D.copy(E),w=R),x=L,O=!1}function Tt(L,_0){L.side===fe?x0(n.CULL_FACE):y0(n.CULL_FACE);let Y=L.side===Ht;_0&&(Y=!Y),G0(Y),L.blending===Ln&&L.transparent===!1?C(Be):C(L.blending,L.blendEquation,L.blendSrc,L.blendDst,L.blendEquationAlpha,L.blendSrcAlpha,L.blendDstAlpha,L.blendColor,L.blendAlpha,L.premultipliedAlpha),s.setFunc(L.depthFunc),s.setTest(L.depthTest),s.setMask(L.depthWrite),r.setMask(L.colorWrite);const Q=L.stencilWrite;a.setTest(Q),Q&&(a.setMask(L.stencilWriteMask),a.setFunc(L.stencilFunc,L.stencilRef,L.stencilFuncMask),a.setOp(L.stencilFail,L.stencilZFail,L.stencilZPass)),ct(L.polygonOffset,L.polygonOffsetFactor,L.polygonOffsetUnits),L.alphaToCoverage===!0?y0(n.SAMPLE_ALPHA_TO_COVERAGE):x0(n.SAMPLE_ALPHA_TO_COVERAGE)}function G0(L){s0!==L&&(L?n.frontFace(n.CW):n.frontFace(n.CCW),s0=L)}function Z0(L){L!==I8?(y0(n.CULL_FACE),L!==_&&(L===xr?n.cullFace(n.BACK):L===N8?n.cullFace(n.FRONT):n.cullFace(n.FRONT_AND_BACK))):x0(n.CULL_FACE),_=L}function U0(L){L!==M&&(X&&n.lineWidth(L),M=L)}function ct(L,_0,Y){L?(y0(n.POLYGON_OFFSET_FILL),(j!==_0||k!==Y)&&(n.polygonOffset(_0,Y),j=_0,k=Y)):x0(n.POLYGON_OFFSET_FILL)}function I0(L){L?y0(n.SCISSOR_TEST):x0(n.SCISSOR_TEST)}function b(L){L===void 0&&(L=n.TEXTURE0+J-1),V!==L&&(n.activeTexture(L),V=L)}function v(L,_0,Y){Y===void 0&&(V===null?Y=n.TEXTURE0+J-1:Y=V);let Q=f0[Y];Q===void 0&&(Q={type:void 0,texture:void 0},f0[Y]=Q),(Q.type!==L||Q.texture!==_0)&&(V!==Y&&(n.activeTexture(Y),V=Y),n.bindTexture(L,_0||n0[L]),Q.type=L,Q.texture=_0)}function B(){const L=f0[V];L!==void 0&&L.type!==void 0&&(n.bindTexture(L.type,null),L.type=void 0,L.texture=void 0)}function W(){try{n.compressedTexImage2D.apply(n,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function e0(){try{n.compressedTexImage3D.apply(n,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function K(){try{n.texSubImage2D.apply(n,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function b0(){try{n.texSubImage3D.apply(n,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function u0(){try{n.compressedTexSubImage2D.apply(n,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function S0(){try{n.compressedTexSubImage3D.apply(n,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function X0(){try{n.texStorage2D.apply(n,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function i0(){try{n.texStorage3D.apply(n,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function m0(){try{n.texImage2D.apply(n,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function D0(){try{n.texImage3D.apply(n,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function P0(L){k0.equals(L)===!1&&(n.scissor(L.x,L.y,L.z,L.w),k0.copy(L))}function M0(L){K0.equals(L)===!1&&(n.viewport(L.x,L.y,L.z,L.w),K0.copy(L))}function q0(L,_0){let Y=l.get(_0);Y===void 0&&(Y=new WeakMap,l.set(_0,Y));let Q=Y.get(L);Q===void 0&&(Q=n.getUniformBlockIndex(_0,L.name),Y.set(L,Q))}function B0(L,_0){const Q=l.get(_0).get(L);o.get(_0)!==Q&&(n.uniformBlockBinding(_0,Q,L.__bindingPointIndex),o.set(_0,Q))}function ot(){n.disable(n.BLEND),n.disable(n.CULL_FACE),n.disable(n.DEPTH_TEST),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SCISSOR_TEST),n.disable(n.STENCIL_TEST),n.disable(n.SAMPLE_ALPHA_TO_COVERAGE),n.blendEquation(n.FUNC_ADD),n.blendFunc(n.ONE,n.ZERO),n.blendFuncSeparate(n.ONE,n.ZERO,n.ONE,n.ZERO),n.blendColor(0,0,0,0),n.colorMask(!0,!0,!0,!0),n.clearColor(0,0,0,0),n.depthMask(!0),n.depthFunc(n.LESS),n.clearDepth(1),n.stencilMask(4294967295),n.stencilFunc(n.ALWAYS,0,4294967295),n.stencilOp(n.KEEP,n.KEEP,n.KEEP),n.clearStencil(0),n.cullFace(n.BACK),n.frontFace(n.CCW),n.polygonOffset(0,0),n.activeTexture(n.TEXTURE0),n.bindFramebuffer(n.FRAMEBUFFER,null),n.bindFramebuffer(n.DRAW_FRAMEBUFFER,null),n.bindFramebuffer(n.READ_FRAMEBUFFER,null),n.useProgram(null),n.lineWidth(1),n.scissor(0,0,n.canvas.width,n.canvas.height),n.viewport(0,0,n.canvas.width,n.canvas.height),c={},V=null,f0={},h={},p=new WeakMap,f=[],m=null,g=!1,x=null,u=null,d=null,A=null,y=null,T=null,G=null,D=new j0(0,0,0),w=0,O=!1,s0=null,_=null,M=null,j=null,k=null,k0.set(0,0,n.canvas.width,n.canvas.height),K0.set(0,0,n.canvas.width,n.canvas.height),r.reset(),s.reset(),a.reset()}return{buffers:{color:r,depth:s,stencil:a},enable:y0,disable:x0,bindFramebuffer:R0,drawBuffers:L0,useProgram:W0,setBlending:C,setMaterial:Tt,setFlipSided:G0,setCullFace:Z0,setLineWidth:U0,setPolygonOffset:ct,setScissorTest:I0,activeTexture:b,bindTexture:v,unbindTexture:B,compressedTexImage2D:W,compressedTexImage3D:e0,texImage2D:m0,texImage3D:D0,updateUBOMapping:q0,uniformBlockBinding:B0,texStorage2D:X0,texStorage3D:i0,texSubImage2D:K,texSubImage3D:b0,compressedTexSubImage2D:u0,compressedTexSubImage3D:S0,scissor:P0,viewport:M0,reset:ot}}function fs(n,t,e,i){const r=B7(i);switch(e){case Ws:return n*t;case qs:return n*t;case Ys:return n*t*2;case js:return n*t/r.components*r.byteLength;case ar:return n*t/r.components*r.byteLength;case Zs:return n*t*2/r.components*r.byteLength;case or:return n*t*2/r.components*r.byteLength;case Xs:return n*t*3/r.components*r.byteLength;case ae:return n*t*4/r.components*r.byteLength;case lr:return n*t*4/r.components*r.byteLength;case Zi:case Ki:return Math.floor((n+3)/4)*Math.floor((t+3)/4)*8;case $i:case Ji:return Math.floor((n+3)/4)*Math.floor((t+3)/4)*16;case A9:case w9:return Math.max(n,16)*Math.max(t,8)/4;case b9:case T9:return Math.max(n,8)*Math.max(t,8)/2;case C9:case R9:return Math.floor((n+3)/4)*Math.floor((t+3)/4)*8;case P9:return Math.floor((n+3)/4)*Math.floor((t+3)/4)*16;case L9:return Math.floor((n+3)/4)*Math.floor((t+3)/4)*16;case D9:return Math.floor((n+4)/5)*Math.floor((t+3)/4)*16;case U9:return Math.floor((n+4)/5)*Math.floor((t+4)/5)*16;case I9:return Math.floor((n+5)/6)*Math.floor((t+4)/5)*16;case N9:return Math.floor((n+5)/6)*Math.floor((t+5)/6)*16;case F9:return Math.floor((n+7)/8)*Math.floor((t+4)/5)*16;case O9:return Math.floor((n+7)/8)*Math.floor((t+5)/6)*16;case B9:return Math.floor((n+7)/8)*Math.floor((t+7)/8)*16;case z9:return Math.floor((n+9)/10)*Math.floor((t+4)/5)*16;case H9:return Math.floor((n+9)/10)*Math.floor((t+5)/6)*16;case G9:return Math.floor((n+9)/10)*Math.floor((t+7)/8)*16;case V9:return Math.floor((n+9)/10)*Math.floor((t+9)/10)*16;case k9:return Math.floor((n+11)/12)*Math.floor((t+9)/10)*16;case W9:return Math.floor((n+11)/12)*Math.floor((t+11)/12)*16;case Qi:case X9:case q9:return Math.ceil(n/4)*Math.ceil(t/4)*16;case Ks:case Y9:return Math.ceil(n/4)*Math.ceil(t/4)*8;case j9:case Z9:return Math.ceil(n/4)*Math.ceil(t/4)*16}throw new Error(`Unable to determine texture byte length for ${e} format.`)}function B7(n){switch(n){case Ae:case Gs:return{byteLength:1,components:1};case ri:case Vs:case oi:return{byteLength:2,components:1};case rr:case sr:return{byteLength:2,components:4};case nn:case ir:case ye:return{byteLength:4,components:1};case ks:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${n}.`)}function z7(n,t,e,i,r,s,a){const o=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,l=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),c=new F0,h=new WeakMap;let p;const f=new WeakMap;let m=!1;try{m=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function g(b,v){return m?new OffscreenCanvas(b,v):c1("canvas")}function x(b,v,B){let W=1;const e0=I0(b);if((e0.width>B||e0.height>B)&&(W=B/Math.max(e0.width,e0.height)),W<1)if(typeof HTMLImageElement<"u"&&b instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&b instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&b instanceof ImageBitmap||typeof VideoFrame<"u"&&b instanceof VideoFrame){const K=Math.floor(W*e0.width),b0=Math.floor(W*e0.height);p===void 0&&(p=g(K,b0));const u0=v?g(K,b0):p;return u0.width=K,u0.height=b0,u0.getContext("2d").drawImage(b,0,0,K,b0),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+e0.width+"x"+e0.height+") to ("+K+"x"+b0+")."),u0}else return"data"in b&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+e0.width+"x"+e0.height+")."),b;return b}function u(b){return b.generateMipmaps&&b.minFilter!==Kt&&b.minFilter!==re}function d(b){n.generateMipmap(b)}function A(b,v,B,W,e0=!1){if(b!==null){if(n[b]!==void 0)return n[b];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+b+"'")}let K=v;if(v===n.RED&&(B===n.FLOAT&&(K=n.R32F),B===n.HALF_FLOAT&&(K=n.R16F),B===n.UNSIGNED_BYTE&&(K=n.R8)),v===n.RED_INTEGER&&(B===n.UNSIGNED_BYTE&&(K=n.R8UI),B===n.UNSIGNED_SHORT&&(K=n.R16UI),B===n.UNSIGNED_INT&&(K=n.R32UI),B===n.BYTE&&(K=n.R8I),B===n.SHORT&&(K=n.R16I),B===n.INT&&(K=n.R32I)),v===n.RG&&(B===n.FLOAT&&(K=n.RG32F),B===n.HALF_FLOAT&&(K=n.RG16F),B===n.UNSIGNED_BYTE&&(K=n.RG8)),v===n.RG_INTEGER&&(B===n.UNSIGNED_BYTE&&(K=n.RG8UI),B===n.UNSIGNED_SHORT&&(K=n.RG16UI),B===n.UNSIGNED_INT&&(K=n.RG32UI),B===n.BYTE&&(K=n.RG8I),B===n.SHORT&&(K=n.RG16I),B===n.INT&&(K=n.RG32I)),v===n.RGB_INTEGER&&(B===n.UNSIGNED_BYTE&&(K=n.RGB8UI),B===n.UNSIGNED_SHORT&&(K=n.RGB16UI),B===n.UNSIGNED_INT&&(K=n.RGB32UI),B===n.BYTE&&(K=n.RGB8I),B===n.SHORT&&(K=n.RGB16I),B===n.INT&&(K=n.RGB32I)),v===n.RGBA_INTEGER&&(B===n.UNSIGNED_BYTE&&(K=n.RGBA8UI),B===n.UNSIGNED_SHORT&&(K=n.RGBA16UI),B===n.UNSIGNED_INT&&(K=n.RGBA32UI),B===n.BYTE&&(K=n.RGBA8I),B===n.SHORT&&(K=n.RGBA16I),B===n.INT&&(K=n.RGBA32I)),v===n.RGB&&B===n.UNSIGNED_INT_5_9_9_9_REV&&(K=n.RGB9_E5),v===n.RGBA){const b0=e0?s1:rt.getTransfer(W);B===n.FLOAT&&(K=n.RGBA32F),B===n.HALF_FLOAT&&(K=n.RGBA16F),B===n.UNSIGNED_BYTE&&(K=b0===pt?n.SRGB8_ALPHA8:n.RGBA8),B===n.UNSIGNED_SHORT_4_4_4_4&&(K=n.RGBA4),B===n.UNSIGNED_SHORT_5_5_5_1&&(K=n.RGB5_A1)}return(K===n.R16F||K===n.R32F||K===n.RG16F||K===n.RG32F||K===n.RGBA16F||K===n.RGBA32F)&&t.get("EXT_color_buffer_float"),K}function y(b,v){let B;return b?v===null||v===nn||v===On?B=n.DEPTH24_STENCIL8:v===ye?B=n.DEPTH32F_STENCIL8:v===ri&&(B=n.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):v===null||v===nn||v===On?B=n.DEPTH_COMPONENT24:v===ye?B=n.DEPTH_COMPONENT32F:v===ri&&(B=n.DEPTH_COMPONENT16),B}function T(b,v){return u(b)===!0||b.isFramebufferTexture&&b.minFilter!==Kt&&b.minFilter!==re?Math.log2(Math.max(v.width,v.height))+1:b.mipmaps!==void 0&&b.mipmaps.length>0?b.mipmaps.length:b.isCompressedTexture&&Array.isArray(b.image)?v.mipmaps.length:1}function G(b){const v=b.target;v.removeEventListener("dispose",G),w(v),v.isVideoTexture&&h.delete(v)}function D(b){const v=b.target;v.removeEventListener("dispose",D),s0(v)}function w(b){const v=i.get(b);if(v.__webglInit===void 0)return;const B=b.source,W=f.get(B);if(W){const e0=W[v.__cacheKey];e0.usedTimes--,e0.usedTimes===0&&O(b),Object.keys(W).length===0&&f.delete(B)}i.remove(b)}function O(b){const v=i.get(b);n.deleteTexture(v.__webglTexture);const B=b.source,W=f.get(B);delete W[v.__cacheKey],a.memory.textures--}function s0(b){const v=i.get(b);if(b.depthTexture&&b.depthTexture.dispose(),b.isWebGLCubeRenderTarget)for(let W=0;W<6;W++){if(Array.isArray(v.__webglFramebuffer[W]))for(let e0=0;e0<v.__webglFramebuffer[W].length;e0++)n.deleteFramebuffer(v.__webglFramebuffer[W][e0]);else n.deleteFramebuffer(v.__webglFramebuffer[W]);v.__webglDepthbuffer&&n.deleteRenderbuffer(v.__webglDepthbuffer[W])}else{if(Array.isArray(v.__webglFramebuffer))for(let W=0;W<v.__webglFramebuffer.length;W++)n.deleteFramebuffer(v.__webglFramebuffer[W]);else n.deleteFramebuffer(v.__webglFramebuffer);if(v.__webglDepthbuffer&&n.deleteRenderbuffer(v.__webglDepthbuffer),v.__webglMultisampledFramebuffer&&n.deleteFramebuffer(v.__webglMultisampledFramebuffer),v.__webglColorRenderbuffer)for(let W=0;W<v.__webglColorRenderbuffer.length;W++)v.__webglColorRenderbuffer[W]&&n.deleteRenderbuffer(v.__webglColorRenderbuffer[W]);v.__webglDepthRenderbuffer&&n.deleteRenderbuffer(v.__webglDepthRenderbuffer)}const B=b.textures;for(let W=0,e0=B.length;W<e0;W++){const K=i.get(B[W]);K.__webglTexture&&(n.deleteTexture(K.__webglTexture),a.memory.textures--),i.remove(B[W])}i.remove(b)}let _=0;function M(){_=0}function j(){const b=_;return b>=r.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+b+" texture units while this GPU supports only "+r.maxTextures),_+=1,b}function k(b){const v=[];return v.push(b.wrapS),v.push(b.wrapT),v.push(b.wrapR||0),v.push(b.magFilter),v.push(b.minFilter),v.push(b.anisotropy),v.push(b.internalFormat),v.push(b.format),v.push(b.type),v.push(b.generateMipmaps),v.push(b.premultiplyAlpha),v.push(b.flipY),v.push(b.unpackAlignment),v.push(b.colorSpace),v.join()}function J(b,v){const B=i.get(b);if(b.isVideoTexture&&U0(b),b.isRenderTargetTexture===!1&&b.version>0&&B.__version!==b.version){const W=b.image;if(W===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(W.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{K0(B,b,v);return}}e.bindTexture(n.TEXTURE_2D,B.__webglTexture,n.TEXTURE0+v)}function X(b,v){const B=i.get(b);if(b.version>0&&B.__version!==b.version){K0(B,b,v);return}e.bindTexture(n.TEXTURE_2D_ARRAY,B.__webglTexture,n.TEXTURE0+v)}function q(b,v){const B=i.get(b);if(b.version>0&&B.__version!==b.version){K0(B,b,v);return}e.bindTexture(n.TEXTURE_3D,B.__webglTexture,n.TEXTURE0+v)}function t0(b,v){const B=i.get(b);if(b.version>0&&B.__version!==b.version){Z(B,b,v);return}e.bindTexture(n.TEXTURE_CUBE_MAP,B.__webglTexture,n.TEXTURE0+v)}const V={[y9]:n.REPEAT,[Qe]:n.CLAMP_TO_EDGE,[E9]:n.MIRRORED_REPEAT},f0={[Kt]:n.NEAREST,[u2]:n.NEAREST_MIPMAP_NEAREST,[ui]:n.NEAREST_MIPMAP_LINEAR,[re]:n.LINEAR,[y1]:n.LINEAR_MIPMAP_NEAREST,[tn]:n.LINEAR_MIPMAP_LINEAR},d0={[p2]:n.NEVER,[S2]:n.ALWAYS,[m2]:n.LESS,[Js]:n.LEQUAL,[_2]:n.EQUAL,[x2]:n.GEQUAL,[g2]:n.GREATER,[v2]:n.NOTEQUAL};function l0(b,v){if(v.type===ye&&t.has("OES_texture_float_linear")===!1&&(v.magFilter===re||v.magFilter===y1||v.magFilter===ui||v.magFilter===tn||v.minFilter===re||v.minFilter===y1||v.minFilter===ui||v.minFilter===tn)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),n.texParameteri(b,n.TEXTURE_WRAP_S,V[v.wrapS]),n.texParameteri(b,n.TEXTURE_WRAP_T,V[v.wrapT]),(b===n.TEXTURE_3D||b===n.TEXTURE_2D_ARRAY)&&n.texParameteri(b,n.TEXTURE_WRAP_R,V[v.wrapR]),n.texParameteri(b,n.TEXTURE_MAG_FILTER,f0[v.magFilter]),n.texParameteri(b,n.TEXTURE_MIN_FILTER,f0[v.minFilter]),v.compareFunction&&(n.texParameteri(b,n.TEXTURE_COMPARE_MODE,n.COMPARE_REF_TO_TEXTURE),n.texParameteri(b,n.TEXTURE_COMPARE_FUNC,d0[v.compareFunction])),t.has("EXT_texture_filter_anisotropic")===!0){if(v.magFilter===Kt||v.minFilter!==ui&&v.minFilter!==tn||v.type===ye&&t.has("OES_texture_float_linear")===!1)return;if(v.anisotropy>1||i.get(v).__currentAnisotropy){const B=t.get("EXT_texture_filter_anisotropic");n.texParameterf(b,B.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(v.anisotropy,r.getMaxAnisotropy())),i.get(v).__currentAnisotropy=v.anisotropy}}}function k0(b,v){let B=!1;b.__webglInit===void 0&&(b.__webglInit=!0,v.addEventListener("dispose",G));const W=v.source;let e0=f.get(W);e0===void 0&&(e0={},f.set(W,e0));const K=k(v);if(K!==b.__cacheKey){e0[K]===void 0&&(e0[K]={texture:n.createTexture(),usedTimes:0},a.memory.textures++,B=!0),e0[K].usedTimes++;const b0=e0[b.__cacheKey];b0!==void 0&&(e0[b.__cacheKey].usedTimes--,b0.usedTimes===0&&O(v)),b.__cacheKey=K,b.__webglTexture=e0[K].texture}return B}function K0(b,v,B){let W=n.TEXTURE_2D;(v.isDataArrayTexture||v.isCompressedArrayTexture)&&(W=n.TEXTURE_2D_ARRAY),v.isData3DTexture&&(W=n.TEXTURE_3D);const e0=k0(b,v),K=v.source;e.bindTexture(W,b.__webglTexture,n.TEXTURE0+B);const b0=i.get(K);if(K.version!==b0.__version||e0===!0){e.activeTexture(n.TEXTURE0+B);const u0=rt.getPrimaries(rt.workingColorSpace),S0=v.colorSpace===Oe?null:rt.getPrimaries(v.colorSpace),X0=v.colorSpace===Oe||u0===S0?n.NONE:n.BROWSER_DEFAULT_WEBGL;n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,v.flipY),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,v.premultiplyAlpha),n.pixelStorei(n.UNPACK_ALIGNMENT,v.unpackAlignment),n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL,X0);let i0=x(v.image,!1,r.maxTextureSize);i0=ct(v,i0);const m0=s.convert(v.format,v.colorSpace),D0=s.convert(v.type);let P0=A(v.internalFormat,m0,D0,v.colorSpace,v.isVideoTexture);l0(W,v);let M0;const q0=v.mipmaps,B0=v.isVideoTexture!==!0,ot=b0.__version===void 0||e0===!0,L=K.dataReady,_0=T(v,i0);if(v.isDepthTexture)P0=y(v.format===Bn,v.type),ot&&(B0?e.texStorage2D(n.TEXTURE_2D,1,P0,i0.width,i0.height):e.texImage2D(n.TEXTURE_2D,0,P0,i0.width,i0.height,0,m0,D0,null));else if(v.isDataTexture)if(q0.length>0){B0&&ot&&e.texStorage2D(n.TEXTURE_2D,_0,P0,q0[0].width,q0[0].height);for(let Y=0,Q=q0.length;Y<Q;Y++)M0=q0[Y],B0?L&&e.texSubImage2D(n.TEXTURE_2D,Y,0,0,M0.width,M0.height,m0,D0,M0.data):e.texImage2D(n.TEXTURE_2D,Y,P0,M0.width,M0.height,0,m0,D0,M0.data);v.generateMipmaps=!1}else B0?(ot&&e.texStorage2D(n.TEXTURE_2D,_0,P0,i0.width,i0.height),L&&e.texSubImage2D(n.TEXTURE_2D,0,0,0,i0.width,i0.height,m0,D0,i0.data)):e.texImage2D(n.TEXTURE_2D,0,P0,i0.width,i0.height,0,m0,D0,i0.data);else if(v.isCompressedTexture)if(v.isCompressedArrayTexture){B0&&ot&&e.texStorage3D(n.TEXTURE_2D_ARRAY,_0,P0,q0[0].width,q0[0].height,i0.depth);for(let Y=0,Q=q0.length;Y<Q;Y++)if(M0=q0[Y],v.format!==ae)if(m0!==null)if(B0){if(L)if(v.layerUpdates.size>0){const p0=fs(M0.width,M0.height,v.format,v.type);for(const g0 of v.layerUpdates){const V0=M0.data.subarray(g0*p0/M0.data.BYTES_PER_ELEMENT,(g0+1)*p0/M0.data.BYTES_PER_ELEMENT);e.compressedTexSubImage3D(n.TEXTURE_2D_ARRAY,Y,0,0,g0,M0.width,M0.height,1,m0,V0,0,0)}v.clearLayerUpdates()}else e.compressedTexSubImage3D(n.TEXTURE_2D_ARRAY,Y,0,0,0,M0.width,M0.height,i0.depth,m0,M0.data,0,0)}else e.compressedTexImage3D(n.TEXTURE_2D_ARRAY,Y,P0,M0.width,M0.height,i0.depth,0,M0.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else B0?L&&e.texSubImage3D(n.TEXTURE_2D_ARRAY,Y,0,0,0,M0.width,M0.height,i0.depth,m0,D0,M0.data):e.texImage3D(n.TEXTURE_2D_ARRAY,Y,P0,M0.width,M0.height,i0.depth,0,m0,D0,M0.data)}else{B0&&ot&&e.texStorage2D(n.TEXTURE_2D,_0,P0,q0[0].width,q0[0].height);for(let Y=0,Q=q0.length;Y<Q;Y++)M0=q0[Y],v.format!==ae?m0!==null?B0?L&&e.compressedTexSubImage2D(n.TEXTURE_2D,Y,0,0,M0.width,M0.height,m0,M0.data):e.compressedTexImage2D(n.TEXTURE_2D,Y,P0,M0.width,M0.height,0,M0.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):B0?L&&e.texSubImage2D(n.TEXTURE_2D,Y,0,0,M0.width,M0.height,m0,D0,M0.data):e.texImage2D(n.TEXTURE_2D,Y,P0,M0.width,M0.height,0,m0,D0,M0.data)}else if(v.isDataArrayTexture)if(B0){if(ot&&e.texStorage3D(n.TEXTURE_2D_ARRAY,_0,P0,i0.width,i0.height,i0.depth),L)if(v.layerUpdates.size>0){const Y=fs(i0.width,i0.height,v.format,v.type);for(const Q of v.layerUpdates){const p0=i0.data.subarray(Q*Y/i0.data.BYTES_PER_ELEMENT,(Q+1)*Y/i0.data.BYTES_PER_ELEMENT);e.texSubImage3D(n.TEXTURE_2D_ARRAY,0,0,0,Q,i0.width,i0.height,1,m0,D0,p0)}v.clearLayerUpdates()}else e.texSubImage3D(n.TEXTURE_2D_ARRAY,0,0,0,0,i0.width,i0.height,i0.depth,m0,D0,i0.data)}else e.texImage3D(n.TEXTURE_2D_ARRAY,0,P0,i0.width,i0.height,i0.depth,0,m0,D0,i0.data);else if(v.isData3DTexture)B0?(ot&&e.texStorage3D(n.TEXTURE_3D,_0,P0,i0.width,i0.height,i0.depth),L&&e.texSubImage3D(n.TEXTURE_3D,0,0,0,0,i0.width,i0.height,i0.depth,m0,D0,i0.data)):e.texImage3D(n.TEXTURE_3D,0,P0,i0.width,i0.height,i0.depth,0,m0,D0,i0.data);else if(v.isFramebufferTexture){if(ot)if(B0)e.texStorage2D(n.TEXTURE_2D,_0,P0,i0.width,i0.height);else{let Y=i0.width,Q=i0.height;for(let p0=0;p0<_0;p0++)e.texImage2D(n.TEXTURE_2D,p0,P0,Y,Q,0,m0,D0,null),Y>>=1,Q>>=1}}else if(q0.length>0){if(B0&&ot){const Y=I0(q0[0]);e.texStorage2D(n.TEXTURE_2D,_0,P0,Y.width,Y.height)}for(let Y=0,Q=q0.length;Y<Q;Y++)M0=q0[Y],B0?L&&e.texSubImage2D(n.TEXTURE_2D,Y,0,0,m0,D0,M0):e.texImage2D(n.TEXTURE_2D,Y,P0,m0,D0,M0);v.generateMipmaps=!1}else if(B0){if(ot){const Y=I0(i0);e.texStorage2D(n.TEXTURE_2D,_0,P0,Y.width,Y.height)}L&&e.texSubImage2D(n.TEXTURE_2D,0,0,0,m0,D0,i0)}else e.texImage2D(n.TEXTURE_2D,0,P0,m0,D0,i0);u(v)&&d(W),b0.__version=K.version,v.onUpdate&&v.onUpdate(v)}b.__version=v.version}function Z(b,v,B){if(v.image.length!==6)return;const W=k0(b,v),e0=v.source;e.bindTexture(n.TEXTURE_CUBE_MAP,b.__webglTexture,n.TEXTURE0+B);const K=i.get(e0);if(e0.version!==K.__version||W===!0){e.activeTexture(n.TEXTURE0+B);const b0=rt.getPrimaries(rt.workingColorSpace),u0=v.colorSpace===Oe?null:rt.getPrimaries(v.colorSpace),S0=v.colorSpace===Oe||b0===u0?n.NONE:n.BROWSER_DEFAULT_WEBGL;n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,v.flipY),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,v.premultiplyAlpha),n.pixelStorei(n.UNPACK_ALIGNMENT,v.unpackAlignment),n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL,S0);const X0=v.isCompressedTexture||v.image[0].isCompressedTexture,i0=v.image[0]&&v.image[0].isDataTexture,m0=[];for(let Q=0;Q<6;Q++)!X0&&!i0?m0[Q]=x(v.image[Q],!0,r.maxCubemapSize):m0[Q]=i0?v.image[Q].image:v.image[Q],m0[Q]=ct(v,m0[Q]);const D0=m0[0],P0=s.convert(v.format,v.colorSpace),M0=s.convert(v.type),q0=A(v.internalFormat,P0,M0,v.colorSpace),B0=v.isVideoTexture!==!0,ot=K.__version===void 0||W===!0,L=e0.dataReady;let _0=T(v,D0);l0(n.TEXTURE_CUBE_MAP,v);let Y;if(X0){B0&&ot&&e.texStorage2D(n.TEXTURE_CUBE_MAP,_0,q0,D0.width,D0.height);for(let Q=0;Q<6;Q++){Y=m0[Q].mipmaps;for(let p0=0;p0<Y.length;p0++){const g0=Y[p0];v.format!==ae?P0!==null?B0?L&&e.compressedTexSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+Q,p0,0,0,g0.width,g0.height,P0,g0.data):e.compressedTexImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+Q,p0,q0,g0.width,g0.height,0,g0.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):B0?L&&e.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+Q,p0,0,0,g0.width,g0.height,P0,M0,g0.data):e.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+Q,p0,q0,g0.width,g0.height,0,P0,M0,g0.data)}}}else{if(Y=v.mipmaps,B0&&ot){Y.length>0&&_0++;const Q=I0(m0[0]);e.texStorage2D(n.TEXTURE_CUBE_MAP,_0,q0,Q.width,Q.height)}for(let Q=0;Q<6;Q++)if(i0){B0?L&&e.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+Q,0,0,0,m0[Q].width,m0[Q].height,P0,M0,m0[Q].data):e.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+Q,0,q0,m0[Q].width,m0[Q].height,0,P0,M0,m0[Q].data);for(let p0=0;p0<Y.length;p0++){const V0=Y[p0].image[Q].image;B0?L&&e.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+Q,p0+1,0,0,V0.width,V0.height,P0,M0,V0.data):e.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+Q,p0+1,q0,V0.width,V0.height,0,P0,M0,V0.data)}}else{B0?L&&e.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+Q,0,0,0,P0,M0,m0[Q]):e.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+Q,0,q0,P0,M0,m0[Q]);for(let p0=0;p0<Y.length;p0++){const g0=Y[p0];B0?L&&e.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+Q,p0+1,0,0,P0,M0,g0.image[Q]):e.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+Q,p0+1,q0,P0,M0,g0.image[Q])}}}u(v)&&d(n.TEXTURE_CUBE_MAP),K.__version=e0.version,v.onUpdate&&v.onUpdate(v)}b.__version=v.version}function n0(b,v,B,W,e0,K){const b0=s.convert(B.format,B.colorSpace),u0=s.convert(B.type),S0=A(B.internalFormat,b0,u0,B.colorSpace);if(!i.get(v).__hasExternalTextures){const i0=Math.max(1,v.width>>K),m0=Math.max(1,v.height>>K);e0===n.TEXTURE_3D||e0===n.TEXTURE_2D_ARRAY?e.texImage3D(e0,K,S0,i0,m0,v.depth,0,b0,u0,null):e.texImage2D(e0,K,S0,i0,m0,0,b0,u0,null)}e.bindFramebuffer(n.FRAMEBUFFER,b),Z0(v)?o.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER,W,e0,i.get(B).__webglTexture,0,G0(v)):(e0===n.TEXTURE_2D||e0>=n.TEXTURE_CUBE_MAP_POSITIVE_X&&e0<=n.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&n.framebufferTexture2D(n.FRAMEBUFFER,W,e0,i.get(B).__webglTexture,K),e.bindFramebuffer(n.FRAMEBUFFER,null)}function y0(b,v,B){if(n.bindRenderbuffer(n.RENDERBUFFER,b),v.depthBuffer){const W=v.depthTexture,e0=W&&W.isDepthTexture?W.type:null,K=y(v.stencilBuffer,e0),b0=v.stencilBuffer?n.DEPTH_STENCIL_ATTACHMENT:n.DEPTH_ATTACHMENT,u0=G0(v);Z0(v)?o.renderbufferStorageMultisampleEXT(n.RENDERBUFFER,u0,K,v.width,v.height):B?n.renderbufferStorageMultisample(n.RENDERBUFFER,u0,K,v.width,v.height):n.renderbufferStorage(n.RENDERBUFFER,K,v.width,v.height),n.framebufferRenderbuffer(n.FRAMEBUFFER,b0,n.RENDERBUFFER,b)}else{const W=v.textures;for(let e0=0;e0<W.length;e0++){const K=W[e0],b0=s.convert(K.format,K.colorSpace),u0=s.convert(K.type),S0=A(K.internalFormat,b0,u0,K.colorSpace),X0=G0(v);B&&Z0(v)===!1?n.renderbufferStorageMultisample(n.RENDERBUFFER,X0,S0,v.width,v.height):Z0(v)?o.renderbufferStorageMultisampleEXT(n.RENDERBUFFER,X0,S0,v.width,v.height):n.renderbufferStorage(n.RENDERBUFFER,S0,v.width,v.height)}}n.bindRenderbuffer(n.RENDERBUFFER,null)}function x0(b,v){if(v&&v.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(n.FRAMEBUFFER,b),!(v.depthTexture&&v.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!i.get(v.depthTexture).__webglTexture||v.depthTexture.image.width!==v.width||v.depthTexture.image.height!==v.height)&&(v.depthTexture.image.width=v.width,v.depthTexture.image.height=v.height,v.depthTexture.needsUpdate=!0),J(v.depthTexture,0);const W=i.get(v.depthTexture).__webglTexture,e0=G0(v);if(v.depthTexture.format===Dn)Z0(v)?o.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.TEXTURE_2D,W,0,e0):n.framebufferTexture2D(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.TEXTURE_2D,W,0);else if(v.depthTexture.format===Bn)Z0(v)?o.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER,n.DEPTH_STENCIL_ATTACHMENT,n.TEXTURE_2D,W,0,e0):n.framebufferTexture2D(n.FRAMEBUFFER,n.DEPTH_STENCIL_ATTACHMENT,n.TEXTURE_2D,W,0);else throw new Error("Unknown depthTexture format")}function R0(b){const v=i.get(b),B=b.isWebGLCubeRenderTarget===!0;if(v.__boundDepthTexture!==b.depthTexture){const W=b.depthTexture;if(v.__depthDisposeCallback&&v.__depthDisposeCallback(),W){const e0=()=>{delete v.__boundDepthTexture,delete v.__depthDisposeCallback,W.removeEventListener("dispose",e0)};W.addEventListener("dispose",e0),v.__depthDisposeCallback=e0}v.__boundDepthTexture=W}if(b.depthTexture&&!v.__autoAllocateDepthBuffer){if(B)throw new Error("target.depthTexture not supported in Cube render targets");x0(v.__webglFramebuffer,b)}else if(B){v.__webglDepthbuffer=[];for(let W=0;W<6;W++)if(e.bindFramebuffer(n.FRAMEBUFFER,v.__webglFramebuffer[W]),v.__webglDepthbuffer[W]===void 0)v.__webglDepthbuffer[W]=n.createRenderbuffer(),y0(v.__webglDepthbuffer[W],b,!1);else{const e0=b.stencilBuffer?n.DEPTH_STENCIL_ATTACHMENT:n.DEPTH_ATTACHMENT,K=v.__webglDepthbuffer[W];n.bindRenderbuffer(n.RENDERBUFFER,K),n.framebufferRenderbuffer(n.FRAMEBUFFER,e0,n.RENDERBUFFER,K)}}else if(e.bindFramebuffer(n.FRAMEBUFFER,v.__webglFramebuffer),v.__webglDepthbuffer===void 0)v.__webglDepthbuffer=n.createRenderbuffer(),y0(v.__webglDepthbuffer,b,!1);else{const W=b.stencilBuffer?n.DEPTH_STENCIL_ATTACHMENT:n.DEPTH_ATTACHMENT,e0=v.__webglDepthbuffer;n.bindRenderbuffer(n.RENDERBUFFER,e0),n.framebufferRenderbuffer(n.FRAMEBUFFER,W,n.RENDERBUFFER,e0)}e.bindFramebuffer(n.FRAMEBUFFER,null)}function L0(b,v,B){const W=i.get(b);v!==void 0&&n0(W.__webglFramebuffer,b,b.texture,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,0),B!==void 0&&R0(b)}function W0(b){const v=b.texture,B=i.get(b),W=i.get(v);b.addEventListener("dispose",D);const e0=b.textures,K=b.isWebGLCubeRenderTarget===!0,b0=e0.length>1;if(b0||(W.__webglTexture===void 0&&(W.__webglTexture=n.createTexture()),W.__version=v.version,a.memory.textures++),K){B.__webglFramebuffer=[];for(let u0=0;u0<6;u0++)if(v.mipmaps&&v.mipmaps.length>0){B.__webglFramebuffer[u0]=[];for(let S0=0;S0<v.mipmaps.length;S0++)B.__webglFramebuffer[u0][S0]=n.createFramebuffer()}else B.__webglFramebuffer[u0]=n.createFramebuffer()}else{if(v.mipmaps&&v.mipmaps.length>0){B.__webglFramebuffer=[];for(let u0=0;u0<v.mipmaps.length;u0++)B.__webglFramebuffer[u0]=n.createFramebuffer()}else B.__webglFramebuffer=n.createFramebuffer();if(b0)for(let u0=0,S0=e0.length;u0<S0;u0++){const X0=i.get(e0[u0]);X0.__webglTexture===void 0&&(X0.__webglTexture=n.createTexture(),a.memory.textures++)}if(b.samples>0&&Z0(b)===!1){B.__webglMultisampledFramebuffer=n.createFramebuffer(),B.__webglColorRenderbuffer=[],e.bindFramebuffer(n.FRAMEBUFFER,B.__webglMultisampledFramebuffer);for(let u0=0;u0<e0.length;u0++){const S0=e0[u0];B.__webglColorRenderbuffer[u0]=n.createRenderbuffer(),n.bindRenderbuffer(n.RENDERBUFFER,B.__webglColorRenderbuffer[u0]);const X0=s.convert(S0.format,S0.colorSpace),i0=s.convert(S0.type),m0=A(S0.internalFormat,X0,i0,S0.colorSpace,b.isXRRenderTarget===!0),D0=G0(b);n.renderbufferStorageMultisample(n.RENDERBUFFER,D0,m0,b.width,b.height),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0+u0,n.RENDERBUFFER,B.__webglColorRenderbuffer[u0])}n.bindRenderbuffer(n.RENDERBUFFER,null),b.depthBuffer&&(B.__webglDepthRenderbuffer=n.createRenderbuffer(),y0(B.__webglDepthRenderbuffer,b,!0)),e.bindFramebuffer(n.FRAMEBUFFER,null)}}if(K){e.bindTexture(n.TEXTURE_CUBE_MAP,W.__webglTexture),l0(n.TEXTURE_CUBE_MAP,v);for(let u0=0;u0<6;u0++)if(v.mipmaps&&v.mipmaps.length>0)for(let S0=0;S0<v.mipmaps.length;S0++)n0(B.__webglFramebuffer[u0][S0],b,v,n.COLOR_ATTACHMENT0,n.TEXTURE_CUBE_MAP_POSITIVE_X+u0,S0);else n0(B.__webglFramebuffer[u0],b,v,n.COLOR_ATTACHMENT0,n.TEXTURE_CUBE_MAP_POSITIVE_X+u0,0);u(v)&&d(n.TEXTURE_CUBE_MAP),e.unbindTexture()}else if(b0){for(let u0=0,S0=e0.length;u0<S0;u0++){const X0=e0[u0],i0=i.get(X0);e.bindTexture(n.TEXTURE_2D,i0.__webglTexture),l0(n.TEXTURE_2D,X0),n0(B.__webglFramebuffer,b,X0,n.COLOR_ATTACHMENT0+u0,n.TEXTURE_2D,0),u(X0)&&d(n.TEXTURE_2D)}e.unbindTexture()}else{let u0=n.TEXTURE_2D;if((b.isWebGL3DRenderTarget||b.isWebGLArrayRenderTarget)&&(u0=b.isWebGL3DRenderTarget?n.TEXTURE_3D:n.TEXTURE_2D_ARRAY),e.bindTexture(u0,W.__webglTexture),l0(u0,v),v.mipmaps&&v.mipmaps.length>0)for(let S0=0;S0<v.mipmaps.length;S0++)n0(B.__webglFramebuffer[S0],b,v,n.COLOR_ATTACHMENT0,u0,S0);else n0(B.__webglFramebuffer,b,v,n.COLOR_ATTACHMENT0,u0,0);u(v)&&d(u0),e.unbindTexture()}b.depthBuffer&&R0(b)}function tt(b){const v=b.textures;for(let B=0,W=v.length;B<W;B++){const e0=v[B];if(u(e0)){const K=b.isWebGLCubeRenderTarget?n.TEXTURE_CUBE_MAP:n.TEXTURE_2D,b0=i.get(e0).__webglTexture;e.bindTexture(K,b0),d(K),e.unbindTexture()}}}const Y0=[],C=[];function Tt(b){if(b.samples>0){if(Z0(b)===!1){const v=b.textures,B=b.width,W=b.height;let e0=n.COLOR_BUFFER_BIT;const K=b.stencilBuffer?n.DEPTH_STENCIL_ATTACHMENT:n.DEPTH_ATTACHMENT,b0=i.get(b),u0=v.length>1;if(u0)for(let S0=0;S0<v.length;S0++)e.bindFramebuffer(n.FRAMEBUFFER,b0.__webglMultisampledFramebuffer),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0+S0,n.RENDERBUFFER,null),e.bindFramebuffer(n.FRAMEBUFFER,b0.__webglFramebuffer),n.framebufferTexture2D(n.DRAW_FRAMEBUFFER,n.COLOR_ATTACHMENT0+S0,n.TEXTURE_2D,null,0);e.bindFramebuffer(n.READ_FRAMEBUFFER,b0.__webglMultisampledFramebuffer),e.bindFramebuffer(n.DRAW_FRAMEBUFFER,b0.__webglFramebuffer);for(let S0=0;S0<v.length;S0++){if(b.resolveDepthBuffer&&(b.depthBuffer&&(e0|=n.DEPTH_BUFFER_BIT),b.stencilBuffer&&b.resolveStencilBuffer&&(e0|=n.STENCIL_BUFFER_BIT)),u0){n.framebufferRenderbuffer(n.READ_FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.RENDERBUFFER,b0.__webglColorRenderbuffer[S0]);const X0=i.get(v[S0]).__webglTexture;n.framebufferTexture2D(n.DRAW_FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,X0,0)}n.blitFramebuffer(0,0,B,W,0,0,B,W,e0,n.NEAREST),l===!0&&(Y0.length=0,C.length=0,Y0.push(n.COLOR_ATTACHMENT0+S0),b.depthBuffer&&b.resolveDepthBuffer===!1&&(Y0.push(K),C.push(K),n.invalidateFramebuffer(n.DRAW_FRAMEBUFFER,C)),n.invalidateFramebuffer(n.READ_FRAMEBUFFER,Y0))}if(e.bindFramebuffer(n.READ_FRAMEBUFFER,null),e.bindFramebuffer(n.DRAW_FRAMEBUFFER,null),u0)for(let S0=0;S0<v.length;S0++){e.bindFramebuffer(n.FRAMEBUFFER,b0.__webglMultisampledFramebuffer),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0+S0,n.RENDERBUFFER,b0.__webglColorRenderbuffer[S0]);const X0=i.get(v[S0]).__webglTexture;e.bindFramebuffer(n.FRAMEBUFFER,b0.__webglFramebuffer),n.framebufferTexture2D(n.DRAW_FRAMEBUFFER,n.COLOR_ATTACHMENT0+S0,n.TEXTURE_2D,X0,0)}e.bindFramebuffer(n.DRAW_FRAMEBUFFER,b0.__webglMultisampledFramebuffer)}else if(b.depthBuffer&&b.resolveDepthBuffer===!1&&l){const v=b.stencilBuffer?n.DEPTH_STENCIL_ATTACHMENT:n.DEPTH_ATTACHMENT;n.invalidateFramebuffer(n.DRAW_FRAMEBUFFER,[v])}}}function G0(b){return Math.min(r.maxSamples,b.samples)}function Z0(b){const v=i.get(b);return b.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&v.__useRenderToTexture!==!1}function U0(b){const v=a.render.frame;h.get(b)!==v&&(h.set(b,v),b.update())}function ct(b,v){const B=b.colorSpace,W=b.format,e0=b.type;return b.isCompressedTexture===!0||b.isVideoTexture===!0||B!==Ge&&B!==Oe&&(rt.getTransfer(B)===pt?(W!==ae||e0!==Ae)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",B)),v}function I0(b){return typeof HTMLImageElement<"u"&&b instanceof HTMLImageElement?(c.width=b.naturalWidth||b.width,c.height=b.naturalHeight||b.height):typeof VideoFrame<"u"&&b instanceof VideoFrame?(c.width=b.displayWidth,c.height=b.displayHeight):(c.width=b.width,c.height=b.height),c}this.allocateTextureUnit=j,this.resetTextureUnits=M,this.setTexture2D=J,this.setTexture2DArray=X,this.setTexture3D=q,this.setTextureCube=t0,this.rebindTextures=L0,this.setupRenderTarget=W0,this.updateRenderTargetMipmap=tt,this.updateMultisampleRenderTarget=Tt,this.setupDepthRenderbuffer=R0,this.setupFrameBufferTexture=n0,this.useMultisampledRTT=Z0}function H7(n,t){function e(i,r=Oe){let s;const a=rt.getTransfer(r);if(i===Ae)return n.UNSIGNED_BYTE;if(i===rr)return n.UNSIGNED_SHORT_4_4_4_4;if(i===sr)return n.UNSIGNED_SHORT_5_5_5_1;if(i===ks)return n.UNSIGNED_INT_5_9_9_9_REV;if(i===Gs)return n.BYTE;if(i===Vs)return n.SHORT;if(i===ri)return n.UNSIGNED_SHORT;if(i===ir)return n.INT;if(i===nn)return n.UNSIGNED_INT;if(i===ye)return n.FLOAT;if(i===oi)return n.HALF_FLOAT;if(i===Ws)return n.ALPHA;if(i===Xs)return n.RGB;if(i===ae)return n.RGBA;if(i===qs)return n.LUMINANCE;if(i===Ys)return n.LUMINANCE_ALPHA;if(i===Dn)return n.DEPTH_COMPONENT;if(i===Bn)return n.DEPTH_STENCIL;if(i===js)return n.RED;if(i===ar)return n.RED_INTEGER;if(i===Zs)return n.RG;if(i===or)return n.RG_INTEGER;if(i===lr)return n.RGBA_INTEGER;if(i===Zi||i===Ki||i===$i||i===Ji)if(a===pt)if(s=t.get("WEBGL_compressed_texture_s3tc_srgb"),s!==null){if(i===Zi)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(i===Ki)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(i===$i)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(i===Ji)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(s=t.get("WEBGL_compressed_texture_s3tc"),s!==null){if(i===Zi)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(i===Ki)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(i===$i)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(i===Ji)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(i===b9||i===A9||i===T9||i===w9)if(s=t.get("WEBGL_compressed_texture_pvrtc"),s!==null){if(i===b9)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(i===A9)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(i===T9)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(i===w9)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(i===C9||i===R9||i===P9)if(s=t.get("WEBGL_compressed_texture_etc"),s!==null){if(i===C9||i===R9)return a===pt?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(i===P9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(i===L9||i===D9||i===U9||i===I9||i===N9||i===F9||i===O9||i===B9||i===z9||i===H9||i===G9||i===V9||i===k9||i===W9)if(s=t.get("WEBGL_compressed_texture_astc"),s!==null){if(i===L9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(i===D9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(i===U9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(i===I9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(i===N9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(i===F9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(i===O9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(i===B9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(i===z9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(i===H9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(i===G9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(i===V9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(i===k9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(i===W9)return a===pt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(i===Qi||i===X9||i===q9)if(s=t.get("EXT_texture_compression_bptc"),s!==null){if(i===Qi)return a===pt?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(i===X9)return s.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(i===q9)return s.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(i===Ks||i===Y9||i===j9||i===Z9)if(s=t.get("EXT_texture_compression_rgtc"),s!==null){if(i===Qi)return s.COMPRESSED_RED_RGTC1_EXT;if(i===Y9)return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(i===j9)return s.COMPRESSED_RED_GREEN_RGTC2_EXT;if(i===Z9)return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return i===On?n.UNSIGNED_INT_24_8:n[i]!==void 0?n[i]:null}return{convert:e}}class G7 extends jt{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}class Li extends At{constructor(){super(),this.isGroup=!0,this.type="Group"}}const V7={type:"move"};class K1{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Li,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Li,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new U,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new U),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Li,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new U,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new U),this._grip}dispatchEvent(t){return this._targetRay!==null&&this._targetRay.dispatchEvent(t),this._grip!==null&&this._grip.dispatchEvent(t),this._hand!==null&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const i of t.hand.values())this._getHandJoint(e,i)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(t,e,i){let r=null,s=null,a=null;const o=this._targetRay,l=this._grip,c=this._hand;if(t&&e.session.visibilityState!=="visible-blurred"){if(c&&t.hand){a=!0;for(const x of t.hand.values()){const u=e.getJointPose(x,i),d=this._getHandJoint(c,x);u!==null&&(d.matrix.fromArray(u.transform.matrix),d.matrix.decompose(d.position,d.rotation,d.scale),d.matrixWorldNeedsUpdate=!0,d.jointRadius=u.radius),d.visible=u!==null}const h=c.joints["index-finger-tip"],p=c.joints["thumb-tip"],f=h.position.distanceTo(p.position),m=.02,g=.005;c.inputState.pinching&&f>m+g?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!c.inputState.pinching&&f<=m-g&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else l!==null&&t.gripSpace&&(s=e.getPose(t.gripSpace,i),s!==null&&(l.matrix.fromArray(s.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),l.matrixWorldNeedsUpdate=!0,s.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(s.linearVelocity)):l.hasLinearVelocity=!1,s.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(s.angularVelocity)):l.hasAngularVelocity=!1));o!==null&&(r=e.getPose(t.targetRaySpace,i),r===null&&s!==null&&(r=s),r!==null&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1,this.dispatchEvent(V7)))}return o!==null&&(o.visible=r!==null),l!==null&&(l.visible=s!==null),c!==null&&(c.visible=a!==null),this}_getHandJoint(t,e){if(t.joints[e.jointName]===void 0){const i=new Li;i.matrixAutoUpdate=!1,i.visible=!1,t.joints[e.jointName]=i,t.add(i)}return t.joints[e.jointName]}}const k7=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,W7=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class X7{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(t,e,i){if(this.texture===null){const r=new Bt,s=t.properties.get(r);s.__webglTexture=e.texture,(e.depthNear!=i.depthNear||e.depthFar!=i.depthFar)&&(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=r}}getMesh(t){if(this.texture!==null&&this.mesh===null){const e=t.cameras[0].viewport,i=new Te({vertexShader:k7,fragmentShader:W7,uniforms:{depthColor:{value:this.texture},depthWidth:{value:e.z},depthHeight:{value:e.w}}});this.mesh=new oe(new ci(20,20),i)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class q7 extends sn{constructor(t,e){super();const i=this;let r=null,s=1,a=null,o="local-floor",l=1,c=null,h=null,p=null,f=null,m=null,g=null;const x=new X7,u=e.getContextAttributes();let d=null,A=null;const y=[],T=[],G=new F0;let D=null;const w=new jt;w.layers.enable(1),w.viewport=new ut;const O=new jt;O.layers.enable(2),O.viewport=new ut;const s0=[w,O],_=new G7;_.layers.enable(1),_.layers.enable(2);let M=null,j=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(Z){let n0=y[Z];return n0===void 0&&(n0=new K1,y[Z]=n0),n0.getTargetRaySpace()},this.getControllerGrip=function(Z){let n0=y[Z];return n0===void 0&&(n0=new K1,y[Z]=n0),n0.getGripSpace()},this.getHand=function(Z){let n0=y[Z];return n0===void 0&&(n0=new K1,y[Z]=n0),n0.getHandSpace()};function k(Z){const n0=T.indexOf(Z.inputSource);if(n0===-1)return;const y0=y[n0];y0!==void 0&&(y0.update(Z.inputSource,Z.frame,c||a),y0.dispatchEvent({type:Z.type,data:Z.inputSource}))}function J(){r.removeEventListener("select",k),r.removeEventListener("selectstart",k),r.removeEventListener("selectend",k),r.removeEventListener("squeeze",k),r.removeEventListener("squeezestart",k),r.removeEventListener("squeezeend",k),r.removeEventListener("end",J),r.removeEventListener("inputsourceschange",X);for(let Z=0;Z<y.length;Z++){const n0=T[Z];n0!==null&&(T[Z]=null,y[Z].disconnect(n0))}M=null,j=null,x.reset(),t.setRenderTarget(d),m=null,f=null,p=null,r=null,A=null,K0.stop(),i.isPresenting=!1,t.setPixelRatio(D),t.setSize(G.width,G.height,!1),i.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(Z){s=Z,i.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(Z){o=Z,i.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return c||a},this.setReferenceSpace=function(Z){c=Z},this.getBaseLayer=function(){return f!==null?f:m},this.getBinding=function(){return p},this.getFrame=function(){return g},this.getSession=function(){return r},this.setSession=async function(Z){if(r=Z,r!==null){if(d=t.getRenderTarget(),r.addEventListener("select",k),r.addEventListener("selectstart",k),r.addEventListener("selectend",k),r.addEventListener("squeeze",k),r.addEventListener("squeezestart",k),r.addEventListener("squeezeend",k),r.addEventListener("end",J),r.addEventListener("inputsourceschange",X),u.xrCompatible!==!0&&await e.makeXRCompatible(),D=t.getPixelRatio(),t.getSize(G),r.renderState.layers===void 0){const n0={antialias:u.antialias,alpha:!0,depth:u.depth,stencil:u.stencil,framebufferScaleFactor:s};m=new XRWebGLLayer(r,e,n0),r.updateRenderState({baseLayer:m}),t.setPixelRatio(1),t.setSize(m.framebufferWidth,m.framebufferHeight,!1),A=new rn(m.framebufferWidth,m.framebufferHeight,{format:ae,type:Ae,colorSpace:t.outputColorSpace,stencilBuffer:u.stencil})}else{let n0=null,y0=null,x0=null;u.depth&&(x0=u.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24,n0=u.stencil?Bn:Dn,y0=u.stencil?On:nn);const R0={colorFormat:e.RGBA8,depthFormat:x0,scaleFactor:s};p=new XRWebGLBinding(r,e),f=p.createProjectionLayer(R0),r.updateRenderState({layers:[f]}),t.setPixelRatio(1),t.setSize(f.textureWidth,f.textureHeight,!1),A=new rn(f.textureWidth,f.textureHeight,{format:ae,type:Ae,depthTexture:new f8(f.textureWidth,f.textureHeight,y0,void 0,void 0,void 0,void 0,void 0,void 0,n0),stencilBuffer:u.stencil,colorSpace:t.outputColorSpace,samples:u.antialias?4:0,resolveDepthBuffer:f.ignoreDepthValues===!1})}A.isXRRenderTarget=!0,this.setFoveation(l),c=null,a=await r.requestReferenceSpace(o),K0.setContext(r),K0.start(),i.isPresenting=!0,i.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(r!==null)return r.environmentBlendMode},this.getDepthTexture=function(){return x.getDepthTexture()};function X(Z){for(let n0=0;n0<Z.removed.length;n0++){const y0=Z.removed[n0],x0=T.indexOf(y0);x0>=0&&(T[x0]=null,y[x0].disconnect(y0))}for(let n0=0;n0<Z.added.length;n0++){const y0=Z.added[n0];let x0=T.indexOf(y0);if(x0===-1){for(let L0=0;L0<y.length;L0++)if(L0>=T.length){T.push(y0),x0=L0;break}else if(T[L0]===null){T[L0]=y0,x0=L0;break}if(x0===-1)break}const R0=y[x0];R0&&R0.connect(y0)}}const q=new U,t0=new U;function V(Z,n0,y0){q.setFromMatrixPosition(n0.matrixWorld),t0.setFromMatrixPosition(y0.matrixWorld);const x0=q.distanceTo(t0),R0=n0.projectionMatrix.elements,L0=y0.projectionMatrix.elements,W0=R0[14]/(R0[10]-1),tt=R0[14]/(R0[10]+1),Y0=(R0[9]+1)/R0[5],C=(R0[9]-1)/R0[5],Tt=(R0[8]-1)/R0[0],G0=(L0[8]+1)/L0[0],Z0=W0*Tt,U0=W0*G0,ct=x0/(-Tt+G0),I0=ct*-Tt;if(n0.matrixWorld.decompose(Z.position,Z.quaternion,Z.scale),Z.translateX(I0),Z.translateZ(ct),Z.matrixWorld.compose(Z.position,Z.quaternion,Z.scale),Z.matrixWorldInverse.copy(Z.matrixWorld).invert(),R0[10]===-1)Z.projectionMatrix.copy(n0.projectionMatrix),Z.projectionMatrixInverse.copy(n0.projectionMatrixInverse);else{const b=W0+ct,v=tt+ct,B=Z0-I0,W=U0+(x0-I0),e0=Y0*tt/v*b,K=C*tt/v*b;Z.projectionMatrix.makePerspective(B,W,e0,K,b,v),Z.projectionMatrixInverse.copy(Z.projectionMatrix).invert()}}function f0(Z,n0){n0===null?Z.matrixWorld.copy(Z.matrix):Z.matrixWorld.multiplyMatrices(n0.matrixWorld,Z.matrix),Z.matrixWorldInverse.copy(Z.matrixWorld).invert()}this.updateCamera=function(Z){if(r===null)return;let n0=Z.near,y0=Z.far;x.texture!==null&&(x.depthNear>0&&(n0=x.depthNear),x.depthFar>0&&(y0=x.depthFar)),_.near=O.near=w.near=n0,_.far=O.far=w.far=y0,(M!==_.near||j!==_.far)&&(r.updateRenderState({depthNear:_.near,depthFar:_.far}),M=_.near,j=_.far);const x0=Z.parent,R0=_.cameras;f0(_,x0);for(let L0=0;L0<R0.length;L0++)f0(R0[L0],x0);R0.length===2?V(_,w,O):_.projectionMatrix.copy(w.projectionMatrix),d0(Z,_,x0)};function d0(Z,n0,y0){y0===null?Z.matrix.copy(n0.matrixWorld):(Z.matrix.copy(y0.matrixWorld),Z.matrix.invert(),Z.matrix.multiply(n0.matrixWorld)),Z.matrix.decompose(Z.position,Z.quaternion,Z.scale),Z.updateMatrixWorld(!0),Z.projectionMatrix.copy(n0.projectionMatrix),Z.projectionMatrixInverse.copy(n0.projectionMatrixInverse),Z.isPerspectiveCamera&&(Z.fov=si*2*Math.atan(1/Z.projectionMatrix.elements[5]),Z.zoom=1)}this.getCamera=function(){return _},this.getFoveation=function(){if(!(f===null&&m===null))return l},this.setFoveation=function(Z){l=Z,f!==null&&(f.fixedFoveation=Z),m!==null&&m.fixedFoveation!==void 0&&(m.fixedFoveation=Z)},this.hasDepthSensing=function(){return x.texture!==null},this.getDepthSensingMesh=function(){return x.getMesh(_)};let l0=null;function k0(Z,n0){if(h=n0.getViewerPose(c||a),g=n0,h!==null){const y0=h.views;m!==null&&(t.setRenderTargetFramebuffer(A,m.framebuffer),t.setRenderTarget(A));let x0=!1;y0.length!==_.cameras.length&&(_.cameras.length=0,x0=!0);for(let L0=0;L0<y0.length;L0++){const W0=y0[L0];let tt=null;if(m!==null)tt=m.getViewport(W0);else{const C=p.getViewSubImage(f,W0);tt=C.viewport,L0===0&&(t.setRenderTargetTextures(A,C.colorTexture,f.ignoreDepthValues?void 0:C.depthStencilTexture),t.setRenderTarget(A))}let Y0=s0[L0];Y0===void 0&&(Y0=new jt,Y0.layers.enable(L0),Y0.viewport=new ut,s0[L0]=Y0),Y0.matrix.fromArray(W0.transform.matrix),Y0.matrix.decompose(Y0.position,Y0.quaternion,Y0.scale),Y0.projectionMatrix.fromArray(W0.projectionMatrix),Y0.projectionMatrixInverse.copy(Y0.projectionMatrix).invert(),Y0.viewport.set(tt.x,tt.y,tt.width,tt.height),L0===0&&(_.matrix.copy(Y0.matrix),_.matrix.decompose(_.position,_.quaternion,_.scale)),x0===!0&&_.cameras.push(Y0)}const R0=r.enabledFeatures;if(R0&&R0.includes("depth-sensing")){const L0=p.getDepthInformation(y0[0]);L0&&L0.isValid&&L0.texture&&x.init(t,L0,r.renderState)}}for(let y0=0;y0<y.length;y0++){const x0=T[y0],R0=y[y0];x0!==null&&R0!==void 0&&R0.update(x0,n0,c||a)}l0&&l0(Z,n0),n0.detectedPlanes&&i.dispatchEvent({type:"planesdetected",data:n0}),g=null}const K0=new h8;K0.setAnimationLoop(k0),this.setAnimationLoop=function(Z){l0=Z},this.dispose=function(){}}}const je=new me,Y7=new mt;function j7(n,t){function e(u,d){u.matrixAutoUpdate===!0&&u.updateMatrix(),d.value.copy(u.matrix)}function i(u,d){d.color.getRGB(u.fogColor.value,l8(n)),d.isFog?(u.fogNear.value=d.near,u.fogFar.value=d.far):d.isFogExp2&&(u.fogDensity.value=d.density)}function r(u,d,A,y,T){d.isMeshBasicMaterial||d.isMeshLambertMaterial?s(u,d):d.isMeshToonMaterial?(s(u,d),p(u,d)):d.isMeshPhongMaterial?(s(u,d),h(u,d)):d.isMeshStandardMaterial?(s(u,d),f(u,d),d.isMeshPhysicalMaterial&&m(u,d,T)):d.isMeshMatcapMaterial?(s(u,d),g(u,d)):d.isMeshDepthMaterial?s(u,d):d.isMeshDistanceMaterial?(s(u,d),x(u,d)):d.isMeshNormalMaterial?s(u,d):d.isLineBasicMaterial?(a(u,d),d.isLineDashedMaterial&&o(u,d)):d.isPointsMaterial?l(u,d,A,y):d.isSpriteMaterial?c(u,d):d.isShadowMaterial?(u.color.value.copy(d.color),u.opacity.value=d.opacity):d.isShaderMaterial&&(d.uniformsNeedUpdate=!1)}function s(u,d){u.opacity.value=d.opacity,d.color&&u.diffuse.value.copy(d.color),d.emissive&&u.emissive.value.copy(d.emissive).multiplyScalar(d.emissiveIntensity),d.map&&(u.map.value=d.map,e(d.map,u.mapTransform)),d.alphaMap&&(u.alphaMap.value=d.alphaMap,e(d.alphaMap,u.alphaMapTransform)),d.bumpMap&&(u.bumpMap.value=d.bumpMap,e(d.bumpMap,u.bumpMapTransform),u.bumpScale.value=d.bumpScale,d.side===Ht&&(u.bumpScale.value*=-1)),d.normalMap&&(u.normalMap.value=d.normalMap,e(d.normalMap,u.normalMapTransform),u.normalScale.value.copy(d.normalScale),d.side===Ht&&u.normalScale.value.negate()),d.displacementMap&&(u.displacementMap.value=d.displacementMap,e(d.displacementMap,u.displacementMapTransform),u.displacementScale.value=d.displacementScale,u.displacementBias.value=d.displacementBias),d.emissiveMap&&(u.emissiveMap.value=d.emissiveMap,e(d.emissiveMap,u.emissiveMapTransform)),d.specularMap&&(u.specularMap.value=d.specularMap,e(d.specularMap,u.specularMapTransform)),d.alphaTest>0&&(u.alphaTest.value=d.alphaTest);const A=t.get(d),y=A.envMap,T=A.envMapRotation;y&&(u.envMap.value=y,je.copy(T),je.x*=-1,je.y*=-1,je.z*=-1,y.isCubeTexture&&y.isRenderTargetTexture===!1&&(je.y*=-1,je.z*=-1),u.envMapRotation.value.setFromMatrix4(Y7.makeRotationFromEuler(je)),u.flipEnvMap.value=y.isCubeTexture&&y.isRenderTargetTexture===!1?-1:1,u.reflectivity.value=d.reflectivity,u.ior.value=d.ior,u.refractionRatio.value=d.refractionRatio),d.lightMap&&(u.lightMap.value=d.lightMap,u.lightMapIntensity.value=d.lightMapIntensity,e(d.lightMap,u.lightMapTransform)),d.aoMap&&(u.aoMap.value=d.aoMap,u.aoMapIntensity.value=d.aoMapIntensity,e(d.aoMap,u.aoMapTransform))}function a(u,d){u.diffuse.value.copy(d.color),u.opacity.value=d.opacity,d.map&&(u.map.value=d.map,e(d.map,u.mapTransform))}function o(u,d){u.dashSize.value=d.dashSize,u.totalSize.value=d.dashSize+d.gapSize,u.scale.value=d.scale}function l(u,d,A,y){u.diffuse.value.copy(d.color),u.opacity.value=d.opacity,u.size.value=d.size*A,u.scale.value=y*.5,d.map&&(u.map.value=d.map,e(d.map,u.uvTransform)),d.alphaMap&&(u.alphaMap.value=d.alphaMap,e(d.alphaMap,u.alphaMapTransform)),d.alphaTest>0&&(u.alphaTest.value=d.alphaTest)}function c(u,d){u.diffuse.value.copy(d.color),u.opacity.value=d.opacity,u.rotation.value=d.rotation,d.map&&(u.map.value=d.map,e(d.map,u.mapTransform)),d.alphaMap&&(u.alphaMap.value=d.alphaMap,e(d.alphaMap,u.alphaMapTransform)),d.alphaTest>0&&(u.alphaTest.value=d.alphaTest)}function h(u,d){u.specular.value.copy(d.specular),u.shininess.value=Math.max(d.shininess,1e-4)}function p(u,d){d.gradientMap&&(u.gradientMap.value=d.gradientMap)}function f(u,d){u.metalness.value=d.metalness,d.metalnessMap&&(u.metalnessMap.value=d.metalnessMap,e(d.metalnessMap,u.metalnessMapTransform)),u.roughness.value=d.roughness,d.roughnessMap&&(u.roughnessMap.value=d.roughnessMap,e(d.roughnessMap,u.roughnessMapTransform)),d.envMap&&(u.envMapIntensity.value=d.envMapIntensity)}function m(u,d,A){u.ior.value=d.ior,d.sheen>0&&(u.sheenColor.value.copy(d.sheenColor).multiplyScalar(d.sheen),u.sheenRoughness.value=d.sheenRoughness,d.sheenColorMap&&(u.sheenColorMap.value=d.sheenColorMap,e(d.sheenColorMap,u.sheenColorMapTransform)),d.sheenRoughnessMap&&(u.sheenRoughnessMap.value=d.sheenRoughnessMap,e(d.sheenRoughnessMap,u.sheenRoughnessMapTransform))),d.clearcoat>0&&(u.clearcoat.value=d.clearcoat,u.clearcoatRoughness.value=d.clearcoatRoughness,d.clearcoatMap&&(u.clearcoatMap.value=d.clearcoatMap,e(d.clearcoatMap,u.clearcoatMapTransform)),d.clearcoatRoughnessMap&&(u.clearcoatRoughnessMap.value=d.clearcoatRoughnessMap,e(d.clearcoatRoughnessMap,u.clearcoatRoughnessMapTransform)),d.clearcoatNormalMap&&(u.clearcoatNormalMap.value=d.clearcoatNormalMap,e(d.clearcoatNormalMap,u.clearcoatNormalMapTransform),u.clearcoatNormalScale.value.copy(d.clearcoatNormalScale),d.side===Ht&&u.clearcoatNormalScale.value.negate())),d.dispersion>0&&(u.dispersion.value=d.dispersion),d.iridescence>0&&(u.iridescence.value=d.iridescence,u.iridescenceIOR.value=d.iridescenceIOR,u.iridescenceThicknessMinimum.value=d.iridescenceThicknessRange[0],u.iridescenceThicknessMaximum.value=d.iridescenceThicknessRange[1],d.iridescenceMap&&(u.iridescenceMap.value=d.iridescenceMap,e(d.iridescenceMap,u.iridescenceMapTransform)),d.iridescenceThicknessMap&&(u.iridescenceThicknessMap.value=d.iridescenceThicknessMap,e(d.iridescenceThicknessMap,u.iridescenceThicknessMapTransform))),d.transmission>0&&(u.transmission.value=d.transmission,u.transmissionSamplerMap.value=A.texture,u.transmissionSamplerSize.value.set(A.width,A.height),d.transmissionMap&&(u.transmissionMap.value=d.transmissionMap,e(d.transmissionMap,u.transmissionMapTransform)),u.thickness.value=d.thickness,d.thicknessMap&&(u.thicknessMap.value=d.thicknessMap,e(d.thicknessMap,u.thicknessMapTransform)),u.attenuationDistance.value=d.attenuationDistance,u.attenuationColor.value.copy(d.attenuationColor)),d.anisotropy>0&&(u.anisotropyVector.value.set(d.anisotropy*Math.cos(d.anisotropyRotation),d.anisotropy*Math.sin(d.anisotropyRotation)),d.anisotropyMap&&(u.anisotropyMap.value=d.anisotropyMap,e(d.anisotropyMap,u.anisotropyMapTransform))),u.specularIntensity.value=d.specularIntensity,u.specularColor.value.copy(d.specularColor),d.specularColorMap&&(u.specularColorMap.value=d.specularColorMap,e(d.specularColorMap,u.specularColorMapTransform)),d.specularIntensityMap&&(u.specularIntensityMap.value=d.specularIntensityMap,e(d.specularIntensityMap,u.specularIntensityMapTransform))}function g(u,d){d.matcap&&(u.matcap.value=d.matcap)}function x(u,d){const A=t.get(d).light;u.referencePosition.value.setFromMatrixPosition(A.matrixWorld),u.nearDistance.value=A.shadow.camera.near,u.farDistance.value=A.shadow.camera.far}return{refreshFogUniforms:i,refreshMaterialUniforms:r}}function Z7(n,t,e,i){let r={},s={},a=[];const o=n.getParameter(n.MAX_UNIFORM_BUFFER_BINDINGS);function l(A,y){const T=y.program;i.uniformBlockBinding(A,T)}function c(A,y){let T=r[A.id];T===void 0&&(g(A),T=h(A),r[A.id]=T,A.addEventListener("dispose",u));const G=y.program;i.updateUBOMapping(A,G);const D=t.render.frame;s[A.id]!==D&&(f(A),s[A.id]=D)}function h(A){const y=p();A.__bindingPointIndex=y;const T=n.createBuffer(),G=A.__size,D=A.usage;return n.bindBuffer(n.UNIFORM_BUFFER,T),n.bufferData(n.UNIFORM_BUFFER,G,D),n.bindBuffer(n.UNIFORM_BUFFER,null),n.bindBufferBase(n.UNIFORM_BUFFER,y,T),T}function p(){for(let A=0;A<o;A++)if(a.indexOf(A)===-1)return a.push(A),A;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function f(A){const y=r[A.id],T=A.uniforms,G=A.__cache;n.bindBuffer(n.UNIFORM_BUFFER,y);for(let D=0,w=T.length;D<w;D++){const O=Array.isArray(T[D])?T[D]:[T[D]];for(let s0=0,_=O.length;s0<_;s0++){const M=O[s0];if(m(M,D,s0,G)===!0){const j=M.__offset,k=Array.isArray(M.value)?M.value:[M.value];let J=0;for(let X=0;X<k.length;X++){const q=k[X],t0=x(q);typeof q=="number"||typeof q=="boolean"?(M.__data[0]=q,n.bufferSubData(n.UNIFORM_BUFFER,j+J,M.__data)):q.isMatrix3?(M.__data[0]=q.elements[0],M.__data[1]=q.elements[1],M.__data[2]=q.elements[2],M.__data[3]=0,M.__data[4]=q.elements[3],M.__data[5]=q.elements[4],M.__data[6]=q.elements[5],M.__data[7]=0,M.__data[8]=q.elements[6],M.__data[9]=q.elements[7],M.__data[10]=q.elements[8],M.__data[11]=0):(q.toArray(M.__data,J),J+=t0.storage/Float32Array.BYTES_PER_ELEMENT)}n.bufferSubData(n.UNIFORM_BUFFER,j,M.__data)}}}n.bindBuffer(n.UNIFORM_BUFFER,null)}function m(A,y,T,G){const D=A.value,w=y+"_"+T;if(G[w]===void 0)return typeof D=="number"||typeof D=="boolean"?G[w]=D:G[w]=D.clone(),!0;{const O=G[w];if(typeof D=="number"||typeof D=="boolean"){if(O!==D)return G[w]=D,!0}else if(O.equals(D)===!1)return O.copy(D),!0}return!1}function g(A){const y=A.uniforms;let T=0;const G=16;for(let w=0,O=y.length;w<O;w++){const s0=Array.isArray(y[w])?y[w]:[y[w]];for(let _=0,M=s0.length;_<M;_++){const j=s0[_],k=Array.isArray(j.value)?j.value:[j.value];for(let J=0,X=k.length;J<X;J++){const q=k[J],t0=x(q),V=T%G,f0=V%t0.boundary,d0=V+f0;T+=f0,d0!==0&&G-d0<t0.storage&&(T+=G-d0),j.__data=new Float32Array(t0.storage/Float32Array.BYTES_PER_ELEMENT),j.__offset=T,T+=t0.storage}}}const D=T%G;return D>0&&(T+=G-D),A.__size=T,A.__cache={},this}function x(A){const y={boundary:0,storage:0};return typeof A=="number"||typeof A=="boolean"?(y.boundary=4,y.storage=4):A.isVector2?(y.boundary=8,y.storage=8):A.isVector3||A.isColor?(y.boundary=16,y.storage=12):A.isVector4?(y.boundary=16,y.storage=16):A.isMatrix3?(y.boundary=48,y.storage=48):A.isMatrix4?(y.boundary=64,y.storage=64):A.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",A),y}function u(A){const y=A.target;y.removeEventListener("dispose",u);const T=a.indexOf(y.__bindingPointIndex);a.splice(T,1),n.deleteBuffer(r[y.id]),delete r[y.id],delete s[y.id]}function d(){for(const A in r)n.deleteBuffer(r[A]);a=[],r={},s={}}return{bind:l,update:c,dispose:d}}class K7{constructor(t={}){const{canvas:e=O2(),context:i=null,depth:r=!0,stencil:s=!1,alpha:a=!1,antialias:o=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:c=!1,powerPreference:h="default",failIfMajorPerformanceCaveat:p=!1}=t;this.isWebGLRenderer=!0;let f;if(i!==null){if(typeof WebGLRenderingContext<"u"&&i instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");f=i.getContextAttributes().alpha}else f=a;const m=new Uint32Array(4),g=new Int32Array(4);let x=null,u=null;const d=[],A=[];this.domElement=e,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=he,this.toneMapping=ze,this.toneMappingExposure=1;const y=this;let T=!1,G=0,D=0,w=null,O=-1,s0=null;const _=new ut,M=new ut;let j=null;const k=new j0(0);let J=0,X=e.width,q=e.height,t0=1,V=null,f0=null;const d0=new ut(0,0,X,q),l0=new ut(0,0,X,q);let k0=!1;const K0=new fr;let Z=!1,n0=!1;const y0=new mt,x0=new mt,R0=new U,L0=new ut,W0={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let tt=!1;function Y0(){return w===null?t0:1}let C=i;function Tt(S,I){return e.getContext(S,I)}try{const S={alpha:!0,depth:r,stencil:s,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:h,failIfMajorPerformanceCaveat:p};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${nr}`),e.addEventListener("webglcontextlost",Q,!1),e.addEventListener("webglcontextrestored",p0,!1),e.addEventListener("webglcontextcreationerror",g0,!1),C===null){const I="webgl2";if(C=Tt(I,S),C===null)throw Tt(I)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(S){throw console.error("THREE.WebGLRenderer: "+S.message),S}let G0,Z0,U0,ct,I0,b,v,B,W,e0,K,b0,u0,S0,X0,i0,m0,D0,P0,M0,q0,B0,ot,L;function _0(){G0=new e3(C),G0.init(),B0=new H7(C,G0),Z0=new Zo(C,G0,t,B0),U0=new O7(C),Z0.reverseDepthBuffer&&U0.buffers.depth.setReversed(!0),ct=new r3(C),I0=new y7,b=new z7(C,G0,U0,I0,Z0,B0,ct),v=new $o(y),B=new t3(y),W=new ua(C),ot=new Yo(C,W),e0=new n3(C,W,ct,ot),K=new a3(C,e0,W,ct),P0=new s3(C,Z0,b),i0=new Ko(I0),b0=new M7(y,v,B,G0,Z0,ot,i0),u0=new j7(y,I0),S0=new b7,X0=new P7(G0),D0=new qo(y,v,B,U0,K,f,l),m0=new N7(y,K,Z0),L=new Z7(C,ct,Z0,U0),M0=new jo(C,G0,ct),q0=new i3(C,G0,ct),ct.programs=b0.programs,y.capabilities=Z0,y.extensions=G0,y.properties=I0,y.renderLists=S0,y.shadowMap=m0,y.state=U0,y.info=ct}_0();const Y=new q7(y,C);this.xr=Y,this.getContext=function(){return C},this.getContextAttributes=function(){return C.getContextAttributes()},this.forceContextLoss=function(){const S=G0.get("WEBGL_lose_context");S&&S.loseContext()},this.forceContextRestore=function(){const S=G0.get("WEBGL_lose_context");S&&S.restoreContext()},this.getPixelRatio=function(){return t0},this.setPixelRatio=function(S){S!==void 0&&(t0=S,this.setSize(X,q,!1))},this.getSize=function(S){return S.set(X,q)},this.setSize=function(S,I,z=!0){if(Y.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}X=S,q=I,e.width=Math.floor(S*t0),e.height=Math.floor(I*t0),z===!0&&(e.style.width=S+"px",e.style.height=I+"px"),this.setViewport(0,0,S,I)},this.getDrawingBufferSize=function(S){return S.set(X*t0,q*t0).floor()},this.setDrawingBufferSize=function(S,I,z){X=S,q=I,t0=z,e.width=Math.floor(S*z),e.height=Math.floor(I*z),this.setViewport(0,0,S,I)},this.getCurrentViewport=function(S){return S.copy(_)},this.getViewport=function(S){return S.copy(d0)},this.setViewport=function(S,I,z,H){S.isVector4?d0.set(S.x,S.y,S.z,S.w):d0.set(S,I,z,H),U0.viewport(_.copy(d0).multiplyScalar(t0).round())},this.getScissor=function(S){return S.copy(l0)},this.setScissor=function(S,I,z,H){S.isVector4?l0.set(S.x,S.y,S.z,S.w):l0.set(S,I,z,H),U0.scissor(M.copy(l0).multiplyScalar(t0).round())},this.getScissorTest=function(){return k0},this.setScissorTest=function(S){U0.setScissorTest(k0=S)},this.setOpaqueSort=function(S){V=S},this.setTransparentSort=function(S){f0=S},this.getClearColor=function(S){return S.copy(D0.getClearColor())},this.setClearColor=function(){D0.setClearColor.apply(D0,arguments)},this.getClearAlpha=function(){return D0.getClearAlpha()},this.setClearAlpha=function(){D0.setClearAlpha.apply(D0,arguments)},this.clear=function(S=!0,I=!0,z=!0){let H=0;if(S){let N=!1;if(w!==null){const a0=w.texture.format;N=a0===lr||a0===or||a0===ar}if(N){const a0=w.texture.type,v0=a0===Ae||a0===nn||a0===ri||a0===On||a0===rr||a0===sr,E0=D0.getClearColor(),A0=D0.getClearAlpha(),N0=E0.r,O0=E0.g,T0=E0.b;v0?(m[0]=N0,m[1]=O0,m[2]=T0,m[3]=A0,C.clearBufferuiv(C.COLOR,0,m)):(g[0]=N0,g[1]=O0,g[2]=T0,g[3]=A0,C.clearBufferiv(C.COLOR,0,g))}else H|=C.COLOR_BUFFER_BIT}I&&(H|=C.DEPTH_BUFFER_BIT,C.clearDepth(this.capabilities.reverseDepthBuffer?0:1)),z&&(H|=C.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),C.clear(H)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",Q,!1),e.removeEventListener("webglcontextrestored",p0,!1),e.removeEventListener("webglcontextcreationerror",g0,!1),S0.dispose(),X0.dispose(),I0.dispose(),v.dispose(),B.dispose(),K.dispose(),ot.dispose(),L.dispose(),b0.dispose(),Y.dispose(),Y.removeEventListener("sessionstart",o0),Y.removeEventListener("sessionend",w0),h0.stop()};function Q(S){S.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),T=!0}function p0(){console.log("THREE.WebGLRenderer: Context Restored."),T=!1;const S=ct.autoReset,I=m0.enabled,z=m0.autoUpdate,H=m0.needsUpdate,N=m0.type;_0(),ct.autoReset=S,m0.enabled=I,m0.autoUpdate=z,m0.needsUpdate=H,m0.type=N}function g0(S){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",S.statusMessage)}function V0(S){const I=S.target;I.removeEventListener("dispose",V0),E(I)}function E(S){R(S),I0.remove(S)}function R(S){const I=I0.get(S).programs;I!==void 0&&(I.forEach(function(z){b0.releaseProgram(z)}),S.isShaderMaterial&&b0.releaseShaderCache(S))}this.renderBufferDirect=function(S,I,z,H,N,a0){I===null&&(I=W0);const v0=N.isMesh&&N.matrixWorld.determinant()<0,E0=Mt(S,I,z,H,N);U0.setMaterial(H,v0);let A0=z.index,N0=1;if(H.wireframe===!0){if(A0=e0.getWireframeAttribute(z),A0===void 0)return;N0=2}const O0=z.drawRange,T0=z.attributes.position;let st=O0.start*N0,dt=(O0.start+O0.count)*N0;a0!==null&&(st=Math.max(st,a0.start*N0),dt=Math.min(dt,(a0.start+a0.count)*N0)),A0!==null?(st=Math.max(st,0),dt=Math.min(dt,A0.count)):T0!=null&&(st=Math.max(st,0),dt=Math.min(dt,T0.count));const _t=dt-st;if(_t<0||_t===1/0)return;ot.setup(N,H,E0,z,A0);let Vt,nt=M0;if(A0!==null&&(Vt=W.get(A0),nt=q0,nt.setIndex(Vt)),N.isMesh)H.wireframe===!0?(U0.setLineWidth(H.wireframeLinewidth*Y0()),nt.setMode(C.LINES)):nt.setMode(C.TRIANGLES);else if(N.isLine){let C0=H.linewidth;C0===void 0&&(C0=1),U0.setLineWidth(C0*Y0()),N.isLineSegments?nt.setMode(C.LINES):N.isLineLoop?nt.setMode(C.LINE_LOOP):nt.setMode(C.LINE_STRIP)}else N.isPoints?nt.setMode(C.POINTS):N.isSprite&&nt.setMode(C.TRIANGLES);if(N.isBatchedMesh)if(N._multiDrawInstances!==null)nt.renderMultiDrawInstances(N._multiDrawStarts,N._multiDrawCounts,N._multiDrawCount,N._multiDrawInstances);else if(G0.get("WEBGL_multi_draw"))nt.renderMultiDraw(N._multiDrawStarts,N._multiDrawCounts,N._multiDrawCount);else{const C0=N._multiDrawStarts,wt=N._multiDrawCounts,it=N._multiDrawCount,Qt=A0?W.get(A0).bytesPerElement:1,on=I0.get(H).currentProgram.getUniforms();for(let kt=0;kt<it;kt++)on.setValue(C,"_gl_DrawID",kt),nt.render(C0[kt]/Qt,wt[kt])}else if(N.isInstancedMesh)nt.renderInstances(st,_t,N.count);else if(z.isInstancedBufferGeometry){const C0=z._maxInstanceCount!==void 0?z._maxInstanceCount:1/0,wt=Math.min(z.instanceCount,C0);nt.renderInstances(st,_t,wt)}else nt.render(st,_t)};function P(S,I,z){S.transparent===!0&&S.side===fe&&S.forceSinglePass===!1?(S.side=Ht,S.needsUpdate=!0,ft(S,I,z),S.side=He,S.needsUpdate=!0,ft(S,I,z),S.side=fe):ft(S,I,z)}this.compile=function(S,I,z=null){z===null&&(z=S),u=X0.get(z),u.init(I),A.push(u),z.traverseVisible(function(N){N.isLight&&N.layers.test(I.layers)&&(u.pushLight(N),N.castShadow&&u.pushShadow(N))}),S!==z&&S.traverseVisible(function(N){N.isLight&&N.layers.test(I.layers)&&(u.pushLight(N),N.castShadow&&u.pushShadow(N))}),u.setupLights();const H=new Set;return S.traverse(function(N){if(!(N.isMesh||N.isPoints||N.isLine||N.isSprite))return;const a0=N.material;if(a0)if(Array.isArray(a0))for(let v0=0;v0<a0.length;v0++){const E0=a0[v0];P(E0,z,N),H.add(E0)}else P(a0,z,N),H.add(a0)}),A.pop(),u=null,H},this.compileAsync=function(S,I,z=null){const H=this.compile(S,I,z);return new Promise(N=>{function a0(){if(H.forEach(function(v0){I0.get(v0).currentProgram.isReady()&&H.delete(v0)}),H.size===0){N(S);return}setTimeout(a0,10)}G0.get("KHR_parallel_shader_compile")!==null?a0():setTimeout(a0,10)})};let $=null;function r0(S){$&&$(S)}function o0(){h0.stop()}function w0(){h0.start()}const h0=new h8;h0.setAnimationLoop(r0),typeof self<"u"&&h0.setContext(self),this.setAnimationLoop=function(S){$=S,Y.setAnimationLoop(S),S===null?h0.stop():h0.start()},Y.addEventListener("sessionstart",o0),Y.addEventListener("sessionend",w0),this.render=function(S,I){if(I!==void 0&&I.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(T===!0)return;if(S.matrixWorldAutoUpdate===!0&&S.updateMatrixWorld(),I.parent===null&&I.matrixWorldAutoUpdate===!0&&I.updateMatrixWorld(),Y.enabled===!0&&Y.isPresenting===!0&&(Y.cameraAutoUpdate===!0&&Y.updateCamera(I),I=Y.getCamera()),S.isScene===!0&&S.onBeforeRender(y,S,I,w),u=X0.get(S,A.length),u.init(I),A.push(u),x0.multiplyMatrices(I.projectionMatrix,I.matrixWorldInverse),K0.setFromProjectionMatrix(x0),n0=this.localClippingEnabled,Z=i0.init(this.clippingPlanes,n0),x=S0.get(S,d.length),x.init(),d.push(x),Y.enabled===!0&&Y.isPresenting===!0){const a0=y.xr.getDepthSensingMesh();a0!==null&&J0(a0,I,-1/0,y.sortObjects)}J0(S,I,0,y.sortObjects),x.finish(),y.sortObjects===!0&&x.sort(V,f0),tt=Y.enabled===!1||Y.isPresenting===!1||Y.hasDepthSensing()===!1,tt&&D0.addToRenderList(x,S),this.info.render.frame++,Z===!0&&i0.beginShadows();const z=u.state.shadowsArray;m0.render(z,S,I),Z===!0&&i0.endShadows(),this.info.autoReset===!0&&this.info.reset();const H=x.opaque,N=x.transmissive;if(u.setupLights(),I.isArrayCamera){const a0=I.cameras;if(N.length>0)for(let v0=0,E0=a0.length;v0<E0;v0++){const A0=a0[v0];ht(H,N,S,A0)}tt&&D0.render(S);for(let v0=0,E0=a0.length;v0<E0;v0++){const A0=a0[v0];et(x,S,A0,A0.viewport)}}else N.length>0&&ht(H,N,S,I),tt&&D0.render(S),et(x,S,I);w!==null&&(b.updateMultisampleRenderTarget(w),b.updateRenderTargetMipmap(w)),S.isScene===!0&&S.onAfterRender(y,S,I),ot.resetDefaultState(),O=-1,s0=null,A.pop(),A.length>0?(u=A[A.length-1],Z===!0&&i0.setGlobalState(y.clippingPlanes,u.state.camera)):u=null,d.pop(),d.length>0?x=d[d.length-1]:x=null};function J0(S,I,z,H){if(S.visible===!1)return;if(S.layers.test(I.layers)){if(S.isGroup)z=S.renderOrder;else if(S.isLOD)S.autoUpdate===!0&&S.update(I);else if(S.isLight)u.pushLight(S),S.castShadow&&u.pushShadow(S);else if(S.isSprite){if(!S.frustumCulled||K0.intersectsSprite(S)){H&&L0.setFromMatrixPosition(S.matrixWorld).applyMatrix4(x0);const v0=K.update(S),E0=S.material;E0.visible&&x.push(S,v0,E0,z,L0.z,null)}}else if((S.isMesh||S.isLine||S.isPoints)&&(!S.frustumCulled||K0.intersectsObject(S))){const v0=K.update(S),E0=S.material;if(H&&(S.boundingSphere!==void 0?(S.boundingSphere===null&&S.computeBoundingSphere(),L0.copy(S.boundingSphere.center)):(v0.boundingSphere===null&&v0.computeBoundingSphere(),L0.copy(v0.boundingSphere.center)),L0.applyMatrix4(S.matrixWorld).applyMatrix4(x0)),Array.isArray(E0)){const A0=v0.groups;for(let N0=0,O0=A0.length;N0<O0;N0++){const T0=A0[N0],st=E0[T0.materialIndex];st&&st.visible&&x.push(S,v0,st,z,L0.z,T0)}}else E0.visible&&x.push(S,v0,E0,z,L0.z,null)}}const a0=S.children;for(let v0=0,E0=a0.length;v0<E0;v0++)J0(a0[v0],I,z,H)}function et(S,I,z,H){const N=S.opaque,a0=S.transmissive,v0=S.transparent;u.setupLightsView(z),Z===!0&&i0.setGlobalState(y.clippingPlanes,z),H&&U0.viewport(_.copy(H)),N.length>0&&lt(N,I,z),a0.length>0&&lt(a0,I,z),v0.length>0&&lt(v0,I,z),U0.buffers.depth.setTest(!0),U0.buffers.depth.setMask(!0),U0.buffers.color.setMask(!0),U0.setPolygonOffset(!1)}function ht(S,I,z,H){if((z.isScene===!0?z.overrideMaterial:null)!==null)return;u.state.transmissionRenderTarget[H.id]===void 0&&(u.state.transmissionRenderTarget[H.id]=new rn(1,1,{generateMipmaps:!0,type:G0.has("EXT_color_buffer_half_float")||G0.has("EXT_color_buffer_float")?oi:Ae,minFilter:tn,samples:4,stencilBuffer:s,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:rt.workingColorSpace}));const a0=u.state.transmissionRenderTarget[H.id],v0=H.viewport||_;a0.setSize(v0.z,v0.w);const E0=y.getRenderTarget();y.setRenderTarget(a0),y.getClearColor(k),J=y.getClearAlpha(),J<1&&y.setClearColor(16777215,.5),y.clear(),tt&&D0.render(z);const A0=y.toneMapping;y.toneMapping=ze;const N0=H.viewport;if(H.viewport!==void 0&&(H.viewport=void 0),u.setupLightsView(H),Z===!0&&i0.setGlobalState(y.clippingPlanes,H),lt(S,z,H),b.updateMultisampleRenderTarget(a0),b.updateRenderTargetMipmap(a0),G0.has("WEBGL_multisampled_render_to_texture")===!1){let O0=!1;for(let T0=0,st=I.length;T0<st;T0++){const dt=I[T0],_t=dt.object,Vt=dt.geometry,nt=dt.material,C0=dt.group;if(nt.side===fe&&_t.layers.test(H.layers)){const wt=nt.side;nt.side=Ht,nt.needsUpdate=!0,$0(_t,z,H,Vt,nt,C0),nt.side=wt,nt.needsUpdate=!0,O0=!0}}O0===!0&&(b.updateMultisampleRenderTarget(a0),b.updateRenderTargetMipmap(a0))}y.setRenderTarget(E0),y.setClearColor(k,J),N0!==void 0&&(H.viewport=N0),y.toneMapping=A0}function lt(S,I,z){const H=I.isScene===!0?I.overrideMaterial:null;for(let N=0,a0=S.length;N<a0;N++){const v0=S[N],E0=v0.object,A0=v0.geometry,N0=H===null?v0.material:H,O0=v0.group;E0.layers.test(z.layers)&&$0(E0,I,z,A0,N0,O0)}}function $0(S,I,z,H,N,a0){S.onBeforeRender(y,I,z,H,N,a0),S.modelViewMatrix.multiplyMatrices(z.matrixWorldInverse,S.matrixWorld),S.normalMatrix.getNormalMatrix(S.modelViewMatrix),N.onBeforeRender(y,I,z,H,S,a0),N.transparent===!0&&N.side===fe&&N.forceSinglePass===!1?(N.side=Ht,N.needsUpdate=!0,y.renderBufferDirect(z,I,H,N,S,a0),N.side=He,N.needsUpdate=!0,y.renderBufferDirect(z,I,H,N,S,a0),N.side=fe):y.renderBufferDirect(z,I,H,N,S,a0),S.onAfterRender(y,I,z,H,N,a0)}function ft(S,I,z){I.isScene!==!0&&(I=W0);const H=I0.get(S),N=u.state.lights,a0=u.state.shadowsArray,v0=N.state.version,E0=b0.getParameters(S,N.state,a0,I,z),A0=b0.getProgramCacheKey(E0);let N0=H.programs;H.environment=S.isMeshStandardMaterial?I.environment:null,H.fog=I.fog,H.envMap=(S.isMeshStandardMaterial?B:v).get(S.envMap||H.environment),H.envMapRotation=H.environment!==null&&S.envMap===null?I.environmentRotation:S.envMapRotation,N0===void 0&&(S.addEventListener("dispose",V0),N0=new Map,H.programs=N0);let O0=N0.get(A0);if(O0!==void 0){if(H.currentProgram===O0&&H.lightsStateVersion===v0)return gt(S,E0),O0}else E0.uniforms=b0.getUniforms(S),S.onBeforeCompile(E0,y),O0=b0.acquireProgram(E0,A0),N0.set(A0,O0),H.uniforms=E0.uniforms;const T0=H.uniforms;return(!S.isShaderMaterial&&!S.isRawShaderMaterial||S.clipping===!0)&&(T0.clippingPlanes=i0.uniform),gt(S,E0),H.needsLights=Wn(S),H.lightsStateVersion=v0,H.needsLights&&(T0.ambientLightColor.value=N.state.ambient,T0.lightProbe.value=N.state.probe,T0.directionalLights.value=N.state.directional,T0.directionalLightShadows.value=N.state.directionalShadow,T0.spotLights.value=N.state.spot,T0.spotLightShadows.value=N.state.spotShadow,T0.rectAreaLights.value=N.state.rectArea,T0.ltc_1.value=N.state.rectAreaLTC1,T0.ltc_2.value=N.state.rectAreaLTC2,T0.pointLights.value=N.state.point,T0.pointLightShadows.value=N.state.pointShadow,T0.hemisphereLights.value=N.state.hemi,T0.directionalShadowMap.value=N.state.directionalShadowMap,T0.directionalShadowMatrix.value=N.state.directionalShadowMatrix,T0.spotShadowMap.value=N.state.spotShadowMap,T0.spotLightMatrix.value=N.state.spotLightMatrix,T0.spotLightMap.value=N.state.spotLightMap,T0.pointShadowMap.value=N.state.pointShadowMap,T0.pointShadowMatrix.value=N.state.pointShadowMatrix),H.currentProgram=O0,H.uniformsList=null,O0}function St(S){if(S.uniformsList===null){const I=S.currentProgram.getUniforms();S.uniformsList=e1.seqWithValue(I.seq,S.uniforms)}return S.uniformsList}function gt(S,I){const z=I0.get(S);z.outputColorSpace=I.outputColorSpace,z.batching=I.batching,z.batchingColor=I.batchingColor,z.instancing=I.instancing,z.instancingColor=I.instancingColor,z.instancingMorph=I.instancingMorph,z.skinning=I.skinning,z.morphTargets=I.morphTargets,z.morphNormals=I.morphNormals,z.morphColors=I.morphColors,z.morphTargetsCount=I.morphTargetsCount,z.numClippingPlanes=I.numClippingPlanes,z.numIntersection=I.numClipIntersection,z.vertexAlphas=I.vertexAlphas,z.vertexTangents=I.vertexTangents,z.toneMapping=I.toneMapping}function Mt(S,I,z,H,N){I.isScene!==!0&&(I=W0),b.resetTextureUnits();const a0=I.fog,v0=H.isMeshStandardMaterial?I.environment:null,E0=w===null?y.outputColorSpace:w.isXRRenderTarget===!0?w.texture.colorSpace:Ge,A0=(H.isMeshStandardMaterial?B:v).get(H.envMap||v0),N0=H.vertexColors===!0&&!!z.attributes.color&&z.attributes.color.itemSize===4,O0=!!z.attributes.tangent&&(!!H.normalMap||H.anisotropy>0),T0=!!z.morphAttributes.position,st=!!z.morphAttributes.normal,dt=!!z.morphAttributes.color;let _t=ze;H.toneMapped&&(w===null||w.isXRRenderTarget===!0)&&(_t=y.toneMapping);const Vt=z.morphAttributes.position||z.morphAttributes.normal||z.morphAttributes.color,nt=Vt!==void 0?Vt.length:0,C0=I0.get(H),wt=u.state.lights;if(Z===!0&&(n0===!0||S!==s0)){const qt=S===s0&&H.id===O;i0.setState(H,S,qt)}let it=!1;H.version===C0.__version?(C0.needsLights&&C0.lightsStateVersion!==wt.state.version||C0.outputColorSpace!==E0||N.isBatchedMesh&&C0.batching===!1||!N.isBatchedMesh&&C0.batching===!0||N.isBatchedMesh&&C0.batchingColor===!0&&N.colorTexture===null||N.isBatchedMesh&&C0.batchingColor===!1&&N.colorTexture!==null||N.isInstancedMesh&&C0.instancing===!1||!N.isInstancedMesh&&C0.instancing===!0||N.isSkinnedMesh&&C0.skinning===!1||!N.isSkinnedMesh&&C0.skinning===!0||N.isInstancedMesh&&C0.instancingColor===!0&&N.instanceColor===null||N.isInstancedMesh&&C0.instancingColor===!1&&N.instanceColor!==null||N.isInstancedMesh&&C0.instancingMorph===!0&&N.morphTexture===null||N.isInstancedMesh&&C0.instancingMorph===!1&&N.morphTexture!==null||C0.envMap!==A0||H.fog===!0&&C0.fog!==a0||C0.numClippingPlanes!==void 0&&(C0.numClippingPlanes!==i0.numPlanes||C0.numIntersection!==i0.numIntersection)||C0.vertexAlphas!==N0||C0.vertexTangents!==O0||C0.morphTargets!==T0||C0.morphNormals!==st||C0.morphColors!==dt||C0.toneMapping!==_t||C0.morphTargetsCount!==nt)&&(it=!0):(it=!0,C0.__version=H.version);let Qt=C0.currentProgram;it===!0&&(Qt=ft(H,I,N));let on=!1,kt=!1,v1=!1;const vt=Qt.getUniforms(),we=C0.uniforms;if(U0.useProgram(Qt.program)&&(on=!0,kt=!0,v1=!0),H.id!==O&&(O=H.id,kt=!0),on||s0!==S){Z0.reverseDepthBuffer?(y0.copy(S.projectionMatrix),z2(y0),H2(y0),vt.setValue(C,"projectionMatrix",y0)):vt.setValue(C,"projectionMatrix",S.projectionMatrix),vt.setValue(C,"viewMatrix",S.matrixWorldInverse);const qt=vt.map.cameraPosition;qt!==void 0&&qt.setValue(C,R0.setFromMatrixPosition(S.matrixWorld)),Z0.logarithmicDepthBuffer&&vt.setValue(C,"logDepthBufFC",2/(Math.log(S.far+1)/Math.LN2)),(H.isMeshPhongMaterial||H.isMeshToonMaterial||H.isMeshLambertMaterial||H.isMeshBasicMaterial||H.isMeshStandardMaterial||H.isShaderMaterial)&&vt.setValue(C,"isOrthographic",S.isOrthographicCamera===!0),s0!==S&&(s0=S,kt=!0,v1=!0)}if(N.isSkinnedMesh){vt.setOptional(C,N,"bindMatrix"),vt.setOptional(C,N,"bindMatrixInverse");const qt=N.skeleton;qt&&(qt.boneTexture===null&&qt.computeBoneTexture(),vt.setValue(C,"boneTexture",qt.boneTexture,b))}N.isBatchedMesh&&(vt.setOptional(C,N,"batchingTexture"),vt.setValue(C,"batchingTexture",N._matricesTexture,b),vt.setOptional(C,N,"batchingIdTexture"),vt.setValue(C,"batchingIdTexture",N._indirectTexture,b),vt.setOptional(C,N,"batchingColorTexture"),N._colorsTexture!==null&&vt.setValue(C,"batchingColorTexture",N._colorsTexture,b));const x1=z.morphAttributes;if((x1.position!==void 0||x1.normal!==void 0||x1.color!==void 0)&&P0.update(N,z,Qt),(kt||C0.receiveShadow!==N.receiveShadow)&&(C0.receiveShadow=N.receiveShadow,vt.setValue(C,"receiveShadow",N.receiveShadow)),H.isMeshGouraudMaterial&&H.envMap!==null&&(we.envMap.value=A0,we.flipEnvMap.value=A0.isCubeTexture&&A0.isRenderTargetTexture===!1?-1:1),H.isMeshStandardMaterial&&H.envMap===null&&I.environment!==null&&(we.envMapIntensity.value=I.environmentIntensity),kt&&(vt.setValue(C,"toneMappingExposure",y.toneMappingExposure),C0.needsLights&&kn(we,v1),a0&&H.fog===!0&&u0.refreshFogUniforms(we,a0),u0.refreshMaterialUniforms(we,H,t0,q,u.state.transmissionRenderTarget[S.id]),e1.upload(C,St(C0),we,b)),H.isShaderMaterial&&H.uniformsNeedUpdate===!0&&(e1.upload(C,St(C0),we,b),H.uniformsNeedUpdate=!1),H.isSpriteMaterial&&vt.setValue(C,"center",N.center),vt.setValue(C,"modelViewMatrix",N.modelViewMatrix),vt.setValue(C,"normalMatrix",N.normalMatrix),vt.setValue(C,"modelMatrix",N.matrixWorld),H.isShaderMaterial||H.isRawShaderMaterial){const qt=H.uniformsGroups;for(let S1=0,L8=qt.length;S1<L8;S1++){const vr=qt[S1];L.update(vr,Qt),L.bind(vr,Qt)}}return Qt}function kn(S,I){S.ambientLightColor.needsUpdate=I,S.lightProbe.needsUpdate=I,S.directionalLights.needsUpdate=I,S.directionalLightShadows.needsUpdate=I,S.pointLights.needsUpdate=I,S.pointLightShadows.needsUpdate=I,S.spotLights.needsUpdate=I,S.spotLightShadows.needsUpdate=I,S.rectAreaLights.needsUpdate=I,S.hemisphereLights.needsUpdate=I}function Wn(S){return S.isMeshLambertMaterial||S.isMeshToonMaterial||S.isMeshPhongMaterial||S.isMeshStandardMaterial||S.isShadowMaterial||S.isShaderMaterial&&S.lights===!0}this.getActiveCubeFace=function(){return G},this.getActiveMipmapLevel=function(){return D},this.getRenderTarget=function(){return w},this.setRenderTargetTextures=function(S,I,z){I0.get(S.texture).__webglTexture=I,I0.get(S.depthTexture).__webglTexture=z;const H=I0.get(S);H.__hasExternalTextures=!0,H.__autoAllocateDepthBuffer=z===void 0,H.__autoAllocateDepthBuffer||G0.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),H.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(S,I){const z=I0.get(S);z.__webglFramebuffer=I,z.__useDefaultFramebuffer=I===void 0},this.setRenderTarget=function(S,I=0,z=0){w=S,G=I,D=z;let H=!0,N=null,a0=!1,v0=!1;if(S){const A0=I0.get(S);if(A0.__useDefaultFramebuffer!==void 0)U0.bindFramebuffer(C.FRAMEBUFFER,null),H=!1;else if(A0.__webglFramebuffer===void 0)b.setupRenderTarget(S);else if(A0.__hasExternalTextures)b.rebindTextures(S,I0.get(S.texture).__webglTexture,I0.get(S.depthTexture).__webglTexture);else if(S.depthBuffer){const T0=S.depthTexture;if(A0.__boundDepthTexture!==T0){if(T0!==null&&I0.has(T0)&&(S.width!==T0.image.width||S.height!==T0.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");b.setupDepthRenderbuffer(S)}}const N0=S.texture;(N0.isData3DTexture||N0.isDataArrayTexture||N0.isCompressedArrayTexture)&&(v0=!0);const O0=I0.get(S).__webglFramebuffer;S.isWebGLCubeRenderTarget?(Array.isArray(O0[I])?N=O0[I][z]:N=O0[I],a0=!0):S.samples>0&&b.useMultisampledRTT(S)===!1?N=I0.get(S).__webglMultisampledFramebuffer:Array.isArray(O0)?N=O0[z]:N=O0,_.copy(S.viewport),M.copy(S.scissor),j=S.scissorTest}else _.copy(d0).multiplyScalar(t0).floor(),M.copy(l0).multiplyScalar(t0).floor(),j=k0;if(U0.bindFramebuffer(C.FRAMEBUFFER,N)&&H&&U0.drawBuffers(S,N),U0.viewport(_),U0.scissor(M),U0.setScissorTest(j),a0){const A0=I0.get(S.texture);C.framebufferTexture2D(C.FRAMEBUFFER,C.COLOR_ATTACHMENT0,C.TEXTURE_CUBE_MAP_POSITIVE_X+I,A0.__webglTexture,z)}else if(v0){const A0=I0.get(S.texture),N0=I||0;C.framebufferTextureLayer(C.FRAMEBUFFER,C.COLOR_ATTACHMENT0,A0.__webglTexture,z||0,N0)}O=-1},this.readRenderTargetPixels=function(S,I,z,H,N,a0,v0){if(!(S&&S.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let E0=I0.get(S).__webglFramebuffer;if(S.isWebGLCubeRenderTarget&&v0!==void 0&&(E0=E0[v0]),E0){U0.bindFramebuffer(C.FRAMEBUFFER,E0);try{const A0=S.texture,N0=A0.format,O0=A0.type;if(!Z0.textureFormatReadable(N0)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!Z0.textureTypeReadable(O0)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}I>=0&&I<=S.width-H&&z>=0&&z<=S.height-N&&C.readPixels(I,z,H,N,B0.convert(N0),B0.convert(O0),a0)}finally{const A0=w!==null?I0.get(w).__webglFramebuffer:null;U0.bindFramebuffer(C.FRAMEBUFFER,A0)}}},this.readRenderTargetPixelsAsync=async function(S,I,z,H,N,a0,v0){if(!(S&&S.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let E0=I0.get(S).__webglFramebuffer;if(S.isWebGLCubeRenderTarget&&v0!==void 0&&(E0=E0[v0]),E0){const A0=S.texture,N0=A0.format,O0=A0.type;if(!Z0.textureFormatReadable(N0))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!Z0.textureTypeReadable(O0))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(I>=0&&I<=S.width-H&&z>=0&&z<=S.height-N){U0.bindFramebuffer(C.FRAMEBUFFER,E0);const T0=C.createBuffer();C.bindBuffer(C.PIXEL_PACK_BUFFER,T0),C.bufferData(C.PIXEL_PACK_BUFFER,a0.byteLength,C.STREAM_READ),C.readPixels(I,z,H,N,B0.convert(N0),B0.convert(O0),0);const st=w!==null?I0.get(w).__webglFramebuffer:null;U0.bindFramebuffer(C.FRAMEBUFFER,st);const dt=C.fenceSync(C.SYNC_GPU_COMMANDS_COMPLETE,0);return C.flush(),await B2(C,dt,4),C.bindBuffer(C.PIXEL_PACK_BUFFER,T0),C.getBufferSubData(C.PIXEL_PACK_BUFFER,0,a0),C.deleteBuffer(T0),C.deleteSync(dt),a0}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(S,I=null,z=0){S.isTexture!==!0&&(t1("WebGLRenderer: copyFramebufferToTexture function signature has changed."),I=arguments[0]||null,S=arguments[1]);const H=Math.pow(2,-z),N=Math.floor(S.image.width*H),a0=Math.floor(S.image.height*H),v0=I!==null?I.x:0,E0=I!==null?I.y:0;b.setTexture2D(S,0),C.copyTexSubImage2D(C.TEXTURE_2D,z,0,0,v0,E0,N,a0),U0.unbindTexture()},this.copyTextureToTexture=function(S,I,z=null,H=null,N=0){S.isTexture!==!0&&(t1("WebGLRenderer: copyTextureToTexture function signature has changed."),H=arguments[0]||null,S=arguments[1],I=arguments[2],N=arguments[3]||0,z=null);let a0,v0,E0,A0,N0,O0;z!==null?(a0=z.max.x-z.min.x,v0=z.max.y-z.min.y,E0=z.min.x,A0=z.min.y):(a0=S.image.width,v0=S.image.height,E0=0,A0=0),H!==null?(N0=H.x,O0=H.y):(N0=0,O0=0);const T0=B0.convert(I.format),st=B0.convert(I.type);b.setTexture2D(I,0),C.pixelStorei(C.UNPACK_FLIP_Y_WEBGL,I.flipY),C.pixelStorei(C.UNPACK_PREMULTIPLY_ALPHA_WEBGL,I.premultiplyAlpha),C.pixelStorei(C.UNPACK_ALIGNMENT,I.unpackAlignment);const dt=C.getParameter(C.UNPACK_ROW_LENGTH),_t=C.getParameter(C.UNPACK_IMAGE_HEIGHT),Vt=C.getParameter(C.UNPACK_SKIP_PIXELS),nt=C.getParameter(C.UNPACK_SKIP_ROWS),C0=C.getParameter(C.UNPACK_SKIP_IMAGES),wt=S.isCompressedTexture?S.mipmaps[N]:S.image;C.pixelStorei(C.UNPACK_ROW_LENGTH,wt.width),C.pixelStorei(C.UNPACK_IMAGE_HEIGHT,wt.height),C.pixelStorei(C.UNPACK_SKIP_PIXELS,E0),C.pixelStorei(C.UNPACK_SKIP_ROWS,A0),S.isDataTexture?C.texSubImage2D(C.TEXTURE_2D,N,N0,O0,a0,v0,T0,st,wt.data):S.isCompressedTexture?C.compressedTexSubImage2D(C.TEXTURE_2D,N,N0,O0,wt.width,wt.height,T0,wt.data):C.texSubImage2D(C.TEXTURE_2D,N,N0,O0,a0,v0,T0,st,wt),C.pixelStorei(C.UNPACK_ROW_LENGTH,dt),C.pixelStorei(C.UNPACK_IMAGE_HEIGHT,_t),C.pixelStorei(C.UNPACK_SKIP_PIXELS,Vt),C.pixelStorei(C.UNPACK_SKIP_ROWS,nt),C.pixelStorei(C.UNPACK_SKIP_IMAGES,C0),N===0&&I.generateMipmaps&&C.generateMipmap(C.TEXTURE_2D),U0.unbindTexture()},this.copyTextureToTexture3D=function(S,I,z=null,H=null,N=0){S.isTexture!==!0&&(t1("WebGLRenderer: copyTextureToTexture3D function signature has changed."),z=arguments[0]||null,H=arguments[1]||null,S=arguments[2],I=arguments[3],N=arguments[4]||0);let a0,v0,E0,A0,N0,O0,T0,st,dt;const _t=S.isCompressedTexture?S.mipmaps[N]:S.image;z!==null?(a0=z.max.x-z.min.x,v0=z.max.y-z.min.y,E0=z.max.z-z.min.z,A0=z.min.x,N0=z.min.y,O0=z.min.z):(a0=_t.width,v0=_t.height,E0=_t.depth,A0=0,N0=0,O0=0),H!==null?(T0=H.x,st=H.y,dt=H.z):(T0=0,st=0,dt=0);const Vt=B0.convert(I.format),nt=B0.convert(I.type);let C0;if(I.isData3DTexture)b.setTexture3D(I,0),C0=C.TEXTURE_3D;else if(I.isDataArrayTexture||I.isCompressedArrayTexture)b.setTexture2DArray(I,0),C0=C.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}C.pixelStorei(C.UNPACK_FLIP_Y_WEBGL,I.flipY),C.pixelStorei(C.UNPACK_PREMULTIPLY_ALPHA_WEBGL,I.premultiplyAlpha),C.pixelStorei(C.UNPACK_ALIGNMENT,I.unpackAlignment);const wt=C.getParameter(C.UNPACK_ROW_LENGTH),it=C.getParameter(C.UNPACK_IMAGE_HEIGHT),Qt=C.getParameter(C.UNPACK_SKIP_PIXELS),on=C.getParameter(C.UNPACK_SKIP_ROWS),kt=C.getParameter(C.UNPACK_SKIP_IMAGES);C.pixelStorei(C.UNPACK_ROW_LENGTH,_t.width),C.pixelStorei(C.UNPACK_IMAGE_HEIGHT,_t.height),C.pixelStorei(C.UNPACK_SKIP_PIXELS,A0),C.pixelStorei(C.UNPACK_SKIP_ROWS,N0),C.pixelStorei(C.UNPACK_SKIP_IMAGES,O0),S.isDataTexture||S.isData3DTexture?C.texSubImage3D(C0,N,T0,st,dt,a0,v0,E0,Vt,nt,_t.data):I.isCompressedArrayTexture?C.compressedTexSubImage3D(C0,N,T0,st,dt,a0,v0,E0,Vt,_t.data):C.texSubImage3D(C0,N,T0,st,dt,a0,v0,E0,Vt,nt,_t),C.pixelStorei(C.UNPACK_ROW_LENGTH,wt),C.pixelStorei(C.UNPACK_IMAGE_HEIGHT,it),C.pixelStorei(C.UNPACK_SKIP_PIXELS,Qt),C.pixelStorei(C.UNPACK_SKIP_ROWS,on),C.pixelStorei(C.UNPACK_SKIP_IMAGES,kt),N===0&&I.generateMipmaps&&C.generateMipmap(C0),U0.unbindTexture()},this.initRenderTarget=function(S){I0.get(S).__webglFramebuffer===void 0&&b.setupRenderTarget(S)},this.initTexture=function(S){S.isCubeTexture?b.setTextureCube(S,0):S.isData3DTexture?b.setTexture3D(S,0):S.isDataArrayTexture||S.isCompressedArrayTexture?b.setTexture2DArray(S,0):b.setTexture2D(S,0),U0.unbindTexture()},this.resetState=function(){G=0,D=0,w=null,U0.reset(),ot.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Ee}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorSpace=t===cr?"display-p3":"srgb",e.unpackColorSpace=rt.workingColorSpace===m1?"display-p3":"srgb"}}class ds extends At{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new me,this.environmentIntensity=1,this.environmentRotation=new me,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}}class g8{constructor(t,e){this.isInterleavedBuffer=!0,this.array=t,this.stride=e,this.count=t!==void 0?t.length/e:0,this.usage=K9,this.updateRanges=[],this.version=0,this.uuid=be()}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,i){t*=this.stride,i*=e.stride;for(let r=0,s=this.stride;r<s;r++)this.array[t+r]=e.array[i+r];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=be()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),i=new this.constructor(e,this.stride);return i.setUsage(this.usage),i}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=be()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const Nt=new U;class pe{constructor(t,e,i,r=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=e,this.offset=i,this.normalized=r}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,i=this.data.count;e<i;e++)Nt.fromBufferAttribute(this,e),Nt.applyMatrix4(t),this.setXYZ(e,Nt.x,Nt.y,Nt.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)Nt.fromBufferAttribute(this,e),Nt.applyNormalMatrix(t),this.setXYZ(e,Nt.x,Nt.y,Nt.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)Nt.fromBufferAttribute(this,e),Nt.transformDirection(t),this.setXYZ(e,Nt.x,Nt.y,Nt.z);return this}getComponent(t,e){let i=this.array[t*this.data.stride+this.offset+e];return this.normalized&&(i=se(i,this.array)),i}setComponent(t,e,i){return this.normalized&&(i=at(i,this.array)),this.data.array[t*this.data.stride+this.offset+e]=i,this}setX(t,e){return this.normalized&&(e=at(e,this.array)),this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.normalized&&(e=at(e,this.array)),this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.normalized&&(e=at(e,this.array)),this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.normalized&&(e=at(e,this.array)),this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(e=se(e,this.array)),e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(e=se(e,this.array)),e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(e=se(e,this.array)),e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(e=se(e,this.array)),e}setXY(t,e,i){return t=t*this.data.stride+this.offset,this.normalized&&(e=at(e,this.array),i=at(i,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this}setXYZ(t,e,i,r){return t=t*this.data.stride+this.offset,this.normalized&&(e=at(e,this.array),i=at(i,this.array),r=at(r,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=r,this}setXYZW(t,e,i,r,s){return t=t*this.data.stride+this.offset,this.normalized&&(e=at(e,this.array),i=at(i,this.array),r=at(r,this.array),s=at(s,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=r,this.data.array[t+3]=s,this}clone(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let i=0;i<this.count;i++){const r=i*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[r+s])}return new $t(new this.array.constructor(e),this.itemSize,this.normalized)}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new pe(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let i=0;i<this.count;i++){const r=i*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[r+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:e,normalized:this.normalized}}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class v8 extends an{constructor(t){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new j0(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}let yn;const Kn=new U,En=new U,bn=new U,An=new F0,$n=new F0,x8=new mt,Di=new U,Jn=new U,Ui=new U,ps=new F0,$1=new F0,ms=new F0;class $7 extends At{constructor(t=new v8){if(super(),this.isSprite=!0,this.type="Sprite",yn===void 0){yn=new Jt;const e=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),i=new g8(e,5);yn.setIndex([0,1,2,0,2,3]),yn.setAttribute("position",new pe(i,3,0,!1)),yn.setAttribute("uv",new pe(i,2,3,!1))}this.geometry=yn,this.material=t,this.center=new F0(.5,.5)}raycast(t,e){t.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),En.setFromMatrixScale(this.matrixWorld),x8.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),bn.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&En.multiplyScalar(-bn.z);const i=this.material.rotation;let r,s;i!==0&&(s=Math.cos(i),r=Math.sin(i));const a=this.center;Ii(Di.set(-.5,-.5,0),bn,a,En,r,s),Ii(Jn.set(.5,-.5,0),bn,a,En,r,s),Ii(Ui.set(.5,.5,0),bn,a,En,r,s),ps.set(0,0),$1.set(1,0),ms.set(1,1);let o=t.ray.intersectTriangle(Di,Jn,Ui,!1,Kn);if(o===null&&(Ii(Jn.set(-.5,.5,0),bn,a,En,r,s),$1.set(0,1),o=t.ray.intersectTriangle(Di,Ui,Jn,!1,Kn),o===null))return;const l=t.ray.origin.distanceTo(Kn);l<t.near||l>t.far||e.push({distance:l,point:Kn.clone(),uv:Zt.getInterpolation(Kn,Di,Jn,Ui,ps,$1,ms,new F0),face:null,object:this})}copy(t,e){return super.copy(t,e),t.center!==void 0&&this.center.copy(t.center),this.material=t.material,this}}function Ii(n,t,e,i,r,s){An.subVectors(n,e).addScalar(.5).multiply(i),r!==void 0?($n.x=s*An.x-r*An.y,$n.y=r*An.x+s*An.y):$n.copy(An),n.copy(t),n.x+=$n.x,n.y+=$n.y,n.applyMatrix4(x8)}class S8 extends an{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new j0(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}const u1=new U,h1=new U,_s=new mt,Qn=new n8,Ni=new Gn,J1=new U,gs=new U;class J7 extends At{constructor(t=new Jt,e=new S8){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.index===null){const e=t.attributes.position,i=[0];for(let r=1,s=e.count;r<s;r++)u1.fromBufferAttribute(e,r-1),h1.fromBufferAttribute(e,r),i[r]=i[r-1],i[r]+=u1.distanceTo(h1);t.setAttribute("lineDistance",new Gt(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,e){const i=this.geometry,r=this.matrixWorld,s=t.params.Line.threshold,a=i.drawRange;if(i.boundingSphere===null&&i.computeBoundingSphere(),Ni.copy(i.boundingSphere),Ni.applyMatrix4(r),Ni.radius+=s,t.ray.intersectsSphere(Ni)===!1)return;_s.copy(r).invert(),Qn.copy(t.ray).applyMatrix4(_s);const o=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=o*o,c=this.isLineSegments?2:1,h=i.index,f=i.attributes.position;if(h!==null){const m=Math.max(0,a.start),g=Math.min(h.count,a.start+a.count);for(let x=m,u=g-1;x<u;x+=c){const d=h.getX(x),A=h.getX(x+1),y=Fi(this,t,Qn,l,d,A);y&&e.push(y)}if(this.isLineLoop){const x=h.getX(g-1),u=h.getX(m),d=Fi(this,t,Qn,l,x,u);d&&e.push(d)}}else{const m=Math.max(0,a.start),g=Math.min(f.count,a.start+a.count);for(let x=m,u=g-1;x<u;x+=c){const d=Fi(this,t,Qn,l,x,x+1);d&&e.push(d)}if(this.isLineLoop){const x=Fi(this,t,Qn,l,g-1,m);x&&e.push(x)}}}updateMorphTargets(){const e=this.geometry.morphAttributes,i=Object.keys(e);if(i.length>0){const r=e[i[0]];if(r!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,a=r.length;s<a;s++){const o=r[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}}function Fi(n,t,e,i,r,s){const a=n.geometry.attributes.position;if(u1.fromBufferAttribute(a,r),h1.fromBufferAttribute(a,s),e.distanceSqToSegment(u1,h1,J1,gs)>i)return;J1.applyMatrix4(n.matrixWorld);const l=t.ray.origin.distanceTo(J1);if(!(l<t.near||l>t.far))return{distance:l,point:gs.clone().applyMatrix4(n.matrixWorld),index:r,face:null,faceIndex:null,barycoord:null,object:n}}const vs=new U,xs=new U;class Q7 extends J7{constructor(t,e){super(t,e),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(t.index===null){const e=t.attributes.position,i=[];for(let r=0,s=e.count;r<s;r+=2)vs.fromBufferAttribute(e,r),xs.fromBufferAttribute(e,r+1),i[r]=r===0?0:i[r-1],i[r+1]=i[r]+vs.distanceTo(xs);t.setAttribute("lineDistance",new Gt(i,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class t6 extends Bt{constructor(t,e,i,r,s,a,o,l,c){super(t,e,i,r,s,a,o,l,c),this.isCanvasTexture=!0,this.needsUpdate=!0}}class e6 extends Jt{constructor(t=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:t},t!==null){const e=[],i=new Set,r=new U,s=new U;if(t.index!==null){const a=t.attributes.position,o=t.index;let l=t.groups;l.length===0&&(l=[{start:0,count:o.count,materialIndex:0}]);for(let c=0,h=l.length;c<h;++c){const p=l[c],f=p.start,m=p.count;for(let g=f,x=f+m;g<x;g+=3)for(let u=0;u<3;u++){const d=o.getX(g+u),A=o.getX(g+(u+1)%3);r.fromBufferAttribute(a,d),s.fromBufferAttribute(a,A),Ss(r,s,i)===!0&&(e.push(r.x,r.y,r.z),e.push(s.x,s.y,s.z))}}}else{const a=t.attributes.position;for(let o=0,l=a.count/3;o<l;o++)for(let c=0;c<3;c++){const h=3*o+c,p=3*o+(c+1)%3;r.fromBufferAttribute(a,h),s.fromBufferAttribute(a,p),Ss(r,s,i)===!0&&(e.push(r.x,r.y,r.z),e.push(s.x,s.y,s.z))}}this.setAttribute("position",new Gt(e,3))}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}}function Ss(n,t,e){const i=`${n.x},${n.y},${n.z}-${t.x},${t.y},${t.z}`,r=`${t.x},${t.y},${t.z}-${n.x},${n.y},${n.z}`;return e.has(i)===!0||e.has(r)===!0?!1:(e.add(i),e.add(r),!0)}class n6 extends an{constructor(t){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new j0(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new j0(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=$s,this.normalScale=new F0(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new me,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.envMapIntensity=t.envMapIntensity,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class M8 extends At{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new j0(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,this.groundColor!==void 0&&(e.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(e.object.distance=this.distance),this.angle!==void 0&&(e.object.angle=this.angle),this.decay!==void 0&&(e.object.decay=this.decay),this.penumbra!==void 0&&(e.object.penumbra=this.penumbra),this.shadow!==void 0&&(e.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(e.object.target=this.target.uuid),e}}const Q1=new mt,Ms=new U,ys=new U;class i6{constructor(t){this.camera=t,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new F0(512,512),this.map=null,this.mapPass=null,this.matrix=new mt,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new fr,this._frameExtents=new F0(1,1),this._viewportCount=1,this._viewports=[new ut(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,i=this.matrix;Ms.setFromMatrixPosition(t.matrixWorld),e.position.copy(Ms),ys.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(ys),e.updateMatrixWorld(),Q1.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Q1),i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(Q1)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.intensity=t.intensity,this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const t={};return this.intensity!==1&&(t.intensity=this.intensity),this.bias!==0&&(t.bias=this.bias),this.normalBias!==0&&(t.normalBias=this.normalBias),this.radius!==1&&(t.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class r6 extends i6{constructor(){super(new dr(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class s6 extends M8{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(At.DEFAULT_UP),this.updateMatrix(),this.target=new At,this.shadow=new r6}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}class a6 extends M8{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}}class o6 extends Jt{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}toJSON(){const t=super.toJSON();return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}class Q9 extends g8{constructor(t,e,i=1){super(t,e),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}const Es=new U,Oi=new U;class l6{constructor(t=new U,e=new U){this.start=t,this.end=e}set(t,e){return this.start.copy(t),this.end.copy(e),this}copy(t){return this.start.copy(t.start),this.end.copy(t.end),this}getCenter(t){return t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,e){return this.delta(e).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e){Es.subVectors(t,this.start),Oi.subVectors(this.end,this.start);const i=Oi.dot(Oi);let s=Oi.dot(Es)/i;return e&&(s=It(s,0,1)),s}closestPointToPoint(t,e,i){const r=this.closestPointToPointParameter(t,e);return this.delta(i).multiplyScalar(r).add(this.start)}applyMatrix4(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}class t9 extends Q7{constructor(t=10,e=10,i=4473924,r=8947848){i=new j0(i),r=new j0(r);const s=e/2,a=t/e,o=t/2,l=[],c=[];for(let f=0,m=0,g=-o;f<=e;f++,g+=a){l.push(-o,0,g,o,0,g),l.push(g,0,-o,g,0,o);const x=f===s?i:r;x.toArray(c,m),m+=3,x.toArray(c,m),m+=3,x.toArray(c,m),m+=3,x.toArray(c,m),m+=3}const h=new Jt;h.setAttribute("position",new Gt(l,3)),h.setAttribute("color",new Gt(c,3));const p=new S8({vertexColors:!0,toneMapped:!1});super(h,p),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}class c6 extends sn{constructor(t,e=null){super(),this.object=t,this.domElement=e,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:nr}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=nr);const e9={type:"change"},mr={type:"start"},_r={type:"end"},bs=1e-6,Q0={NONE:-1,ROTATE:0,ZOOM:1,PAN:2,TOUCH_ROTATE:3,TOUCH_ZOOM_PAN:4},Bi=new F0,Ie=new F0,u6=new U,zi=new U,n9=new U,Tn=new Hn,As=new U,Hi=new U,i9=new U,Gi=new U;class h6 extends c6{constructor(t,e=null){super(t,e),this.enabled=!0,this.screen={left:0,top:0,width:0,height:0},this.rotateSpeed=1,this.zoomSpeed=1.2,this.panSpeed=.3,this.noRotate=!1,this.noZoom=!1,this.noPan=!1,this.staticMoving=!1,this.dynamicDampingFactor=.2,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.keys=["KeyA","KeyS","KeyD"],this.mouseButtons={LEFT:Pn.ROTATE,MIDDLE:Pn.DOLLY,RIGHT:Pn.PAN},this.state=Q0.NONE,this.keyState=Q0.NONE,this.target=new U,this._lastPosition=new U,this._lastZoom=1,this._touchZoomDistanceStart=0,this._touchZoomDistanceEnd=0,this._lastAngle=0,this._eye=new U,this._movePrev=new F0,this._moveCurr=new F0,this._lastAxis=new U,this._zoomStart=new F0,this._zoomEnd=new F0,this._panStart=new F0,this._panEnd=new F0,this._pointers=[],this._pointerPositions={},this._onPointerMove=d6.bind(this),this._onPointerDown=f6.bind(this),this._onPointerUp=p6.bind(this),this._onPointerCancel=m6.bind(this),this._onContextMenu=y6.bind(this),this._onMouseWheel=M6.bind(this),this._onKeyDown=g6.bind(this),this._onKeyUp=_6.bind(this),this._onTouchStart=E6.bind(this),this._onTouchMove=b6.bind(this),this._onTouchEnd=A6.bind(this),this._onMouseDown=v6.bind(this),this._onMouseMove=x6.bind(this),this._onMouseUp=S6.bind(this),this._target0=this.target.clone(),this._position0=this.object.position.clone(),this._up0=this.object.up.clone(),this._zoom0=this.object.zoom,e!==null&&(this.connect(),this.handleResize()),this.update()}connect(){window.addEventListener("keydown",this._onKeyDown),window.addEventListener("keyup",this._onKeyUp),this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerCancel),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.style.touchAction="none"}disconnect(){window.removeEventListener("keydown",this._onKeyDown),window.removeEventListener("keyup",this._onKeyUp),this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerCancel),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}handleResize(){const t=this.domElement.getBoundingClientRect(),e=this.domElement.ownerDocument.documentElement;this.screen.left=t.left+window.pageXOffset-e.clientLeft,this.screen.top=t.top+window.pageYOffset-e.clientTop,this.screen.width=t.width,this.screen.height=t.height}update(){this._eye.subVectors(this.object.position,this.target),this.noRotate||this._rotateCamera(),this.noZoom||this._zoomCamera(),this.noPan||this._panCamera(),this.object.position.addVectors(this.target,this._eye),this.object.isPerspectiveCamera?(this._checkDistances(),this.object.lookAt(this.target),this._lastPosition.distanceToSquared(this.object.position)>bs&&(this.dispatchEvent(e9),this._lastPosition.copy(this.object.position))):this.object.isOrthographicCamera?(this.object.lookAt(this.target),(this._lastPosition.distanceToSquared(this.object.position)>bs||this._lastZoom!==this.object.zoom)&&(this.dispatchEvent(e9),this._lastPosition.copy(this.object.position),this._lastZoom=this.object.zoom)):console.warn("THREE.TrackballControls: Unsupported camera type.")}reset(){this.state=Q0.NONE,this.keyState=Q0.NONE,this.target.copy(this._target0),this.object.position.copy(this._position0),this.object.up.copy(this._up0),this.object.zoom=this._zoom0,this.object.updateProjectionMatrix(),this._eye.subVectors(this.object.position,this.target),this.object.lookAt(this.target),this.dispatchEvent(e9),this._lastPosition.copy(this.object.position),this._lastZoom=this.object.zoom}_panCamera(){if(Ie.copy(this._panEnd).sub(this._panStart),Ie.lengthSq()){if(this.object.isOrthographicCamera){const t=(this.object.right-this.object.left)/this.object.zoom/this.domElement.clientWidth,e=(this.object.top-this.object.bottom)/this.object.zoom/this.domElement.clientWidth;Ie.x*=t,Ie.y*=e}Ie.multiplyScalar(this._eye.length()*this.panSpeed),zi.copy(this._eye).cross(this.object.up).setLength(Ie.x),zi.add(u6.copy(this.object.up).setLength(Ie.y)),this.object.position.add(zi),this.target.add(zi),this.staticMoving?this._panStart.copy(this._panEnd):this._panStart.add(Ie.subVectors(this._panEnd,this._panStart).multiplyScalar(this.dynamicDampingFactor))}}_rotateCamera(){Gi.set(this._moveCurr.x-this._movePrev.x,this._moveCurr.y-this._movePrev.y,0);let t=Gi.length();t?(this._eye.copy(this.object.position).sub(this.target),As.copy(this._eye).normalize(),Hi.copy(this.object.up).normalize(),i9.crossVectors(Hi,As).normalize(),Hi.setLength(this._moveCurr.y-this._movePrev.y),i9.setLength(this._moveCurr.x-this._movePrev.x),Gi.copy(Hi.add(i9)),n9.crossVectors(Gi,this._eye).normalize(),t*=this.rotateSpeed,Tn.setFromAxisAngle(n9,t),this._eye.applyQuaternion(Tn),this.object.up.applyQuaternion(Tn),this._lastAxis.copy(n9),this._lastAngle=t):!this.staticMoving&&this._lastAngle&&(this._lastAngle*=Math.sqrt(1-this.dynamicDampingFactor),this._eye.copy(this.object.position).sub(this.target),Tn.setFromAxisAngle(this._lastAxis,this._lastAngle),this._eye.applyQuaternion(Tn),this.object.up.applyQuaternion(Tn)),this._movePrev.copy(this._moveCurr)}_zoomCamera(){let t;this.state===Q0.TOUCH_ZOOM_PAN?(t=this._touchZoomDistanceStart/this._touchZoomDistanceEnd,this._touchZoomDistanceStart=this._touchZoomDistanceEnd,this.object.isPerspectiveCamera?this._eye.multiplyScalar(t):this.object.isOrthographicCamera?(this.object.zoom=$9.clamp(this.object.zoom/t,this.minZoom,this.maxZoom),this._lastZoom!==this.object.zoom&&this.object.updateProjectionMatrix()):console.warn("THREE.TrackballControls: Unsupported camera type")):(t=1+(this._zoomEnd.y-this._zoomStart.y)*this.zoomSpeed,t!==1&&t>0&&(this.object.isPerspectiveCamera?this._eye.multiplyScalar(t):this.object.isOrthographicCamera?(this.object.zoom=$9.clamp(this.object.zoom/t,this.minZoom,this.maxZoom),this._lastZoom!==this.object.zoom&&this.object.updateProjectionMatrix()):console.warn("THREE.TrackballControls: Unsupported camera type")),this.staticMoving?this._zoomStart.copy(this._zoomEnd):this._zoomStart.y+=(this._zoomEnd.y-this._zoomStart.y)*this.dynamicDampingFactor)}_getMouseOnScreen(t,e){return Bi.set((t-this.screen.left)/this.screen.width,(e-this.screen.top)/this.screen.height),Bi}_getMouseOnCircle(t,e){return Bi.set((t-this.screen.width*.5-this.screen.left)/(this.screen.width*.5),(this.screen.height+2*(this.screen.top-e))/this.screen.width),Bi}_addPointer(t){this._pointers.push(t)}_removePointer(t){delete this._pointerPositions[t.pointerId];for(let e=0;e<this._pointers.length;e++)if(this._pointers[e].pointerId==t.pointerId){this._pointers.splice(e,1);return}}_trackPointer(t){let e=this._pointerPositions[t.pointerId];e===void 0&&(e=new F0,this._pointerPositions[t.pointerId]=e),e.set(t.pageX,t.pageY)}_getSecondPointerPosition(t){const e=t.pointerId===this._pointers[0].pointerId?this._pointers[1]:this._pointers[0];return this._pointerPositions[e.pointerId]}_checkDistances(){(!this.noZoom||!this.noPan)&&(this._eye.lengthSq()>this.maxDistance*this.maxDistance&&(this.object.position.addVectors(this.target,this._eye.setLength(this.maxDistance)),this._zoomStart.copy(this._zoomEnd)),this._eye.lengthSq()<this.minDistance*this.minDistance&&(this.object.position.addVectors(this.target,this._eye.setLength(this.minDistance)),this._zoomStart.copy(this._zoomEnd)))}}function f6(n){this.enabled!==!1&&(this._pointers.length===0&&(this.domElement.setPointerCapture(n.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),this._addPointer(n),n.pointerType==="touch"?this._onTouchStart(n):this._onMouseDown(n))}function d6(n){this.enabled!==!1&&(n.pointerType==="touch"?this._onTouchMove(n):this._onMouseMove(n))}function p6(n){this.enabled!==!1&&(n.pointerType==="touch"?this._onTouchEnd(n):this._onMouseUp(),this._removePointer(n),this._pointers.length===0&&(this.domElement.releasePointerCapture(n.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp)))}function m6(n){this._removePointer(n)}function _6(){this.enabled!==!1&&(this.keyState=Q0.NONE,window.addEventListener("keydown",this._onKeyDown))}function g6(n){this.enabled!==!1&&(window.removeEventListener("keydown",this._onKeyDown),this.keyState===Q0.NONE&&(n.code===this.keys[Q0.ROTATE]&&!this.noRotate?this.keyState=Q0.ROTATE:n.code===this.keys[Q0.ZOOM]&&!this.noZoom?this.keyState=Q0.ZOOM:n.code===this.keys[Q0.PAN]&&!this.noPan&&(this.keyState=Q0.PAN)))}function v6(n){let t;switch(n.button){case 0:t=this.mouseButtons.LEFT;break;case 1:t=this.mouseButtons.MIDDLE;break;case 2:t=this.mouseButtons.RIGHT;break;default:t=-1}switch(t){case Pn.DOLLY:this.state=Q0.ZOOM;break;case Pn.ROTATE:this.state=Q0.ROTATE;break;case Pn.PAN:this.state=Q0.PAN;break;default:this.state=Q0.NONE}const e=this.keyState!==Q0.NONE?this.keyState:this.state;e===Q0.ROTATE&&!this.noRotate?(this._moveCurr.copy(this._getMouseOnCircle(n.pageX,n.pageY)),this._movePrev.copy(this._moveCurr)):e===Q0.ZOOM&&!this.noZoom?(this._zoomStart.copy(this._getMouseOnScreen(n.pageX,n.pageY)),this._zoomEnd.copy(this._zoomStart)):e===Q0.PAN&&!this.noPan&&(this._panStart.copy(this._getMouseOnScreen(n.pageX,n.pageY)),this._panEnd.copy(this._panStart)),this.dispatchEvent(mr)}function x6(n){const t=this.keyState!==Q0.NONE?this.keyState:this.state;t===Q0.ROTATE&&!this.noRotate?(this._movePrev.copy(this._moveCurr),this._moveCurr.copy(this._getMouseOnCircle(n.pageX,n.pageY))):t===Q0.ZOOM&&!this.noZoom?this._zoomEnd.copy(this._getMouseOnScreen(n.pageX,n.pageY)):t===Q0.PAN&&!this.noPan&&this._panEnd.copy(this._getMouseOnScreen(n.pageX,n.pageY))}function S6(){this.state=Q0.NONE,this.dispatchEvent(_r)}function M6(n){if(this.enabled!==!1&&this.noZoom!==!0){switch(n.preventDefault(),n.deltaMode){case 2:this._zoomStart.y-=n.deltaY*.025;break;case 1:this._zoomStart.y-=n.deltaY*.01;break;default:this._zoomStart.y-=n.deltaY*25e-5;break}this.dispatchEvent(mr),this.dispatchEvent(_r)}}function y6(n){this.enabled!==!1&&n.preventDefault()}function E6(n){switch(this._trackPointer(n),this._pointers.length){case 1:this.state=Q0.TOUCH_ROTATE,this._moveCurr.copy(this._getMouseOnCircle(this._pointers[0].pageX,this._pointers[0].pageY)),this._movePrev.copy(this._moveCurr);break;default:this.state=Q0.TOUCH_ZOOM_PAN;const t=this._pointers[0].pageX-this._pointers[1].pageX,e=this._pointers[0].pageY-this._pointers[1].pageY;this._touchZoomDistanceEnd=this._touchZoomDistanceStart=Math.sqrt(t*t+e*e);const i=(this._pointers[0].pageX+this._pointers[1].pageX)/2,r=(this._pointers[0].pageY+this._pointers[1].pageY)/2;this._panStart.copy(this._getMouseOnScreen(i,r)),this._panEnd.copy(this._panStart);break}this.dispatchEvent(mr)}function b6(n){switch(this._trackPointer(n),this._pointers.length){case 1:this._movePrev.copy(this._moveCurr),this._moveCurr.copy(this._getMouseOnCircle(n.pageX,n.pageY));break;default:const t=this._getSecondPointerPosition(n),e=n.pageX-t.x,i=n.pageY-t.y;this._touchZoomDistanceEnd=Math.sqrt(e*e+i*i);const r=(n.pageX+t.x)/2,s=(n.pageY+t.y)/2;this._panEnd.copy(this._getMouseOnScreen(r,s));break}}function A6(n){switch(this._pointers.length){case 0:this.state=Q0.NONE;break;case 1:this.state=Q0.TOUCH_ROTATE,this._moveCurr.copy(this._getMouseOnCircle(n.pageX,n.pageY)),this._movePrev.copy(this._moveCurr);break;case 2:this.state=Q0.TOUCH_ZOOM_PAN;for(let t=0;t<this._pointers.length;t++)if(this._pointers[t].pointerId!==n.pointerId){const e=this._pointerPositions[this._pointers[t].pointerId];this._moveCurr.copy(this._getMouseOnCircle(e.x,e.y)),this._movePrev.copy(this._moveCurr);break}break}this.dispatchEvent(_r)}function T6(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}function w6(n){for(var t=new Array(n),e=0;e<n;++e)t[e]=e;return t}var C6=w6;/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */var R6=function(n){return n!=null&&(y8(n)||P6(n)||!!n._isBuffer)};function y8(n){return!!n.constructor&&typeof n.constructor.isBuffer=="function"&&n.constructor.isBuffer(n)}function P6(n){return typeof n.readFloatLE=="function"&&typeof n.slice=="function"&&y8(n.slice(0,0))}var L6=C6,D6=R6,U6=typeof Float64Array<"u";function I6(n,t){return n[0]-t[0]}function N6(){var n=this.stride,t=new Array(n.length),e;for(e=0;e<t.length;++e)t[e]=[Math.abs(n[e]),e];t.sort(I6);var i=new Array(t.length);for(e=0;e<i.length;++e)i[e]=t[e][1];return i}function F6(n,t){var e=["View",t,"d",n].join("");t<0&&(e="View_Nil"+n);var i=n==="generic";if(t===-1){var r="function "+e+"(a){this.data=a;};var proto="+e+".prototype;proto.dtype='"+n+"';proto.index=function(){return -1};proto.size=0;proto.dimension=-1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function(){return new "+e+"(this.data);};proto.get=proto.set=function(){};proto.pick=function(){return null};return function construct_"+e+"(a){return new "+e+"(a);}",x=new Function(r);return x()}else if(t===0){var r="function "+e+"(a,d) {this.data = a;this.offset = d};var proto="+e+".prototype;proto.dtype='"+n+"';proto.index=function(){return this.offset};proto.dimension=0;proto.size=1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function "+e+"_copy() {return new "+e+"(this.data,this.offset)};proto.pick=function "+e+"_pick(){return TrivialArray(this.data);};proto.valueOf=proto.get=function "+e+"_get(){return "+(i?"this.data.get(this.offset)":"this.data[this.offset]")+"};proto.set=function "+e+"_set(v){return "+(i?"this.data.set(this.offset,v)":"this.data[this.offset]=v")+"};return function construct_"+e+"(a,b,c,d){return new "+e+"(a,d)}",x=new Function("TrivialArray",r);return x(f1[n][0])}var r=["'use strict'"],s=L6(t),a=s.map(function(u){return"i"+u}),o="this.offset+"+s.map(function(u){return"this.stride["+u+"]*i"+u}).join("+"),l=s.map(function(u){return"b"+u}).join(","),c=s.map(function(u){return"c"+u}).join(",");r.push("function "+e+"(a,"+l+","+c+",d){this.data=a","this.shape=["+l+"]","this.stride=["+c+"]","this.offset=d|0}","var proto="+e+".prototype","proto.dtype='"+n+"'","proto.dimension="+t),r.push("Object.defineProperty(proto,'size',{get:function "+e+"_size(){return "+s.map(function(u){return"this.shape["+u+"]"}).join("*"),"}})"),t===1?r.push("proto.order=[0]"):(r.push("Object.defineProperty(proto,'order',{get:"),t<4?(r.push("function "+e+"_order(){"),t===2?r.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})"):t===3&&r.push("var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);if(s0>s1){if(s1>s2){return [2,1,0];}else if(s0>s2){return [1,2,0];}else{return [1,0,2];}}else if(s0>s2){return [2,0,1];}else if(s2>s1){return [0,1,2];}else{return [0,2,1];}}})")):r.push("ORDER})")),r.push("proto.set=function "+e+"_set("+a.join(",")+",v){"),i?r.push("return this.data.set("+o+",v)}"):r.push("return this.data["+o+"]=v}"),r.push("proto.get=function "+e+"_get("+a.join(",")+"){"),i?r.push("return this.data.get("+o+")}"):r.push("return this.data["+o+"]}"),r.push("proto.index=function "+e+"_index(",a.join(),"){return "+o+"}"),r.push("proto.hi=function "+e+"_hi("+a.join(",")+"){return new "+e+"(this.data,"+s.map(function(u){return["(typeof i",u,"!=='number'||i",u,"<0)?this.shape[",u,"]:i",u,"|0"].join("")}).join(",")+","+s.map(function(u){return"this.stride["+u+"]"}).join(",")+",this.offset)}");var h=s.map(function(u){return"a"+u+"=this.shape["+u+"]"}),p=s.map(function(u){return"c"+u+"=this.stride["+u+"]"});r.push("proto.lo=function "+e+"_lo("+a.join(",")+"){var b=this.offset,d=0,"+h.join(",")+","+p.join(","));for(var f=0;f<t;++f)r.push("if(typeof i"+f+"==='number'&&i"+f+">=0){d=i"+f+"|0;b+=c"+f+"*d;a"+f+"-=d}");r.push("return new "+e+"(this.data,"+s.map(function(u){return"a"+u}).join(",")+","+s.map(function(u){return"c"+u}).join(",")+",b)}"),r.push("proto.step=function "+e+"_step("+a.join(",")+"){var "+s.map(function(u){return"a"+u+"=this.shape["+u+"]"}).join(",")+","+s.map(function(u){return"b"+u+"=this.stride["+u+"]"}).join(",")+",c=this.offset,d=0,ceil=Math.ceil");for(var f=0;f<t;++f)r.push("if(typeof i"+f+"==='number'){d=i"+f+"|0;if(d<0){c+=b"+f+"*(a"+f+"-1);a"+f+"=ceil(-a"+f+"/d)}else{a"+f+"=ceil(a"+f+"/d)}b"+f+"*=d}");r.push("return new "+e+"(this.data,"+s.map(function(u){return"a"+u}).join(",")+","+s.map(function(u){return"b"+u}).join(",")+",c)}");for(var m=new Array(t),g=new Array(t),f=0;f<t;++f)m[f]="a[i"+f+"]",g[f]="b[i"+f+"]";r.push("proto.transpose=function "+e+"_transpose("+a+"){"+a.map(function(u,d){return u+"=("+u+"===undefined?"+d+":"+u+"|0)"}).join(";"),"var a=this.shape,b=this.stride;return new "+e+"(this.data,"+m.join(",")+","+g.join(",")+",this.offset)}"),r.push("proto.pick=function "+e+"_pick("+a+"){var a=[],b=[],c=this.offset");for(var f=0;f<t;++f)r.push("if(typeof i"+f+"==='number'&&i"+f+">=0){c=(c+this.stride["+f+"]*i"+f+")|0}else{a.push(this.shape["+f+"]);b.push(this.stride["+f+"])}");r.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}"),r.push("return function construct_"+e+"(data,shape,stride,offset){return new "+e+"(data,"+s.map(function(u){return"shape["+u+"]"}).join(",")+","+s.map(function(u){return"stride["+u+"]"}).join(",")+",offset)}");var x=new Function("CTOR_LIST","ORDER",r.join(`
`));return x(f1[n],N6)}function O6(n){if(D6(n))return"buffer";if(U6)switch(Object.prototype.toString.call(n)){case"[object Float64Array]":return"float64";case"[object Float32Array]":return"float32";case"[object Int8Array]":return"int8";case"[object Int16Array]":return"int16";case"[object Int32Array]":return"int32";case"[object Uint8Array]":return"uint8";case"[object Uint16Array]":return"uint16";case"[object Uint32Array]":return"uint32";case"[object Uint8ClampedArray]":return"uint8_clamped";case"[object BigInt64Array]":return"bigint64";case"[object BigUint64Array]":return"biguint64"}return Array.isArray(n)?"array":"generic"}var f1={float32:[],float64:[],int8:[],int16:[],int32:[],uint8:[],uint16:[],uint32:[],array:[],uint8_clamped:[],bigint64:[],biguint64:[],buffer:[],generic:[]};function B6(n,t,e,i){if(n===void 0){var c=f1.array[0];return c([])}else typeof n=="number"&&(n=[n]);t===void 0&&(t=[n.length]);var r=t.length;if(e===void 0){e=new Array(r);for(var s=r-1,a=1;s>=0;--s)e[s]=a,a*=t[s]}if(i===void 0){i=0;for(var s=0;s<r;++s)e[s]<0&&(i-=(t[s]-1)*e[s])}for(var o=O6(n),l=f1[o];l.length<=r+1;)l.push(F6(o,l.length-1));var c=l[r+1];return c(n,t,e,i)}var z6=B6;const H6=T6(z6);var Fe;(function(n){n.Range="range",n.Steps="steps",n.Positions="positions",n.Count="count",n.Values="values"})(Fe||(Fe={}));var Ot;(function(n){n[n.None=-1]="None",n[n.NoValue=0]="NoValue",n[n.LargeValue=1]="LargeValue",n[n.SmallValue=2]="SmallValue"})(Ot||(Ot={}));function G6(n){return d1(n)&&typeof n.from=="function"}function d1(n){return typeof n=="object"&&typeof n.to=="function"}function Ts(n){n.parentElement.removeChild(n)}function tr(n){return n!=null}function ws(n){n.preventDefault()}function V6(n){return n.filter(function(t){return this[t]?!1:this[t]=!0},{})}function k6(n,t){return Math.round(n/t)*t}function W6(n,t){var e=n.getBoundingClientRect(),i=n.ownerDocument,r=i.documentElement,s=E8(i);return/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(s.x=0),t?e.top+s.y-r.clientTop:e.left+s.x-r.clientLeft}function le(n){return typeof n=="number"&&!isNaN(n)&&isFinite(n)}function Cs(n,t,e){e>0&&(Ut(n,t),setTimeout(function(){n1(n,t)},e))}function Rs(n){return Math.max(Math.min(n,100),0)}function g1(n){return Array.isArray(n)?n:[n]}function X6(n){n=String(n);var t=n.split(".");return t.length>1?t[1].length:0}function Ut(n,t){n.classList&&!/\s/.test(t)?n.classList.add(t):n.className+=" "+t}function n1(n,t){n.classList&&!/\s/.test(t)?n.classList.remove(t):n.className=n.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}function q6(n,t){return n.classList?n.classList.contains(t):new RegExp("\\b"+t+"\\b").test(n.className)}function E8(n){var t=window.pageXOffset!==void 0,e=(n.compatMode||"")==="CSS1Compat",i=t?window.pageXOffset:e?n.documentElement.scrollLeft:n.body.scrollLeft,r=t?window.pageYOffset:e?n.documentElement.scrollTop:n.body.scrollTop;return{x:i,y:r}}function Y6(){return window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"}}function j6(){var n=!1;try{var t=Object.defineProperty({},"passive",{get:function(){n=!0}});window.addEventListener("test",null,t)}catch{}return n}function Z6(){return window.CSS&&CSS.supports&&CSS.supports("touch-action","none")}function gr(n,t){return 100/(t-n)}function er(n,t,e){return t*100/(n[e+1]-n[e])}function K6(n,t){return er(n,n[0]<0?t+Math.abs(n[0]):t-n[0],0)}function $6(n,t){return t*(n[1]-n[0])/100+n[0]}function ai(n,t){for(var e=1;n>=t[e];)e+=1;return e}function J6(n,t,e){if(e>=n.slice(-1)[0])return 100;var i=ai(e,n),r=n[i-1],s=n[i],a=t[i-1],o=t[i];return a+K6([r,s],e)/gr(a,o)}function Q6(n,t,e){if(e>=100)return n.slice(-1)[0];var i=ai(e,t),r=n[i-1],s=n[i],a=t[i-1],o=t[i];return $6([r,s],(e-a)*gr(a,o))}function t5(n,t,e,i){if(i===100)return i;var r=ai(i,n),s=n[r-1],a=n[r];return e?i-s>(a-s)/2?a:s:t[r-1]?n[r-1]+k6(i-n[r-1],t[r-1]):i}var b8=function(){function n(t,e,i){this.xPct=[],this.xVal=[],this.xSteps=[],this.xNumSteps=[],this.xHighestCompleteStep=[],this.xSteps=[i||!1],this.xNumSteps=[!1],this.snap=e;var r,s=[];for(Object.keys(t).forEach(function(a){s.push([g1(t[a]),a])}),s.sort(function(a,o){return a[0][0]-o[0][0]}),r=0;r<s.length;r++)this.handleEntryPoint(s[r][1],s[r][0]);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)this.handleStepPoint(r,this.xNumSteps[r])}return n.prototype.getDistance=function(t){for(var e=[],i=0;i<this.xNumSteps.length-1;i++)e[i]=er(this.xVal,t,i);return e},n.prototype.getAbsoluteDistance=function(t,e,i){var r=0;if(t<this.xPct[this.xPct.length-1])for(;t>this.xPct[r+1];)r++;else t===this.xPct[this.xPct.length-1]&&(r=this.xPct.length-2);!i&&t===this.xPct[r+1]&&r++,e===null&&(e=[]);var s,a=1,o=e[r],l=0,c=0,h=0,p=0;for(i?s=(t-this.xPct[r])/(this.xPct[r+1]-this.xPct[r]):s=(this.xPct[r+1]-t)/(this.xPct[r+1]-this.xPct[r]);o>0;)l=this.xPct[r+1+p]-this.xPct[r+p],e[r+p]*a+100-s*100>100?(c=l*s,a=(o-100*s)/e[r+p],s=1):(c=e[r+p]*l/100*a,a=0),i?(h=h-c,this.xPct.length+p>=1&&p--):(h=h+c,this.xPct.length-p>=1&&p++),o=e[r+p]*a;return t+h},n.prototype.toStepping=function(t){return t=J6(this.xVal,this.xPct,t),t},n.prototype.fromStepping=function(t){return Q6(this.xVal,this.xPct,t)},n.prototype.getStep=function(t){return t=t5(this.xPct,this.xSteps,this.snap,t),t},n.prototype.getDefaultStep=function(t,e,i){var r=ai(t,this.xPct);return(t===100||e&&t===this.xPct[r-1])&&(r=Math.max(r-1,1)),(this.xVal[r]-this.xVal[r-1])/i},n.prototype.getNearbySteps=function(t){var e=ai(t,this.xPct);return{stepBefore:{startValue:this.xVal[e-2],step:this.xNumSteps[e-2],highestStep:this.xHighestCompleteStep[e-2]},thisStep:{startValue:this.xVal[e-1],step:this.xNumSteps[e-1],highestStep:this.xHighestCompleteStep[e-1]},stepAfter:{startValue:this.xVal[e],step:this.xNumSteps[e],highestStep:this.xHighestCompleteStep[e]}}},n.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(X6);return Math.max.apply(null,t)},n.prototype.hasNoSize=function(){return this.xVal[0]===this.xVal[this.xVal.length-1]},n.prototype.convert=function(t){return this.getStep(this.toStepping(t))},n.prototype.handleEntryPoint=function(t,e){var i;if(t==="min"?i=0:t==="max"?i=100:i=parseFloat(t),!le(i)||!le(e[0]))throw new Error("noUiSlider: 'range' value isn't numeric.");this.xPct.push(i),this.xVal.push(e[0]);var r=Number(e[1]);i?this.xSteps.push(isNaN(r)?!1:r):isNaN(r)||(this.xSteps[0]=r),this.xHighestCompleteStep.push(0)},n.prototype.handleStepPoint=function(t,e){if(e){if(this.xVal[t]===this.xVal[t+1]){this.xSteps[t]=this.xHighestCompleteStep[t]=this.xVal[t];return}this.xSteps[t]=er([this.xVal[t],this.xVal[t+1]],e,0)/gr(this.xPct[t],this.xPct[t+1]);var i=(this.xVal[t+1]-this.xVal[t])/this.xNumSteps[t],r=Math.ceil(Number(i.toFixed(3))-1),s=this.xVal[t]+this.xNumSteps[t]*r;this.xHighestCompleteStep[t]=s}},n}(),Ps={to:function(n){return n===void 0?"":n.toFixed(2)},from:Number},A8={target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},Ne={tooltips:".__tooltips",aria:".__aria"};function e5(n,t){if(!le(t))throw new Error("noUiSlider: 'step' is not numeric.");n.singleStep=t}function n5(n,t){if(!le(t))throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");n.keyboardPageMultiplier=t}function i5(n,t){if(!le(t))throw new Error("noUiSlider: 'keyboardMultiplier' is not numeric.");n.keyboardMultiplier=t}function r5(n,t){if(!le(t))throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");n.keyboardDefaultStep=t}function s5(n,t){if(typeof t!="object"||Array.isArray(t))throw new Error("noUiSlider: 'range' is not an object.");if(t.min===void 0||t.max===void 0)throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");n.spectrum=new b8(t,n.snap||!1,n.singleStep)}function a5(n,t){if(t=g1(t),!Array.isArray(t)||!t.length)throw new Error("noUiSlider: 'start' option is incorrect.");n.handles=t.length,n.start=t}function o5(n,t){if(typeof t!="boolean")throw new Error("noUiSlider: 'snap' option must be a boolean.");n.snap=t}function l5(n,t){if(typeof t!="boolean")throw new Error("noUiSlider: 'animate' option must be a boolean.");n.animate=t}function c5(n,t){if(typeof t!="number")throw new Error("noUiSlider: 'animationDuration' option must be a number.");n.animationDuration=t}function T8(n,t){var e=[!1],i;if(t==="lower"?t=[!0,!1]:t==="upper"&&(t=[!1,!0]),t===!0||t===!1){for(i=1;i<n.handles;i++)e.push(t);e.push(!1)}else{if(!Array.isArray(t)||!t.length||t.length!==n.handles+1)throw new Error("noUiSlider: 'connect' option doesn't match handle count.");e=t}n.connect=e}function u5(n,t){switch(t){case"horizontal":n.ort=0;break;case"vertical":n.ort=1;break;default:throw new Error("noUiSlider: 'orientation' option is invalid.")}}function w8(n,t){if(!le(t))throw new Error("noUiSlider: 'margin' option must be numeric.");t!==0&&(n.margin=n.spectrum.getDistance(t))}function h5(n,t){if(!le(t))throw new Error("noUiSlider: 'limit' option must be numeric.");if(n.limit=n.spectrum.getDistance(t),!n.limit||n.handles<2)throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.")}function f5(n,t){var e;if(!le(t)&&!Array.isArray(t))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(t)&&!(t.length===2||le(t[0])||le(t[1])))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(t!==0){for(Array.isArray(t)||(t=[t,t]),n.padding=[n.spectrum.getDistance(t[0]),n.spectrum.getDistance(t[1])],e=0;e<n.spectrum.xNumSteps.length-1;e++)if(n.padding[0][e]<0||n.padding[1][e]<0)throw new Error("noUiSlider: 'padding' option must be a positive number(s).");var i=t[0]+t[1],r=n.spectrum.xVal[0],s=n.spectrum.xVal[n.spectrum.xVal.length-1];if(i/(s-r)>1)throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.")}}function d5(n,t){switch(t){case"ltr":n.dir=0;break;case"rtl":n.dir=1;break;default:throw new Error("noUiSlider: 'direction' option was not recognized.")}}function p5(n,t){if(typeof t!="string")throw new Error("noUiSlider: 'behaviour' must be a string containing options.");var e=t.indexOf("tap")>=0,i=t.indexOf("drag")>=0,r=t.indexOf("fixed")>=0,s=t.indexOf("snap")>=0,a=t.indexOf("hover")>=0,o=t.indexOf("unconstrained")>=0,l=t.indexOf("invert-connects")>=0,c=t.indexOf("drag-all")>=0,h=t.indexOf("smooth-steps")>=0;if(r){if(n.handles!==2)throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");w8(n,n.start[1]-n.start[0])}if(l&&n.handles!==2)throw new Error("noUiSlider: 'invert-connects' behaviour must be used with 2 handles");if(o&&(n.margin||n.limit))throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");n.events={tap:e||s,drag:i,dragAll:c,smoothSteps:h,fixed:r,snap:s,hover:a,unconstrained:o,invertConnects:l}}function m5(n,t){if(t!==!1)if(t===!0||d1(t)){n.tooltips=[];for(var e=0;e<n.handles;e++)n.tooltips.push(t)}else{if(t=g1(t),t.length!==n.handles)throw new Error("noUiSlider: must pass a formatter for all handles.");t.forEach(function(i){if(typeof i!="boolean"&&!d1(i))throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.")}),n.tooltips=t}}function _5(n,t){if(t.length!==n.handles)throw new Error("noUiSlider: must pass a attributes for all handles.");n.handleAttributes=t}function g5(n,t){if(!d1(t))throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");n.ariaFormat=t}function v5(n,t){if(!G6(t))throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");n.format=t}function x5(n,t){if(typeof t!="boolean")throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");n.keyboardSupport=t}function S5(n,t){n.documentElement=t}function M5(n,t){if(typeof t!="string"&&t!==!1)throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");n.cssPrefix=t}function y5(n,t){if(typeof t!="object")throw new Error("noUiSlider: 'cssClasses' must be an object.");typeof n.cssPrefix=="string"?(n.cssClasses={},Object.keys(t).forEach(function(e){n.cssClasses[e]=n.cssPrefix+t[e]})):n.cssClasses=t}function C8(n){var t={margin:null,limit:null,padding:null,animate:!0,animationDuration:300,ariaFormat:Ps,format:Ps},e={step:{r:!1,t:e5},keyboardPageMultiplier:{r:!1,t:n5},keyboardMultiplier:{r:!1,t:i5},keyboardDefaultStep:{r:!1,t:r5},start:{r:!0,t:a5},connect:{r:!0,t:T8},direction:{r:!0,t:d5},snap:{r:!1,t:o5},animate:{r:!1,t:l5},animationDuration:{r:!1,t:c5},range:{r:!0,t:s5},orientation:{r:!1,t:u5},margin:{r:!1,t:w8},limit:{r:!1,t:h5},padding:{r:!1,t:f5},behaviour:{r:!0,t:p5},ariaFormat:{r:!1,t:g5},format:{r:!1,t:v5},tooltips:{r:!1,t:m5},keyboardSupport:{r:!0,t:x5},documentElement:{r:!1,t:S5},cssPrefix:{r:!0,t:M5},cssClasses:{r:!0,t:y5},handleAttributes:{r:!1,t:_5}},i={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:A8,keyboardPageMultiplier:5,keyboardMultiplier:1,keyboardDefaultStep:10};n.format&&!n.ariaFormat&&(n.ariaFormat=n.format),Object.keys(e).forEach(function(l){if(!tr(n[l])&&i[l]===void 0){if(e[l].r)throw new Error("noUiSlider: '"+l+"' is required.");return}e[l].t(t,tr(n[l])?n[l]:i[l])}),t.pips=n.pips;var r=document.createElement("div"),s=r.style.msTransform!==void 0,a=r.style.transform!==void 0;t.transformRule=a?"transform":s?"msTransform":"webkitTransform";var o=[["left","top"],["right","bottom"]];return t.style=o[t.dir][t.ort],t}function E5(n,t,e){var i=Y6(),r=Z6(),s=r&&j6(),a=n,o,l,c,h,p,f,m=t.spectrum,g=[],x=[],u=[],d=0,A={},y=!1,T=n.ownerDocument,G=t.documentElement||T.documentElement,D=T.body,w=T.dir==="rtl"||t.ort===1?0:100;function O(E,R){var P=T.createElement("div");return R&&Ut(P,R),E.appendChild(P),P}function s0(E,R){var P=O(E,t.cssClasses.origin),$=O(P,t.cssClasses.handle);if(O($,t.cssClasses.touchArea),$.setAttribute("data-handle",String(R)),t.keyboardSupport&&($.setAttribute("tabindex","0"),$.addEventListener("keydown",function(o0){return ct(o0,R)})),t.handleAttributes!==void 0){var r0=t.handleAttributes[R];Object.keys(r0).forEach(function(o0){$.setAttribute(o0,r0[o0])})}return $.setAttribute("role","slider"),$.setAttribute("aria-orientation",t.ort?"vertical":"horizontal"),R===0?Ut($,t.cssClasses.handleLower):R===t.handles-1&&Ut($,t.cssClasses.handleUpper),P.handle=$,P}function _(E,R){return R?O(E,t.cssClasses.connect):!1}function M(E,R){l=O(R,t.cssClasses.connects),c=[],h=[],h.push(_(l,E[0]));for(var P=0;P<t.handles;P++)c.push(s0(R,P)),u[P]=P,h.push(_(l,E[P+1]))}function j(E){Ut(E,t.cssClasses.target),t.dir===0?Ut(E,t.cssClasses.ltr):Ut(E,t.cssClasses.rtl),t.ort===0?Ut(E,t.cssClasses.horizontal):Ut(E,t.cssClasses.vertical);var R=getComputedStyle(E).direction;return R==="rtl"?Ut(E,t.cssClasses.textDirectionRtl):Ut(E,t.cssClasses.textDirectionLtr),O(E,t.cssClasses.base)}function k(E,R){return!t.tooltips||!t.tooltips[R]?!1:O(E.firstChild,t.cssClasses.tooltip)}function J(){return a.hasAttribute("disabled")}function X(E){var R=c[E];return R.hasAttribute("disabled")}function q(E){E!=null?(c[E].setAttribute("disabled",""),c[E].handle.removeAttribute("tabindex")):(a.setAttribute("disabled",""),c.forEach(function(R){R.handle.removeAttribute("tabindex")}))}function t0(E){E!=null?(c[E].removeAttribute("disabled"),c[E].handle.setAttribute("tabindex","0")):(a.removeAttribute("disabled"),c.forEach(function(R){R.removeAttribute("disabled"),R.handle.setAttribute("tabindex","0")}))}function V(){f&&(B("update"+Ne.tooltips),f.forEach(function(E){E&&Ts(E)}),f=null)}function f0(){V(),f=c.map(k),b("update"+Ne.tooltips,function(E,R,P){if(!(!f||!t.tooltips)&&f[R]!==!1){var $=E[R];t.tooltips[R]!==!0&&($=t.tooltips[R].to(P[R])),f[R].innerHTML=$}})}function d0(){B("update"+Ne.aria),b("update"+Ne.aria,function(E,R,P,$,r0){u.forEach(function(o0){var w0=c[o0],h0=e0(x,o0,0,!0,!0,!0),J0=e0(x,o0,100,!0,!0,!0),et=r0[o0],ht=String(t.ariaFormat.to(P[o0]));h0=m.fromStepping(h0).toFixed(1),J0=m.fromStepping(J0).toFixed(1),et=m.fromStepping(et).toFixed(1),w0.children[0].setAttribute("aria-valuemin",h0),w0.children[0].setAttribute("aria-valuemax",J0),w0.children[0].setAttribute("aria-valuenow",et),w0.children[0].setAttribute("aria-valuetext",ht)})})}function l0(E){if(E.mode===Fe.Range||E.mode===Fe.Steps)return m.xVal;if(E.mode===Fe.Count){if(E.values<2)throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");for(var R=E.values-1,P=100/R,$=[];R--;)$[R]=R*P;return $.push(100),k0($,E.stepped)}return E.mode===Fe.Positions?k0(E.values,E.stepped):E.mode===Fe.Values?E.stepped?E.values.map(function(r0){return m.fromStepping(m.getStep(m.toStepping(r0)))}):E.values:[]}function k0(E,R){return E.map(function(P){return m.fromStepping(R?m.getStep(P):P)})}function K0(E){function R(et,ht){return Number((et+ht).toFixed(7))}var P=l0(E),$={},r0=m.xVal[0],o0=m.xVal[m.xVal.length-1],w0=!1,h0=!1,J0=0;return P=V6(P.slice().sort(function(et,ht){return et-ht})),P[0]!==r0&&(P.unshift(r0),w0=!0),P[P.length-1]!==o0&&(P.push(o0),h0=!0),P.forEach(function(et,ht){var lt,$0,ft,St=et,gt=P[ht+1],Mt,kn,Wn,S,I,z,H,N=E.mode===Fe.Steps;for(N&&(lt=m.xNumSteps[ht]),lt||(lt=gt-St),gt===void 0&&(gt=St),lt=Math.max(lt,1e-7),$0=St;$0<=gt;$0=R($0,lt)){for(Mt=m.toStepping($0),kn=Mt-J0,I=kn/(E.density||1),z=Math.round(I),H=kn/z,ft=1;ft<=z;ft+=1)Wn=J0+ft*H,$[Wn.toFixed(5)]=[m.fromStepping(Wn),0];S=P.indexOf($0)>-1?Ot.LargeValue:N?Ot.SmallValue:Ot.NoValue,!ht&&w0&&$0!==gt&&(S=0),$0===gt&&h0||($[Mt.toFixed(5)]=[$0,S]),J0=Mt}}),$}function Z(E,R,P){var $,r0,o0=T.createElement("div"),w0=($={},$[Ot.None]="",$[Ot.NoValue]=t.cssClasses.valueNormal,$[Ot.LargeValue]=t.cssClasses.valueLarge,$[Ot.SmallValue]=t.cssClasses.valueSub,$),h0=(r0={},r0[Ot.None]="",r0[Ot.NoValue]=t.cssClasses.markerNormal,r0[Ot.LargeValue]=t.cssClasses.markerLarge,r0[Ot.SmallValue]=t.cssClasses.markerSub,r0),J0=[t.cssClasses.valueHorizontal,t.cssClasses.valueVertical],et=[t.cssClasses.markerHorizontal,t.cssClasses.markerVertical];Ut(o0,t.cssClasses.pips),Ut(o0,t.ort===0?t.cssClasses.pipsHorizontal:t.cssClasses.pipsVertical);function ht($0,ft){var St=ft===t.cssClasses.value,gt=St?J0:et,Mt=St?w0:h0;return ft+" "+gt[t.ort]+" "+Mt[$0]}function lt($0,ft,St){if(St=R?R(ft,St):St,St!==Ot.None){var gt=O(o0,!1);gt.className=ht(St,t.cssClasses.marker),gt.style[t.style]=$0+"%",St>Ot.NoValue&&(gt=O(o0,!1),gt.className=ht(St,t.cssClasses.value),gt.setAttribute("data-value",String(ft)),gt.style[t.style]=$0+"%",gt.innerHTML=String(P.to(ft)))}}return Object.keys(E).forEach(function($0){lt($0,E[$0][0],E[$0][1])}),o0}function n0(){p&&(Ts(p),p=null)}function y0(E){n0();var R=K0(E),P=E.filter,$=E.format||{to:function(r0){return String(Math.round(r0))}};return p=a.appendChild(Z(R,P,$)),p}function x0(){var E=o.getBoundingClientRect(),R="offset"+["Width","Height"][t.ort];return t.ort===0?E.width||o[R]:E.height||o[R]}function R0(E,R,P,$){var r0=function(w0){var h0=L0(w0,$.pageOffset,$.target||R);if(!h0||J()&&!$.doNotReject||q6(a,t.cssClasses.tap)&&!$.doNotReject||E===i.start&&h0.buttons!==void 0&&h0.buttons>1||$.hover&&h0.buttons)return!1;s||h0.preventDefault(),h0.calcPoint=h0.points[t.ort],P(h0,$)},o0=[];return E.split(" ").forEach(function(w0){R.addEventListener(w0,r0,s?{passive:!0}:!1),o0.push([w0,r0])}),o0}function L0(E,R,P){var $=E.type.indexOf("touch")===0,r0=E.type.indexOf("mouse")===0,o0=E.type.indexOf("pointer")===0,w0=0,h0=0;if(E.type.indexOf("MSPointer")===0&&(o0=!0),E.type==="mousedown"&&!E.buttons&&!E.touches)return!1;if($){var J0=function(lt){var $0=lt.target;return $0===P||P.contains($0)||E.composed&&E.composedPath().shift()===P};if(E.type==="touchstart"){var et=Array.prototype.filter.call(E.touches,J0);if(et.length>1)return!1;w0=et[0].pageX,h0=et[0].pageY}else{var ht=Array.prototype.find.call(E.changedTouches,J0);if(!ht)return!1;w0=ht.pageX,h0=ht.pageY}}return R=R||E8(T),(r0||o0)&&(w0=E.clientX+R.x,h0=E.clientY+R.y),E.pageOffset=R,E.points=[w0,h0],E.cursor=r0||o0,E}function W0(E){var R=E-W6(o,t.ort),P=R*100/x0();return P=Rs(P),t.dir?100-P:P}function tt(E){var R=100,P=!1;return c.forEach(function($,r0){if(!X(r0)){var o0=x[r0],w0=Math.abs(o0-E),h0=w0===100&&R===100,J0=w0<R,et=w0<=R&&E>o0;(J0||et||h0)&&(P=r0,R=w0)}}),P}function Y0(E,R){E.type==="mouseout"&&E.target.nodeName==="HTML"&&E.relatedTarget===null&&Tt(E,R)}function C(E,R){if(navigator.appVersion.indexOf("MSIE 9")===-1&&E.buttons===0&&R.buttonsProperty!==0)return Tt(E,R);var P=(t.dir?-1:1)*(E.calcPoint-R.startCalcPoint),$=P*100/R.baseSize;b0(P>0,$,R.locations,R.handleNumbers,R.connect)}function Tt(E,R){R.handle&&(n1(R.handle,t.cssClasses.active),d-=1),R.listeners.forEach(function(P){G.removeEventListener(P[0],P[1])}),d===0&&(n1(a,t.cssClasses.drag),X0(),E.cursor&&(D.style.cursor="",D.removeEventListener("selectstart",ws))),t.events.smoothSteps&&(R.handleNumbers.forEach(function(P){i0(P,x[P],!0,!0,!1,!1)}),R.handleNumbers.forEach(function(P){W("update",P)})),R.handleNumbers.forEach(function(P){W("change",P),W("set",P),W("end",P)})}function G0(E,R){if(!R.handleNumbers.some(X)){var P;if(R.handleNumbers.length===1){var $=c[R.handleNumbers[0]];P=$.children[0],d+=1,Ut(P,t.cssClasses.active)}E.stopPropagation();var r0=[],o0=R0(i.move,G,C,{target:E.target,handle:P,connect:R.connect,listeners:r0,startCalcPoint:E.calcPoint,baseSize:x0(),pageOffset:E.pageOffset,handleNumbers:R.handleNumbers,buttonsProperty:E.buttons,locations:x.slice()}),w0=R0(i.end,G,Tt,{target:E.target,handle:P,listeners:r0,doNotReject:!0,handleNumbers:R.handleNumbers}),h0=R0("mouseout",G,Y0,{target:E.target,handle:P,listeners:r0,doNotReject:!0,handleNumbers:R.handleNumbers});r0.push.apply(r0,o0.concat(w0,h0)),E.cursor&&(D.style.cursor=getComputedStyle(E.target).cursor,c.length>1&&Ut(a,t.cssClasses.drag),D.addEventListener("selectstart",ws,!1)),R.handleNumbers.forEach(function(J0){W("start",J0)})}}function Z0(E){E.stopPropagation();var R=W0(E.calcPoint),P=tt(R);P!==!1&&(t.events.snap||Cs(a,t.cssClasses.tap,t.animationDuration),i0(P,R,!0,!0),X0(),W("slide",P,!0),W("update",P,!0),t.events.snap?G0(E,{handleNumbers:[P]}):(W("change",P,!0),W("set",P,!0)))}function U0(E){var R=W0(E.calcPoint),P=m.getStep(R),$=m.fromStepping(P);Object.keys(A).forEach(function(r0){r0.split(".")[0]==="hover"&&A[r0].forEach(function(o0){o0.call(V0,$)})})}function ct(E,R){if(J()||X(R))return!1;var P=["Left","Right"],$=["Down","Up"],r0=["PageDown","PageUp"],o0=["Home","End"];t.dir&&!t.ort?P.reverse():t.ort&&!t.dir&&($.reverse(),r0.reverse());var w0=E.key.replace("Arrow",""),h0=w0===r0[0],J0=w0===r0[1],et=w0===$[0]||w0===P[0]||h0,ht=w0===$[1]||w0===P[1]||J0,lt=w0===o0[0],$0=w0===o0[1];if(!et&&!ht&&!lt&&!$0)return!0;E.preventDefault();var ft;if(ht||et){var St=et?0:1,gt=L(R),Mt=gt[St];if(Mt===null)return!1;Mt===!1&&(Mt=m.getDefaultStep(x[R],et,t.keyboardDefaultStep)),J0||h0?Mt*=t.keyboardPageMultiplier:Mt*=t.keyboardMultiplier,Mt=Math.max(Mt,1e-7),Mt=(et?-1:1)*Mt,ft=g[R]+Mt}else $0?ft=t.spectrum.xVal[t.spectrum.xVal.length-1]:ft=t.spectrum.xVal[0];return i0(R,m.toStepping(ft),!0,!0),W("slide",R),W("update",R),W("change",R),W("set",R),!1}function I0(E){E.fixed||c.forEach(function(R,P){R0(i.start,R.children[0],G0,{handleNumbers:[P]})}),E.tap&&R0(i.start,o,Z0,{}),E.hover&&R0(i.move,o,U0,{hover:!0}),E.drag&&h.forEach(function(R,P){if(!(R===!1||P===0||P===h.length-1)){var $=c[P-1],r0=c[P],o0=[R],w0=[$,r0],h0=[P-1,P];Ut(R,t.cssClasses.draggable),E.fixed&&(o0.push($.children[0]),o0.push(r0.children[0])),E.dragAll&&(w0=c,h0=u),o0.forEach(function(J0){R0(i.start,J0,G0,{handles:w0,handleNumbers:h0,connect:R})})}})}function b(E,R){A[E]=A[E]||[],A[E].push(R),E.split(".")[0]==="update"&&c.forEach(function(P,$){W("update",$)})}function v(E){return E===Ne.aria||E===Ne.tooltips}function B(E){var R=E&&E.split(".")[0],P=R?E.substring(R.length):E;Object.keys(A).forEach(function($){var r0=$.split(".")[0],o0=$.substring(r0.length);(!R||R===r0)&&(!P||P===o0)&&(!v(o0)||P===o0)&&delete A[$]})}function W(E,R,P){Object.keys(A).forEach(function($){var r0=$.split(".")[0];E===r0&&A[$].forEach(function(o0){o0.call(V0,g.map(t.format.to),R,g.slice(),P||!1,x.slice(),V0)})})}function e0(E,R,P,$,r0,o0,w0){var h0;return c.length>1&&!t.events.unconstrained&&($&&R>0&&(h0=m.getAbsoluteDistance(E[R-1],t.margin,!1),P=Math.max(P,h0)),r0&&R<c.length-1&&(h0=m.getAbsoluteDistance(E[R+1],t.margin,!0),P=Math.min(P,h0))),c.length>1&&t.limit&&($&&R>0&&(h0=m.getAbsoluteDistance(E[R-1],t.limit,!1),P=Math.min(P,h0)),r0&&R<c.length-1&&(h0=m.getAbsoluteDistance(E[R+1],t.limit,!0),P=Math.max(P,h0))),t.padding&&(R===0&&(h0=m.getAbsoluteDistance(0,t.padding[0],!1),P=Math.max(P,h0)),R===c.length-1&&(h0=m.getAbsoluteDistance(100,t.padding[1],!0),P=Math.min(P,h0))),w0||(P=m.getStep(P)),P=Rs(P),P===E[R]&&!o0?!1:P}function K(E,R){var P=t.ort;return(P?R:E)+", "+(P?E:R)}function b0(E,R,P,$,r0){var o0=P.slice(),w0=$[0],h0=t.events.smoothSteps,J0=[!E,E],et=[E,!E];$=$.slice(),E&&$.reverse(),$.length>1?$.forEach(function(lt,$0){var ft=e0(o0,lt,o0[lt]+R,J0[$0],et[$0],!1,h0);ft===!1?R=0:(R=ft-o0[lt],o0[lt]=ft)}):J0=et=[!0];var ht=!1;$.forEach(function(lt,$0){ht=i0(lt,P[lt]+R,J0[$0],et[$0],!1,h0)||ht}),ht&&($.forEach(function(lt){W("update",lt),W("slide",lt)}),r0!=null&&W("drag",w0))}function u0(E,R){return t.dir?100-E-R:E}function S0(E,R){x[E]=R,g[E]=m.fromStepping(R);var P=u0(R,0)-w,$="translate("+K(P+"%","0")+")";if(c[E].style[t.transformRule]=$,t.events.invertConnects&&x.length>1){var r0=x.every(function(o0,w0,h0){return w0===0||o0>=h0[w0-1]});if(y!==!r0){p0();return}}m0(E),m0(E+1),y&&(m0(E-1),m0(E+2))}function X0(){u.forEach(function(E){var R=x[E]>50?-1:1,P=3+(c.length+R*E);c[E].style.zIndex=String(P)})}function i0(E,R,P,$,r0,o0){return r0||(R=e0(x,E,R,P,$,!1,o0)),R===!1?!1:(S0(E,R),!0)}function m0(E){if(h[E]){var R=x.slice();y&&R.sort(function(h0,J0){return h0-J0});var P=0,$=100;E!==0&&(P=R[E-1]),E!==h.length-1&&($=R[E]);var r0=$-P,o0="translate("+K(u0(P,r0)+"%","0")+")",w0="scale("+K(r0/100,"1")+")";h[E].style[t.transformRule]=o0+" "+w0}}function D0(E,R){return E===null||E===!1||E===void 0||(typeof E=="number"&&(E=String(E)),E=t.format.from(E),E!==!1&&(E=m.toStepping(E)),E===!1||isNaN(E))?x[R]:E}function P0(E,R,P){var $=g1(E),r0=x[0]===void 0;R=R===void 0?!0:R,t.animate&&!r0&&Cs(a,t.cssClasses.tap,t.animationDuration),u.forEach(function(h0){i0(h0,D0($[h0],h0),!0,!1,P)});var o0=u.length===1?0:1;if(r0&&m.hasNoSize()&&(P=!0,x[0]=0,u.length>1)){var w0=100/(u.length-1);u.forEach(function(h0){x[h0]=h0*w0})}for(;o0<u.length;++o0)u.forEach(function(h0){i0(h0,x[h0],!0,!0,P)});X0(),u.forEach(function(h0){W("update",h0),$[h0]!==null&&R&&W("set",h0)})}function M0(E){P0(t.start,E)}function q0(E,R,P,$){if(E=Number(E),!(E>=0&&E<u.length))throw new Error("noUiSlider: invalid handle number, got: "+E);i0(E,D0(R,E),!0,!0,$),W("update",E),P&&W("set",E)}function B0(E){if(E===void 0&&(E=!1),E)return g.length===1?g[0]:g.slice(0);var R=g.map(t.format.to);return R.length===1?R[0]:R}function ot(){for(B(Ne.aria),B(Ne.tooltips),Object.keys(t.cssClasses).forEach(function(E){n1(a,t.cssClasses[E])});a.firstChild;)a.removeChild(a.firstChild);delete a.noUiSlider}function L(E){var R=x[E],P=m.getNearbySteps(R),$=g[E],r0=P.thisStep.step,o0=null;if(t.snap)return[$-P.stepBefore.startValue||null,P.stepAfter.startValue-$||null];r0!==!1&&$+r0>P.stepAfter.startValue&&(r0=P.stepAfter.startValue-$),$>P.thisStep.startValue?o0=P.thisStep.step:P.stepBefore.step===!1?o0=!1:o0=$-P.stepBefore.highestStep,R===100?r0=null:R===0&&(o0=null);var w0=m.countStepDecimals();return r0!==null&&r0!==!1&&(r0=Number(r0.toFixed(w0))),o0!==null&&o0!==!1&&(o0=Number(o0.toFixed(w0))),[o0,r0]}function _0(){return u.map(L)}function Y(E,R){var P=B0(),$=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips","connect"];$.forEach(function(o0){E[o0]!==void 0&&(e[o0]=E[o0])});var r0=C8(e);$.forEach(function(o0){E[o0]!==void 0&&(t[o0]=r0[o0])}),m=r0.spectrum,t.margin=r0.margin,t.limit=r0.limit,t.padding=r0.padding,t.pips?y0(t.pips):n0(),t.tooltips?f0():V(),x=[],P0(tr(E.start)?E.start:P,R),E.connect&&Q()}function Q(){for(;l.firstChild;)l.removeChild(l.firstChild);for(var E=0;E<=t.handles;E++)h[E]=_(l,t.connect[E]),m0(E);I0({drag:t.events.drag,fixed:!0})}function p0(){y=!y,T8(t,t.connect.map(function(E){return!E})),Q()}function g0(){o=j(a),M(t.connect,o),I0(t.events),P0(t.start),t.pips&&y0(t.pips),t.tooltips&&f0(),d0()}g0();var V0={destroy:ot,steps:_0,on:b,off:B,get:B0,set:P0,setHandle:q0,reset:M0,disable:q,enable:t0,__moveHandles:function(E,R,P){b0(E,R,x,P)},options:e,updateOptions:Y,target:a,removePips:n0,removeTooltips:V,getPositions:function(){return x.slice()},getTooltips:function(){return f},getOrigins:function(){return c},pips:y0};return V0}function b5(n,t){if(!n||!n.nodeName)throw new Error("noUiSlider: create requires a single element, got: "+n);if(n.noUiSlider)throw new Error("noUiSlider: Slider was already initialized.");var e=C8(t),i=E5(n,e,t);return n.noUiSlider=i,i}const Ls={__spectrum:b8,cssClasses:A8,create:b5},Ds=new Ve,Vi=new U;class R8 extends o6{constructor(){super(),this.isLineSegmentsGeometry=!0,this.type="LineSegmentsGeometry";const t=[-1,2,0,1,2,0,-1,1,0,1,1,0,-1,0,0,1,0,0,-1,-1,0,1,-1,0],e=[-1,2,1,2,-1,1,1,1,-1,-1,1,-1,-1,-2,1,-2],i=[0,2,1,2,3,1,2,4,3,4,5,3,4,6,5,6,7,5];this.setIndex(i),this.setAttribute("position",new Gt(t,3)),this.setAttribute("uv",new Gt(e,2))}applyMatrix4(t){const e=this.attributes.instanceStart,i=this.attributes.instanceEnd;return e!==void 0&&(e.applyMatrix4(t),i.applyMatrix4(t),e.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}setPositions(t){let e;t instanceof Float32Array?e=t:Array.isArray(t)&&(e=new Float32Array(t));const i=new Q9(e,6,1);return this.setAttribute("instanceStart",new pe(i,3,0)),this.setAttribute("instanceEnd",new pe(i,3,3)),this.computeBoundingBox(),this.computeBoundingSphere(),this}setColors(t){let e;t instanceof Float32Array?e=t:Array.isArray(t)&&(e=new Float32Array(t));const i=new Q9(e,6,1);return this.setAttribute("instanceColorStart",new pe(i,3,0)),this.setAttribute("instanceColorEnd",new pe(i,3,3)),this}fromWireframeGeometry(t){return this.setPositions(t.attributes.position.array),this}fromEdgesGeometry(t){return this.setPositions(t.attributes.position.array),this}fromMesh(t){return this.fromWireframeGeometry(new e6(t.geometry)),this}fromLineSegments(t){const e=t.geometry;return this.setPositions(e.attributes.position.array),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Ve);const t=this.attributes.instanceStart,e=this.attributes.instanceEnd;t!==void 0&&e!==void 0&&(this.boundingBox.setFromBufferAttribute(t),Ds.setFromBufferAttribute(e),this.boundingBox.union(Ds))}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Gn),this.boundingBox===null&&this.computeBoundingBox();const t=this.attributes.instanceStart,e=this.attributes.instanceEnd;if(t!==void 0&&e!==void 0){const i=this.boundingSphere.center;this.boundingBox.getCenter(i);let r=0;for(let s=0,a=t.count;s<a;s++)Vi.fromBufferAttribute(t,s),r=Math.max(r,i.distanceToSquared(Vi)),Vi.fromBufferAttribute(e,s),r=Math.max(r,i.distanceToSquared(Vi));this.boundingSphere.radius=Math.sqrt(r),isNaN(this.boundingSphere.radius)&&console.error("THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.",this)}}toJSON(){}applyMatrix(t){return console.warn("THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4()."),this.applyMatrix4(t)}}c0.line={worldUnits:{value:1},linewidth:{value:1},resolution:{value:new F0(1,1)},dashOffset:{value:0},dashScale:{value:1},dashSize:{value:1},gapSize:{value:1}};zt.line={uniforms:hr.merge([c0.common,c0.fog,c0.line]),vertexShader:`
		#include <common>
		#include <color_pars_vertex>
		#include <fog_pars_vertex>
		#include <logdepthbuf_pars_vertex>
		#include <clipping_planes_pars_vertex>

		uniform float linewidth;
		uniform vec2 resolution;

		attribute vec3 instanceStart;
		attribute vec3 instanceEnd;

		attribute vec3 instanceColorStart;
		attribute vec3 instanceColorEnd;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#ifdef USE_DASH

			uniform float dashScale;
			attribute float instanceDistanceStart;
			attribute float instanceDistanceEnd;
			varying float vLineDistance;

		#endif

		void trimSegment( const in vec4 start, inout vec4 end ) {

			// trim end segment so it terminates between the camera plane and the near plane

			// conservative estimate of the near plane
			float a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column
			float b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column
			float nearEstimate = - 0.5 * b / a;

			float alpha = ( nearEstimate - start.z ) / ( end.z - start.z );

			end.xyz = mix( start.xyz, end.xyz, alpha );

		}

		void main() {

			#ifdef USE_COLOR

				vColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;

			#endif

			#ifdef USE_DASH

				vLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;
				vUv = uv;

			#endif

			float aspect = resolution.x / resolution.y;

			// camera space
			vec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );
			vec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );

			#ifdef WORLD_UNITS

				worldStart = start.xyz;
				worldEnd = end.xyz;

			#else

				vUv = uv;

			#endif

			// special case for perspective projection, and segments that terminate either in, or behind, the camera plane
			// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space
			// but we need to perform ndc-space calculations in the shader, so we must address this issue directly
			// perhaps there is a more elegant solution -- WestLangley

			bool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column

			if ( perspective ) {

				if ( start.z < 0.0 && end.z >= 0.0 ) {

					trimSegment( start, end );

				} else if ( end.z < 0.0 && start.z >= 0.0 ) {

					trimSegment( end, start );

				}

			}

			// clip space
			vec4 clipStart = projectionMatrix * start;
			vec4 clipEnd = projectionMatrix * end;

			// ndc space
			vec3 ndcStart = clipStart.xyz / clipStart.w;
			vec3 ndcEnd = clipEnd.xyz / clipEnd.w;

			// direction
			vec2 dir = ndcEnd.xy - ndcStart.xy;

			// account for clip-space aspect ratio
			dir.x *= aspect;
			dir = normalize( dir );

			#ifdef WORLD_UNITS

				vec3 worldDir = normalize( end.xyz - start.xyz );
				vec3 tmpFwd = normalize( mix( start.xyz, end.xyz, 0.5 ) );
				vec3 worldUp = normalize( cross( worldDir, tmpFwd ) );
				vec3 worldFwd = cross( worldDir, worldUp );
				worldPos = position.y < 0.5 ? start: end;

				// height offset
				float hw = linewidth * 0.5;
				worldPos.xyz += position.x < 0.0 ? hw * worldUp : - hw * worldUp;

				// don't extend the line if we're rendering dashes because we
				// won't be rendering the endcaps
				#ifndef USE_DASH

					// cap extension
					worldPos.xyz += position.y < 0.5 ? - hw * worldDir : hw * worldDir;

					// add width to the box
					worldPos.xyz += worldFwd * hw;

					// endcaps
					if ( position.y > 1.0 || position.y < 0.0 ) {

						worldPos.xyz -= worldFwd * 2.0 * hw;

					}

				#endif

				// project the worldpos
				vec4 clip = projectionMatrix * worldPos;

				// shift the depth of the projected points so the line
				// segments overlap neatly
				vec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;
				clip.z = clipPose.z * clip.w;

			#else

				vec2 offset = vec2( dir.y, - dir.x );
				// undo aspect ratio adjustment
				dir.x /= aspect;
				offset.x /= aspect;

				// sign flip
				if ( position.x < 0.0 ) offset *= - 1.0;

				// endcaps
				if ( position.y < 0.0 ) {

					offset += - dir;

				} else if ( position.y > 1.0 ) {

					offset += dir;

				}

				// adjust for linewidth
				offset *= linewidth;

				// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...
				offset /= resolution.y;

				// select end
				vec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;

				// back to clip space
				offset *= clip.w;

				clip.xy += offset;

			#endif

			gl_Position = clip;

			vec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation

			#include <logdepthbuf_vertex>
			#include <clipping_planes_vertex>
			#include <fog_vertex>

		}
		`,fragmentShader:`
		uniform vec3 diffuse;
		uniform float opacity;
		uniform float linewidth;

		#ifdef USE_DASH

			uniform float dashOffset;
			uniform float dashSize;
			uniform float gapSize;

		#endif

		varying float vLineDistance;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#include <common>
		#include <color_pars_fragment>
		#include <fog_pars_fragment>
		#include <logdepthbuf_pars_fragment>
		#include <clipping_planes_pars_fragment>

		vec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {

			float mua;
			float mub;

			vec3 p13 = p1 - p3;
			vec3 p43 = p4 - p3;

			vec3 p21 = p2 - p1;

			float d1343 = dot( p13, p43 );
			float d4321 = dot( p43, p21 );
			float d1321 = dot( p13, p21 );
			float d4343 = dot( p43, p43 );
			float d2121 = dot( p21, p21 );

			float denom = d2121 * d4343 - d4321 * d4321;

			float numer = d1343 * d4321 - d1321 * d4343;

			mua = numer / denom;
			mua = clamp( mua, 0.0, 1.0 );
			mub = ( d1343 + d4321 * ( mua ) ) / d4343;
			mub = clamp( mub, 0.0, 1.0 );

			return vec2( mua, mub );

		}

		void main() {

			#include <clipping_planes_fragment>

			#ifdef USE_DASH

				if ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps

				if ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX

			#endif

			float alpha = opacity;

			#ifdef WORLD_UNITS

				// Find the closest points on the view ray and the line segment
				vec3 rayEnd = normalize( worldPos.xyz ) * 1e5;
				vec3 lineDir = worldEnd - worldStart;
				vec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );

				vec3 p1 = worldStart + lineDir * params.x;
				vec3 p2 = rayEnd * params.y;
				vec3 delta = p1 - p2;
				float len = length( delta );
				float norm = len / linewidth;

				#ifndef USE_DASH

					#ifdef USE_ALPHA_TO_COVERAGE

						float dnorm = fwidth( norm );
						alpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );

					#else

						if ( norm > 0.5 ) {

							discard;

						}

					#endif

				#endif

			#else

				#ifdef USE_ALPHA_TO_COVERAGE

					// artifacts appear on some hardware if a derivative is taken within a conditional
					float a = vUv.x;
					float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
					float len2 = a * a + b * b;
					float dlen = fwidth( len2 );

					if ( abs( vUv.y ) > 1.0 ) {

						alpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );

					}

				#else

					if ( abs( vUv.y ) > 1.0 ) {

						float a = vUv.x;
						float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
						float len2 = a * a + b * b;

						if ( len2 > 1.0 ) discard;

					}

				#endif

			#endif

			vec4 diffuseColor = vec4( diffuse, alpha );

			#include <logdepthbuf_fragment>
			#include <color_fragment>

			gl_FragColor = vec4( diffuseColor.rgb, alpha );

			#include <tonemapping_fragment>
			#include <colorspace_fragment>
			#include <fog_fragment>
			#include <premultiplied_alpha_fragment>

		}
		`};class P8 extends Te{constructor(t){super({type:"LineMaterial",uniforms:hr.clone(zt.line.uniforms),vertexShader:zt.line.vertexShader,fragmentShader:zt.line.fragmentShader,clipping:!0}),this.isLineMaterial=!0,this.setValues(t)}get color(){return this.uniforms.diffuse.value}set color(t){this.uniforms.diffuse.value=t}get worldUnits(){return"WORLD_UNITS"in this.defines}set worldUnits(t){t===!0?this.defines.WORLD_UNITS="":delete this.defines.WORLD_UNITS}get linewidth(){return this.uniforms.linewidth.value}set linewidth(t){this.uniforms.linewidth&&(this.uniforms.linewidth.value=t)}get dashed(){return"USE_DASH"in this.defines}set dashed(t){t===!0!==this.dashed&&(this.needsUpdate=!0),t===!0?this.defines.USE_DASH="":delete this.defines.USE_DASH}get dashScale(){return this.uniforms.dashScale.value}set dashScale(t){this.uniforms.dashScale.value=t}get dashSize(){return this.uniforms.dashSize.value}set dashSize(t){this.uniforms.dashSize.value=t}get dashOffset(){return this.uniforms.dashOffset.value}set dashOffset(t){this.uniforms.dashOffset.value=t}get gapSize(){return this.uniforms.gapSize.value}set gapSize(t){this.uniforms.gapSize.value=t}get opacity(){return this.uniforms.opacity.value}set opacity(t){this.uniforms&&(this.uniforms.opacity.value=t)}get resolution(){return this.uniforms.resolution.value}set resolution(t){this.uniforms.resolution.value.copy(t)}get alphaToCoverage(){return"USE_ALPHA_TO_COVERAGE"in this.defines}set alphaToCoverage(t){this.defines&&(t===!0!==this.alphaToCoverage&&(this.needsUpdate=!0),t===!0?this.defines.USE_ALPHA_TO_COVERAGE="":delete this.defines.USE_ALPHA_TO_COVERAGE)}}const r9=new ut,Us=new U,Is=new U,Ct=new ut,Rt=new ut,ce=new ut,s9=new U,a9=new mt,Pt=new l6,Ns=new U,ki=new Ve,Wi=new Gn,ue=new ut;let de,en;function Fs(n,t,e){return ue.set(0,0,-t,1).applyMatrix4(n.projectionMatrix),ue.multiplyScalar(1/ue.w),ue.x=en/e.width,ue.y=en/e.height,ue.applyMatrix4(n.projectionMatrixInverse),ue.multiplyScalar(1/ue.w),Math.abs(Math.max(ue.x,ue.y))}function A5(n,t){const e=n.matrixWorld,i=n.geometry,r=i.attributes.instanceStart,s=i.attributes.instanceEnd,a=Math.min(i.instanceCount,r.count);for(let o=0,l=a;o<l;o++){Pt.start.fromBufferAttribute(r,o),Pt.end.fromBufferAttribute(s,o),Pt.applyMatrix4(e);const c=new U,h=new U;de.distanceSqToSegment(Pt.start,Pt.end,h,c),h.distanceTo(c)<en*.5&&t.push({point:h,pointOnLine:c,distance:de.origin.distanceTo(h),object:n,face:null,faceIndex:o,uv:null,uv1:null})}}function T5(n,t,e){const i=t.projectionMatrix,s=n.material.resolution,a=n.matrixWorld,o=n.geometry,l=o.attributes.instanceStart,c=o.attributes.instanceEnd,h=Math.min(o.instanceCount,l.count),p=-t.near;de.at(1,ce),ce.w=1,ce.applyMatrix4(t.matrixWorldInverse),ce.applyMatrix4(i),ce.multiplyScalar(1/ce.w),ce.x*=s.x/2,ce.y*=s.y/2,ce.z=0,s9.copy(ce),a9.multiplyMatrices(t.matrixWorldInverse,a);for(let f=0,m=h;f<m;f++){if(Ct.fromBufferAttribute(l,f),Rt.fromBufferAttribute(c,f),Ct.w=1,Rt.w=1,Ct.applyMatrix4(a9),Rt.applyMatrix4(a9),Ct.z>p&&Rt.z>p)continue;if(Ct.z>p){const y=Ct.z-Rt.z,T=(Ct.z-p)/y;Ct.lerp(Rt,T)}else if(Rt.z>p){const y=Rt.z-Ct.z,T=(Rt.z-p)/y;Rt.lerp(Ct,T)}Ct.applyMatrix4(i),Rt.applyMatrix4(i),Ct.multiplyScalar(1/Ct.w),Rt.multiplyScalar(1/Rt.w),Ct.x*=s.x/2,Ct.y*=s.y/2,Rt.x*=s.x/2,Rt.y*=s.y/2,Pt.start.copy(Ct),Pt.start.z=0,Pt.end.copy(Rt),Pt.end.z=0;const x=Pt.closestPointToPointParameter(s9,!0);Pt.at(x,Ns);const u=$9.lerp(Ct.z,Rt.z,x),d=u>=-1&&u<=1,A=s9.distanceTo(Ns)<en*.5;if(d&&A){Pt.start.fromBufferAttribute(l,f),Pt.end.fromBufferAttribute(c,f),Pt.start.applyMatrix4(a),Pt.end.applyMatrix4(a);const y=new U,T=new U;de.distanceSqToSegment(Pt.start,Pt.end,T,y),e.push({point:T,pointOnLine:y,distance:de.origin.distanceTo(T),object:n,face:null,faceIndex:f,uv:null,uv1:null})}}}class w5 extends oe{constructor(t=new R8,e=new P8({color:Math.random()*16777215})){super(t,e),this.isLineSegments2=!0,this.type="LineSegments2"}computeLineDistances(){const t=this.geometry,e=t.attributes.instanceStart,i=t.attributes.instanceEnd,r=new Float32Array(2*e.count);for(let a=0,o=0,l=e.count;a<l;a++,o+=2)Us.fromBufferAttribute(e,a),Is.fromBufferAttribute(i,a),r[o]=o===0?0:r[o-1],r[o+1]=r[o]+Us.distanceTo(Is);const s=new Q9(r,2,1);return t.setAttribute("instanceDistanceStart",new pe(s,1,0)),t.setAttribute("instanceDistanceEnd",new pe(s,1,1)),this}raycast(t,e){const i=this.material.worldUnits,r=t.camera;r===null&&!i&&console.error('LineSegments2: "Raycaster.camera" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.');const s=t.params.Line2!==void 0&&t.params.Line2.threshold||0;de=t.ray;const a=this.matrixWorld,o=this.geometry,l=this.material;en=l.linewidth+s,o.boundingSphere===null&&o.computeBoundingSphere(),Wi.copy(o.boundingSphere).applyMatrix4(a);let c;if(i)c=en*.5;else{const p=Math.max(r.near,Wi.distanceToPoint(de.origin));c=Fs(r,p,l.resolution)}if(Wi.radius+=c,de.intersectsSphere(Wi)===!1)return;o.boundingBox===null&&o.computeBoundingBox(),ki.copy(o.boundingBox).applyMatrix4(a);let h;if(i)h=en*.5;else{const p=Math.max(r.near,ki.distanceToPoint(de.origin));h=Fs(r,p,l.resolution)}ki.expandByScalar(h),de.intersectsBox(ki)!==!1&&(i?A5(this,e):T5(this,r,e))}onBeforeRender(t){const e=this.material.uniforms;e&&e.resolution&&(t.getViewport(r9),this.material.uniforms.resolution.value.set(r9.z,r9.w))}}const C5="https://media.githubusercontent.com/media/yansong-yu/GPD-Visualization-Showcase/refs/heads/main/assets/gpd_4d-DEOGJUev.bin?download=true",R5="data:application/octet-stream;base64,AAAAAAAA8D/wWCXUJsfwP5INhn78l/E/KUAqhfly8j9+lEFKnFjzP8uTE1VpSfQ/h+97nutF9T9Exx7htE72P2Q7g+1dZPc/WdZEAoeH+D+Gso4o2Lj5P6tgVFInoPo/LbwVlQH5+j9OB8oNvEj8P+rpeVTJqP0/pmWklvQZ/z/otF1xiU4AQAHNjNGBGQFABkh5j1juAUB8AcSAiM0CQJnt+HOStwNAsIPlev2sBEC7b4w4V64FQBGI4zI0vAZAFDSLKDDXB0D1u7Bq7v8IQExhTzsaNwpAKqYGMGd9C0D2zL6ZkdMMQOBhV/FeOg5A4YaeSZ6yD0D8Y2ljlJ4QQB44+g1xbRFAWVkXh1xGEkDhPlL/0ykTQGhAeL1aGBRAWuRVanoSFUAMMylgwxgWQKno8P3MKxdAT5rI/jVMGEAnOYTVpHoZQBHSvwzItxpASfqaq1YEHECJC1qfEGEdQPElKiq/zh5AS/KjqxonIECf5mU6KPAgQD5jsUn8wiFA+CQehhCgIkALz72G5IcjQJaSvhb+eiRAyV+igul5JUDkMDfpOYUmQMwpf5CJnSdA3oy5PnrDKEAR57+XtfcpQIdV7X7tOitARWXIfdyNLEC4zKovRvEtQJggpbL3ZS9AfNXvDmR2MED1Wt5+TEMxQGGh1jTveDFA9/YBaysaMkD3/TDVfPsyQMGOxcbC5zNAVqupm4XfNECFbglRVOM1QNvI2NfE8zZAN2Vca3QROEARpufrBz05QN0ZBD4sdzpAD1E5rpbAO0Daq65ZBRo9QCmC45s/hD5AJnzeQAsAQECD8xWhMsdAQNw7WN4ImEFAODwCfwZzQkBJfJzlqVhDQJ27y5l3SURALGrNlPpFRUCyJqyRxE5GQH6MWmFuZEdAuNrkQpiHSEBWW+w/6rhJQEHpoY0U+UpAqI138s9ITEBa5cMw3qhNQAnZlHYKGk9A2Bh56ZROUEDv2mnYjRlRQBfjCCxl7lFAsXFNupXNUkAxEx5SoLdTQMY+pwUMrVRAsz5PeGauVUCVX3QwRLxWQFGTJO1A11dAAAAAAAAAWUA=",P5="data:application/octet-stream;base64,AAAAAAAAAAB7FK5H4XqUv3sUrkfheqS/uB6F61G4rr97FK5H4Xq0v5qZmZmZmbm/uB6F61G4vr/sUbgehevBv3sUrkfhesS/CtejcD0Kx7+amZmZmZnJvylcj8L1KMy/uB6F61G4zr+kcD0K16PQv+xRuB6F69G/MzMzMzMz0797FK5H4XrUv8P1KFyPwtW/CtejcD0K179SuB6F61HYv5qZmZmZmdm/4XoUrkfh2r8pXI/C9Sjcv3E9CtejcN2/uB6F61G43r8AAAAAAADgv6RwPQrXo+C/SOF6FK5H4b/sUbgehevhv4/C9Shcj+K/MzMzMzMz47/Xo3A9Ctfjv3sUrkfheuS/H4XrUbge5b/D9Shcj8Llv2dmZmZmZua/CtejcD0K57+uR+F6FK7nv1K4HoXrUei/9ihcj8L16L+amZmZmZnpvz4K16NwPeq/4XoUrkfh6r+F61G4HoXrvylcj8L1KOy/zczMzMzM7L9xPQrXo3DtvxWuR+F6FO6/uB6F61G47r9cj8L1KFzvvwAAAAAAAPC/",L5="data:application/octet-stream;base64,rkfhehSu778K16NwPQrvv2ZmZmZmZu6/wvUoXI/C7b8fhetRuB7tv3sUrkfheuy/16NwPQrX678zMzMzMzPrv4/C9Shcj+q/7FG4HoXr6b9I4XoUrkfpv6RwPQrXo+i/AAAAAAAA6L9cj8L1KFznv7gehetRuOa/FK5H4XoU5r9wPQrXo3Dlv8zMzMzMzOS/KVyPwvUo5L+F61G4HoXjv+F6FK5H4eK/PgrXo3A94r+amZmZmZnhv/YoXI/C9eC/UrgehetR4L9cj8L1KFzfvxSuR+F6FN6/zMzMzMzM3L+E61G4HoXbvz4K16NwPdq/9ihcj8L12L+uR+F6FK7Xv2ZmZmZmZta/HoXrUbge1b/Wo3A9CtfTv47C9Shcj9K/SOF6FK5H0b8AAAAAAADQv3A9CtejcM2/4HoUrkfhyr9QuB6F61HIv8D1KFyPwsW/NDMzMzMzw7+kcD0K16PAvyhcj8L1KLy/CNejcD0Kt7/oUbgeheuxv5CZmZmZmam/wB6F61G4nr+AFK5H4XqEv4AUrkfheoQ/wB6F61G4nj+gmZmZmZmpP/BRuB6F67E/ENejcD0Ktz8wXI/C9Si8P6hwPQrXo8A/ODMzMzMzwz/A9Shcj8LFP1C4HoXrUcg/4HoUrkfhyj9wPQrXo3DNPwAAAAAAANA/SOF6FK5H0T+QwvUoXI/SP9ijcD0K19M/IIXrUbge1T9oZmZmZmbWP7BH4XoUrtc/+Chcj8L12D9ACtejcD3aP4TrUbgehds/zMzMzMzM3D8UrkfhehTeP1yPwvUoXN8/UrgehetR4D/2KFyPwvXgP5qZmZmZmeE/PgrXo3A94j/iehSuR+HiP4brUbgeheM/KlyPwvUo5D/OzMzMzMzkP3I9CtejcOU/FK5H4XoU5j+4HoXrUbjmP1yPwvUoXOc/AAAAAAAA6D+kcD0K16PoP0jhehSuR+k/7FG4HoXr6T+QwvUoXI/qPzQzMzMzM+s/2KNwPQrX6z98FK5H4XrsPyCF61G4Hu0/wvUoXI/C7T9mZmZmZmbuPwrXo3A9Cu8/rkfhehSu7z8=",D5="data:application/octet-stream;base64,exSuR+F6lD97FK5H4XqkP7gehetRuK4/exSuR+F6tD+amZmZmZm5P7gehetRuL4/7FG4HoXrwT97FK5H4XrEPwrXo3A9Csc/mpmZmZmZyT8pXI/C9SjMP7gehetRuM4/pHA9Ctej0D/sUbgehevRPzMzMzMzM9M/exSuR+F61D/D9Shcj8LVPwrXo3A9Ctc/UrgehetR2D+amZmZmZnZP+F6FK5H4do/KVyPwvUo3D9xPQrXo3DdP7gehetRuN4/AAAAAAAA4D+kcD0K16PgP0jhehSuR+E/7FG4HoXr4T+PwvUoXI/iPzMzMzMzM+M/16NwPQrX4z97FK5H4XrkPx+F61G4HuU/w/UoXI/C5T9nZmZmZmbmPwrXo3A9Cuc/rkfhehSu5z9SuB6F61HoP/YoXI/C9eg/mpmZmZmZ6T8+CtejcD3qP+F6FK5H4eo/hetRuB6F6z8pXI/C9SjsP83MzMzMzOw/cT0K16Nw7T8VrkfhehTuP7gehetRuO4/XI/C9Shc7z8AAAAAAADwPw==";function ti(n){return new Promise((t,e)=>{fetch(n).then(i=>{if(!i.ok)throw new Error(`Failed to load ${n}, status: ${i.status}`);return console.log("load success ",n),i.arrayBuffer()}).then(i=>{t(i)}).catch(i=>{e(i)})})}function o9(n,t){const e=document.createElement("canvas"),i=e.getContext("2d");e.width=400,e.height=400,i.font="Bold 100px Arial",i.fillStyle=t,i.fillText(n,e.width/2-50,e.height/2+50);const r=new t6(e),s=new v8({map:r});return new $7(s)}function l9(n,t,e,i){const r=new R8().setPositions([n.x,n.y,n.z,t.x,t.y,t.z]),s=new P8({color:i,linewidth:e});return new w5(r,s)}function Os(n,t=8,e=.5,i="x",r="y",s="z",a="#ff0000",o="#00ff00",l="#0000ff"){let c=l9(n,new U(n.x+e,n.y,n.z),t,a),h=l9(n,new U(n.x,n.y+e,n.z),t,o),p=l9(n,new U(n.x,n.y,n.z+e),t,l),f=o9(i,a),m=o9(r,o),g=o9(s,l);return f.position.set(n.x+e+.5,n.y,n.z),m.position.set(n.x,n.y+e+.5,n.z),g.position.set(n.x,n.y,n.z+e+.5),[c,h,p,f,m,g]}function c9(n){let t=-Number.MAX_VALUE,e=Number.MAX_VALUE;return n.forEach(i=>{t=Math.max(t,i),e=Math.min(e,i)}),[e,t]}let U5=document.getElementById("loading-overlay"),I5=document.getElementById("main-content");const i1=document.getElementById("dropdown1"),r1=document.getElementById("dropdown2");i1.value="0";r1.value="2";const Xi=["x","xi","t","Q2"];let ie=[0,2],wn=[0,0],Cn=!0,qi=!0;const Yi=document.getElementById("slider_1"),ji=document.getElementById("slider_2");Promise.all([ti(C5),ti(L5),ti(D5),ti(P5),ti(R5)]).then(([n,t,e,i,r])=>{U5.style.display="none",I5.style.display="block",n=new Float64Array(n),t=new Float64Array(t),e=new Float64Array(e),i=new Float64Array(i),r=new Float64Array(r);var s=[t,e,i,r];let a=[t.length,e.length,i.length,r.length],o=new H6(n,a),[l,c]=c9(n),h=document.getElementById("three-container"),p=new jt(75,h.clientWidth/h.clientHeight,.1,1e3);p.position.set(0,0,.7);let f=new K7({antialias:!0});f.setClearColor(.1,.1,.1),f.setSize(h.clientWidth,h.clientHeight),h.appendChild(f.domElement);let m=new h6(p,f.domElement);m.rotateSpeed=10,m.zoomSpeed=1.2;let g,x,u,d,A=[[],[]],y=[[],[]],T,G,D,w,O,s0,_=new n6({vertexColors:!0,side:fe,metalness:.1,roughness:.5}),M=new a6(16777215,.1),j=new s6(16777215,2);j.position.set(1,1,1),j.castShadow=!0;let k=new dr(-2,2,2,-2,-1e3,1e3);Ls.create(Yi,{start:[0],tooltips:!0,step:1,range:{min:0,max:A[0].length-1},format:{to:function(X){return A[0][Math.round(X)]},from:function(X){return A[0].indexOf(X)}}}),Ls.create(ji,{start:[0],tooltips:!0,step:1,range:{min:0,max:A[1].length-1},format:{to:function(X){return A[1][Math.round(X)]},from:function(X){return A[1].indexOf(X)}}});function J(){if(qi){qi=!1,O=[0,1,2,3].filter(l0=>!ie.includes(l0)),A=[s[ie[0]],s[ie[1]]],y=[s[O[0]],s[O[1]]],[g,x]=c9(y[0]),[u,d]=c9(y[1]),Yi.noUiSlider.updateOptions({range:{min:0,max:A[0].length-1},format:{to:function(l0){return A[0][Math.round(l0)]},from:function(l0){return A[0].indexOf(l0)}}}),ji.noUiSlider.updateOptions({range:{min:0,max:A[1].length-1},format:{to:function(l0){return A[1][Math.round(l0)]},from:function(l0){return A[1].indexOf(l0)}}}),T=new ds,s0=new ci(1,1,y[0].length-1,y[1].length-1);let X=new oe(s0,_),q=Os(new U(0,0,0),3,2,Xi[O[0]],Xi[O[1]],"GPD"),t0=new t9(4,4),V=new t9(4,4),f0=new t9(4,4);V.rotation.x=Math.PI/2,f0.rotation.z=Math.PI/2,T.add(V),T.add(f0),T.add(t0),q.forEach(l0=>{T.add(l0)}),T.add(X),T.add(j),T.add(M),w=new ds,Os(new U(0,0,0),8,.5,Xi[O[0]],Xi[O[1]],"GPD").forEach(l0=>{w.add(l0)}),G=s0.attributes.position,D=new Float32Array(G.count*3);for(let l0=0;l0<G.count;l0++){let k0=Math.floor(l0/y[0].length),K0=l0%y[0].length,Z=(y[1][k0]-u)/(d-u),n0=(y[0][K0]-g)/(x-g);G.setX(l0,n0),G.setY(l0,Z)}}if(Cn){Cn=!1;for(let X=0;X<G.count;X++){let q=Math.floor(X/y[0].length),t0=X%y[0].length,V=[0,0,0,0];V[ie[0]]=wn[0],V[ie[1]]=wn[1],V[O[0]]=t0,V[O[1]]=q;let f0=(o.get(V[0],V[1],V[2],V[3])-l)/(c-l);G.setZ(X,f0);let d0=u9(f0,"jet",!1);D[X*3]=d0[0]/255,D[X*3+1]=d0[1]/255,D[X*3+2]=d0[2]/255}s0.setAttribute("color",new $t(D,3)),G.needsUpdate=!0,s0.computeVertexNormals()}f.setViewport(0,0,h.clientWidth,h.clientHeight),m.update(),f.clear(),f.render(T,p),f.clearDepth(),f.autoClear=!1,f.setViewport(0,0,300,300),k.position.copy(p.position),k.quaternion.copy(p.quaternion),k.position.normalize(),f.render(w,k)}f.setAnimationLoop(J),window.addEventListener("resize",function(){p.aspect=h.clientWidth/h.clientHeight,p.updateProjectionMatrix(),f.setSize(h.clientWidth,h.clientHeight)}),Yi.noUiSlider.on("change",function(X,q){wn[0]=Math.round(A[0].indexOf(X[0])),Cn=!0}),ji.noUiSlider.on("change",function(X,q){wn[1]=Math.round(A[1].indexOf(X[0])),Cn=!0}),i1.addEventListener("change",function(){const X=Number(i1.value);if(X==ie[1]){alert("Please select two different axis!"),i1.value=ie[0];return}ie[0]=X,qi=!0,Cn=!0,wn=[0,0],Yi.noUiSlider.set(0),console.log("Selected option:",X)}),r1.addEventListener("change",function(){const X=Number(r1.value);if(X==ie[0]){alert("Please select two different axis!"),r1.value=ie[1];return}ie[1]=X,qi=!0,Cn=!0,wn=[0,0],ji.noUiSlider.set(0),console.log("Selected option:",X)})});
